import { Component, EventEmitter, HostBinding, HostListener, Input, Optional, Output, Self, ViewChild } from '@angular/core';
import { Validators } from '@angular/forms';
import { noop, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { EDITOR_PROVIDER } from '../core/edit-provider';
import { mkenum } from '../core/utils';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export const RadioLabelPosition = mkenum({
    BEFORE: 'before',
    AFTER: 'after'
});
let nextId = 0;
/**
 * **Ignite UI for Angular Radio Button** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/radio_button.html)
 *
 * The Ignite UI Radio Button allows the user to select a single option from an available set of options that are listed side by side.
 *
 * Example:
 * ```html
 * <igx-radio>
 *   Simple radio button
 * </igx-radio>
 * ```
 */
export class IgxRadioComponent {
    /**
     * Gets the `nativeElement` of the igx-radio.
     *
     * @example
     * ```typescript
     * let igxRadioNativeElement = this.igxRadio.nativeElement;
     * ```
     */
    get nativeElement() {
        return this.nativeRadio.nativeElement;
    }
    /**
     * Sets/gets whether the radio button is required.
     * If not set, `required` will have value `false`.
     * ```html
     * <igx-radio required></igx-radio>
     * ```
     * ```typescript
     * let isRequired =  this.radio.required;
     * ```
     *
     * @memberof IgxRadioComponent
     */
    get required() {
        return this._required || this.nativeElement.hasAttribute('required');
    }
    set required(value) {
        this._required = (value === '') || value;
    }
    /**
     * Sets/gets  the `disabled` attribute.
     * Default value is `false`.
     * ```html
     * <igx-radio disabled></igx-radio>
     * ```
     * ```typescript
     * let isDisabled =  this.radio.disabled;
     * ```
     *
     * @memberof IgxRadioComponent
     */
    get disabled() {
        return this._disabled || false;
    }
    set disabled(value) {
        this._disabled = (value === '') || value;
    }
    /**
     * Sets/gets whether the radio button is invalid.
     * Default value is `false`.
     * ```html
     * <igx-radio invalid></igx-radio>
     * ```
     * ```typescript
     * let isInvalid =  this.radio.invalid;
     * ```
     *
     * @memberof IgxRadioComponent
     */
    get invalid() {
        return this._invalid || false;
    }
    set invalid(value) {
        this._invalid = !!value;
    }
    constructor(cdr, renderer, ngControl) {
        this.cdr = cdr;
        this.renderer = renderer;
        this.ngControl = ngControl;
        /**
         * @hidden
         * @internal
         */
        this.destroy$ = new Subject();
        /**
         * Sets/gets the `id` of the radio component.
         * If not set, the `id` of the first radio component will be `"igx-radio-0"`.
         * ```html
         * <igx-radio id = "my-first-radio"></igx-radio>
         * ```
         * ```typescript
         * let radioId =  this.radio.id;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.id = `igx-radio-${nextId++}`;
        /**
         * Sets/gets the id of the `label` element in the radio component.
         * If not set, the id of the `label` in the first radio component will be `"igx-radio-0-label"`.
         * ```html
         * <igx-radio labelId = "Label1"></igx-radio>
         * ```
         * ```typescript
         * let labelId =  this.radio.labelId;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.labelId = `${this.id}-label`;
        /**
         * Sets the value of the `tabindex` attribute.
         * ```html
         * <igx-radio [tabindex] = "1"></igx-radio>
         * ```
         * ```typescript
         * let tabIndex =  this.radio.tabindex;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.tabindex = null;
        /**
         * Enables/disables the ripple effect on the radio button..
         * If not set, the `disableRipple` will have value `false`.
         * ```html
         * <igx-radio [disableRipple] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isDisabledRipple =  this.radio.disableRipple;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.disableRipple = false;
        /**
         * Sets/gets the `aria-labelledby` attribute of the radio component.
         * If not set, the `aria-labelledby` will be equal to the value of `labelId` attribute.
         * ```html
         * <igx-radio aria-labelledby = "Radio1"></igx-radio>
         * ```
         * ```typescript
         * let ariaLabelledBy = this.radio.ariaLabelledBy;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.ariaLabelledBy = this.labelId;
        /**
         * Sets/gets the `aria-label` attribute of the radio component.
         * ```html
         * <igx-radio aria-label = "Radio1"></igx-radio>
         * ```
         * ```typescript
         * let ariaLabel =  this.radio.ariaLabel;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.ariaLabel = null;
        /**
         * An event that is emitted after the radio `value` is changed.
         * Provides references to the `IgxRadioComponent` and the `value` property as event arguments.
         *
         * @memberof IgxRadioComponent
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /** @hidden @internal */
        this.blurRadio = new EventEmitter();
        /**
         * Returns the class of the radio component.
         * ```typescript
         * let radioClass = this.radio.cssClass;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.cssClass = 'igx-radio';
        /**
         * Sets/gets  the `checked` attribute.
         * Default value is `false`.
         * ```html
         * <igx-radio [checked] = "true"></igx-radio>
         * ```
         * ```typescript
         * let isChecked =  this.radio.checked;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.checked = false;
        /**
         * Sets/gets whether the radio component is on focus.
         * Default value is `false`.
         * ```typescript
         * this.radio.focus = true;
         * ```
         * ```typescript
         * let isFocused =  this.radio.focused;
         * ```
         *
         * @memberof IgxRadioComponent
         */
        this.focused = false;
        /**
         * @hidden
         */
        this.inputId = `${this.id}-input`;
        /**
         * @hidden
         * @internal
         */
        this._required = false;
        /**
         * @hidden
         * @internal
         */
        this._invalid = false;
        /**
         * @hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
        if (this.ngControl !== null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden
     * @internal
    */
    ngAfterViewInit() {
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged.bind(this));
            if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {
                this._required = this.ngControl?.control?.hasValidator(Validators.required);
                this.cdr.detectChanges();
            }
        }
    }
    onStatusChanged() {
        if (this.disabled !== this.ngControl.disabled) {
            this.disabled = this.ngControl.disabled;
        }
        this.updateValidityState();
    }
    /**
    * @hidden
    * @internal
    */
    _changed(event) {
        if (event instanceof Event) {
            event.preventDefault();
        }
    }
    /**
     * @hidden
     * @internal
     */
    onKeyUp(event) {
        event.stopPropagation();
        if (!this.focused) {
            this.focused = true;
        }
    }
    /**
     * @hidden
     */
    _clicked() {
        this.select();
    }
    /**
     * Selects the current radio button.
     * ```typescript
     * this.radio.select();
     * ```
     *
     * @memberof IgxRadioComponent
     */
    select() {
        if (!this.checked) {
            this.checked = true;
            this.change.emit({ value: this.value, radio: this });
            this._onChangeCallback(this.value);
        }
    }
    /**
     * Deselects the current radio button.
     * ```typescript
     * this.radio.deselect();
     * ```
     *
     * @memberof IgxRadioComponent
     */
    deselect() {
        this.checked = false;
        this.focused = false;
        this.cdr.markForCheck();
    }
    /**
     * Checks whether the provided value is consistent to the current radio button.
     * If it is, the checked attribute will have value `true`;
     * ```typescript
     * this.radio.writeValue('radioButtonValue');
     * ```
     */
    writeValue(value) {
        this.value = this.value ?? value;
        if (value === this.value) {
            this.select();
        }
        else {
            this.deselect();
        }
    }
    /** @hidden */
    getEditElement() {
        return this.nativeRadio.nativeElement;
    }
    /**
     * @hidden
     */
    get labelClass() {
        switch (this.labelPosition) {
            case RadioLabelPosition.BEFORE:
                return `${this.cssClass}__label--before`;
            case RadioLabelPosition.AFTER:
            default:
                return `${this.cssClass}__label`;
        }
    }
    /**
     * @hidden
     */
    onBlur() {
        this.focused = false;
        this._onTouchedCallback();
        this.updateValidityState();
        this.blurRadio.emit();
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     * @internal
     */
    updateValidityState() {
        if (this.ngControl) {
            if (!this.disabled && (this.ngControl.control.touched || this.ngControl.control.dirty)) {
                // the control is not disabled and is touched or dirty
                this._invalid = this.ngControl.invalid;
            }
            else {
                //  if control is untouched, pristine, or disabled its state is initial. This is when user did not interact
                //  with the radio or when form/control is reset
                this._invalid = false;
            }
        }
        else {
            this.checkNativeValidity();
        }
    }
    /**
     * A function to assign a native validity property of a radio.
     * This should be used when there's no ngControl
     *
     * @hidden
     * @internal
     */
    checkNativeValidity() {
        if (!this.disabled && this._required && !this.checked) {
            this._invalid = !this.focused;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxRadioComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxRadioComponent, isStandalone: true, selector: "igx-radio", inputs: { id: "id", labelId: "labelId", labelPosition: "labelPosition", value: "value", name: "name", tabindex: "tabindex", disableRipple: "disableRipple", required: "required", ariaLabelledBy: ["aria-labelledby", "ariaLabelledBy"], ariaLabel: ["aria-label", "ariaLabel"], checked: "checked", disabled: "disabled", invalid: "invalid" }, outputs: { change: "change" }, host: { listeners: { "change": "_changed($event)", "keyup": "onKeyUp($event)", "click": "_clicked()", "blur": "onBlur()" }, properties: { "attr.id": "this.id", "class.igx-radio": "this.cssClass", "class.igx-radio--checked": "this.checked", "class.igx-radio--disabled": "this.disabled", "class.igx-radio--invalid": "this.invalid", "class.igx-radio--focused": "this.focused" } }, providers: [{
                provide: EDITOR_PROVIDER,
                useExisting: IgxRadioComponent,
                multi: true
            }], viewQueries: [{ propertyName: "nativeRadio", first: true, predicate: ["radio"], descendants: true, static: true }, { propertyName: "nativeLabel", first: true, predicate: ["nativeLabel"], descendants: true, static: true }, { propertyName: "placeholderLabel", first: true, predicate: ["placeholderLabel"], descendants: true, static: true }], ngImport: i0, template: "<input #radio class=\"igx-radio__input\" type=\"radio\"\r\n    [id]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [tabindex]=\"tabindex\"\r\n    [disabled]=\"disabled\"\r\n    [checked]=\"checked\"\r\n    [required]=\"required\"\r\n    [attr.aria-required]=\"required\"\r\n    [attr.aria-invalid]=\"invalid\"\r\n    [attr.aria-checked]=\"checked\"\r\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\r\n    [attr.aria-label]=\"ariaLabel\"\r\n    (blur)=\"onBlur()\" />\r\n\r\n<span #nativeLabel class=\"igx-radio__composite\" igxRipple\r\n    igxRippleTarget=\".igx-radio__ripple\"\r\n    [igxRippleDisabled]=\"disableRipple\"\r\n    [igxRippleCentered]=\"true\"\r\n    [igxRippleDuration]=\"300\">\r\n    <div class=\"igx-radio__ripple\"></div>\r\n</span>\r\n\r\n<span #placeholderLabel\r\n    [id]=\"labelId\"\r\n    [class]=\"labelClass\">\r\n    <ng-content></ng-content>\r\n</span>\r\n", dependencies: [{ kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxRadioComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-radio', providers: [{
                            provide: EDITOR_PROVIDER,
                            useExisting: IgxRadioComponent,
                            multi: true
                        }], standalone: true, imports: [IgxRippleDirective], template: "<input #radio class=\"igx-radio__input\" type=\"radio\"\r\n    [id]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [tabindex]=\"tabindex\"\r\n    [disabled]=\"disabled\"\r\n    [checked]=\"checked\"\r\n    [required]=\"required\"\r\n    [attr.aria-required]=\"required\"\r\n    [attr.aria-invalid]=\"invalid\"\r\n    [attr.aria-checked]=\"checked\"\r\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\r\n    [attr.aria-label]=\"ariaLabel\"\r\n    (blur)=\"onBlur()\" />\r\n\r\n<span #nativeLabel class=\"igx-radio__composite\" igxRipple\r\n    igxRippleTarget=\".igx-radio__ripple\"\r\n    [igxRippleDisabled]=\"disableRipple\"\r\n    [igxRippleCentered]=\"true\"\r\n    [igxRippleDuration]=\"300\">\r\n    <div class=\"igx-radio__ripple\"></div>\r\n</span>\r\n\r\n<span #placeholderLabel\r\n    [id]=\"labelId\"\r\n    [class]=\"labelClass\">\r\n    <ng-content></ng-content>\r\n</span>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { nativeRadio: [{
                type: ViewChild,
                args: ['radio', { static: true }]
            }], nativeLabel: [{
                type: ViewChild,
                args: ['nativeLabel', { static: true }]
            }], placeholderLabel: [{
                type: ViewChild,
                args: ['placeholderLabel', { static: true }]
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], labelId: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], disableRipple: [{
                type: Input
            }], required: [{
                type: Input
            }], ariaLabelledBy: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], change: [{
                type: Output
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-radio']
            }], checked: [{
                type: HostBinding,
                args: ['class.igx-radio--checked']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.igx-radio--disabled']
            }, {
                type: Input
            }], invalid: [{
                type: HostBinding,
                args: ['class.igx-radio--invalid']
            }, {
                type: Input
            }], focused: [{
                type: HostBinding,
                args: ['class.igx-radio--focused']
            }], _changed: [{
                type: HostListener,
                args: ['change', ['$event']]
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], _clicked: [{
                type: HostListener,
                args: ['click']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,