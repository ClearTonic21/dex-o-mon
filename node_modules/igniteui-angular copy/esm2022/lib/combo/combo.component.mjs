import { NgClass, NgIf, NgTemplateOutlet } from '@angular/common';
import { Component, Optional, Inject, ViewChild, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { FormsModule, NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxStringFilteringOperand, IgxBooleanFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { IgxForOfDirective } from '../directives/for-of/for_of.directive';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import { IgxButtonDirective } from '../directives/button/button.directive';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxComboItemComponent } from './combo-item.component';
import { IgxComboDropDownComponent } from './combo-dropdown.component';
import { IgxComboFilteringPipe, IgxComboGroupingPipe } from './combo.pipes';
import { DisplayDensityToken } from '../core/density';
import { IGX_COMBO_COMPONENT, IgxComboBaseDirective } from './combo.common';
import { IgxComboAddItemComponent } from './combo-add-item.component';
import { IgxComboAPIService } from './combo.api';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { IgxDropDownItemNavigationDirective } from '../drop-down/drop-down-navigation.directive';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxInputDirective } from '../directives/input/input.directive';
import * as i0 from "@angular/core";
import * as i1 from "../core/selection";
import * as i2 from "./combo.api";
import * as i3 from "../icon/icon.service";
import * as i4 from "@angular/forms";
/**
 * When called with sets A & B, returns A - B (as array);
 *
 * @hidden
 */
const diffInSets = (set1, set2) => {
    const results = [];
    set1.forEach(entry => {
        if (!set2.has(entry)) {
            results.push(entry);
        }
    });
    return results;
};
/**
 *  Represents a drop-down list that provides editable functionalities, allowing users to choose an option from a predefined list.
 *
 * @igxModule IgxComboModule
 * @igxTheme igx-combo-theme
 * @igxKeywords combobox, combo selection
 * @igxGroup Grids & Lists
 *
 * @remarks
 * It provides the ability to filter items as well as perform selection with the provided data.
 * Additionally, it exposes keyboard navigation and custom styling capabilities.
 * @example
 * ```html
 * <igx-combo [itemsMaxHeight]="250" [data]="locationData"
 *  [displayKey]="'field'" [valueKey]="'field'"
 *  placeholder="Location(s)" searchPlaceholder="Search...">
 * </igx-combo>
 * ```
 */
export class IgxComboComponent extends IgxComboBaseDirective {
    /**
     * @deprecated in version 14.0.0. Use the IComboFilteringOptions.filterable
     *
     * An @Input property that enabled/disables filtering in the list. The default is `true`.
     * ```html
     * <igx-combo [filterable]="false">
     * ```
     */
    get filterable() {
        return this.filteringOptions.filterable;
    }
    set filterable(value) {
        this.filteringOptions = Object.assign({}, this.filteringOptions, { filterable: value });
    }
    /**
     * @hidden @internal
     */
    get inputEmpty() {
        return !this.value && !this.placeholder;
    }
    /** @hidden @internal */
    get filteredData() {
        return this.filteringOptions.filterable ? this._filteredData : this.data;
    }
    /** @hidden @internal */
    set filteredData(val) {
        this._filteredData = this.groupKey ? (val || []).filter((e) => e.isHeader !== true) : val;
        this.checkMatch();
    }
    constructor(elementRef, cdr, selectionService, comboAPI, _iconService, _displayDensityOptions, _inputGroupType, _injector) {
        super(elementRef, cdr, selectionService, comboAPI, _iconService, _displayDensityOptions, _inputGroupType, _injector);
        /**
         * An @Input property that controls whether the combo's search box
         * should be focused after the `opened` event is called
         * When `false`, the combo's list item container will be focused instead
         */
        this.autoFocusSearch = true;
        /**
         * Defines the placeholder value for the combo dropdown search field
         *
         * ```typescript
         * // get
         * let myComboSearchPlaceholder = this.combo.searchPlaceholder;
         * ```
         *
         * ```html
         * <!--set-->
         * <igx-combo [searchPlaceholder]='newPlaceHolder'></igx-combo>
         * ```
         */
        this.searchPlaceholder = 'Enter a Search Term';
        /**
         * Emitted when item selection is changing, before the selection completes
         *
         * ```html
         * <igx-combo (selectionChanging)='handleSelection()'></igx-combo>
         * ```
         */
        this.selectionChanging = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.filteringLogic = FilteringLogic.Or;
        this.stringFilters = IgxStringFilteringOperand;
        this.booleanFilters = IgxBooleanFilteringOperand;
        this._prevInputValue = '';
        this.comboAPI.register(this);
    }
    onArrowDown(event) {
        event.preventDefault();
        event.stopPropagation();
        this.open();
    }
    /** @hidden @internal */
    get displaySearchInput() {
        return this.filteringOptions.filterable || this.allowCustomValues;
    }
    /**
     * @hidden @internal
     */
    handleKeyUp(event) {
        // TODO: use PlatformUtil for keyboard navigation
        if (event.key === 'ArrowDown' || event.key === 'Down') {
            this.dropdown.focusedItem = this.dropdown.items[0];
            this.dropdownContainer.nativeElement.focus();
        }
        else if (event.key === 'Escape' || event.key === 'Esc') {
            this.toggle();
        }
    }
    /**
     * @hidden @internal
     */
    handleSelectAll(evt) {
        if (evt.checked) {
            this.selectAllItems();
        }
        else {
            this.deselectAllItems();
        }
    }
    /**
     * @hidden @internal
     */
    writeValue(value) {
        const selection = Array.isArray(value) ? value.filter(x => x !== undefined) : [];
        const oldSelection = this.selection;
        this.selectionService.select_items(this.id, selection, true);
        this.cdr.markForCheck();
        this._value = this.createDisplayText(this.selection, oldSelection);
    }
    /**
     * @hidden
     */
    getEditElement() {
        return this.comboInput.nativeElement;
    }
    /**
     * @hidden @internal
     */
    get context() {
        return {
            $implicit: this
        };
    }
    /**
     * @hidden @internal
     */
    handleClearItems(event) {
        if (this.disabled) {
            return;
        }
        this.deselectAllItems(true, event);
        if (this.collapsed) {
            this.getEditElement().focus();
        }
        else {
            this.focusSearchInput(true);
        }
        event.stopPropagation();
    }
    /**
     * Select defined items
     *
     * @param newItems new items to be selected
     * @param clearCurrentSelection if true clear previous selected items
     * ```typescript
     * this.combo.select(["New York", "New Jersey"]);
     * ```
     */
    select(newItems, clearCurrentSelection, event) {
        if (newItems) {
            const newSelection = this.selectionService.add_items(this.id, newItems, clearCurrentSelection);
            this.setSelection(newSelection, event);
        }
    }
    /**
     * Deselect defined items
     *
     * @param items items to deselected
     * ```typescript
     * this.combo.deselect(["New York", "New Jersey"]);
     * ```
     */
    deselect(items, event) {
        if (items) {
            const newSelection = this.selectionService.delete_items(this.id, items);
            this.setSelection(newSelection, event);
        }
    }
    /**
     * Select all (filtered) items
     *
     * @param ignoreFilter if set to true, selects all items, otherwise selects only the filtered ones.
     * ```typescript
     * this.combo.selectAllItems();
     * ```
     */
    selectAllItems(ignoreFilter, event) {
        const allVisible = this.selectionService.get_all_ids(ignoreFilter ? this.data : this.filteredData, this.valueKey);
        const newSelection = this.selectionService.add_items(this.id, allVisible);
        this.setSelection(newSelection, event);
    }
    /**
     * Deselect all (filtered) items
     *
     * @param ignoreFilter if set to true, deselects all items, otherwise deselects only the filtered ones.
     * ```typescript
     * this.combo.deselectAllItems();
     * ```
     */
    deselectAllItems(ignoreFilter, event) {
        let newSelection = this.selectionService.get_empty();
        if (this.filteredData.length !== this.data.length && !ignoreFilter) {
            newSelection = this.selectionService.delete_items(this.id, this.selectionService.get_all_ids(this.filteredData, this.valueKey));
        }
        this.setSelection(newSelection, event);
    }
    /**
     * Selects/Deselects a single item
     *
     * @param itemID the itemID of the specific item
     * @param select If the item should be selected (true) or deselected (false)
     *
     * Without specified valueKey;
     * ```typescript
     * this.combo.valueKey = null;
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem(items[0], true);
     * ```
     * With specified valueKey;
     * ```typescript
     * this.combo.valueKey = 'field';
     * const items: { field: string, region: string}[] = data;
     * this.combo.setSelectedItem('Connecticut', true);
     * ```
     */
    setSelectedItem(itemID, select = true, event) {
        if (itemID === undefined) {
            return;
        }
        if (select) {
            this.select([itemID], false, event);
        }
        else {
            this.deselect([itemID], event);
        }
    }
    /** @hidden @internal */
    handleOpened() {
        this.triggerCheck();
        // Disabling focus of the search input should happen only when drop down opens.
        // During keyboard navigation input should receive focus, even the autoFocusSearch is disabled.
        // That is why in such cases focusing of the dropdownContainer happens outside focusSearchInput method.
        if (this.autoFocusSearch) {
            this.focusSearchInput(true);
        }
        else {
            this.dropdownContainer.nativeElement.focus();
        }
        this.opened.emit({ owner: this });
    }
    /** @hidden @internal */
    focusSearchInput(opening) {
        if (this.displaySearchInput && this.searchInput) {
            this.searchInput.nativeElement.focus();
        }
        else {
            if (opening) {
                this.dropdownContainer.nativeElement.focus();
            }
            else {
                this.comboInput.nativeElement.focus();
                this.toggle();
            }
        }
    }
    setSelection(newSelection, event) {
        const removed = diffInSets(this.selectionService.get(this.id), newSelection);
        const added = diffInSets(newSelection, this.selectionService.get(this.id));
        const newSelectionAsArray = Array.from(newSelection);
        const oldSelectionAsArray = Array.from(this.selectionService.get(this.id) || []);
        const displayText = this.createDisplayText(newSelectionAsArray, oldSelectionAsArray);
        const args = {
            newSelection: newSelectionAsArray,
            oldSelection: oldSelectionAsArray,
            added,
            removed,
            event,
            owner: this,
            displayText,
            cancel: false
        };
        this.selectionChanging.emit(args);
        if (!args.cancel) {
            this.selectionService.select_items(this.id, args.newSelection, true);
            if (displayText !== args.displayText) {
                this._value = args.displayText;
            }
            else {
                this._value = this.createDisplayText(args.newSelection, args.oldSelection);
            }
            this._onChangeCallback(args.newSelection);
        }
        else if (this.isRemote) {
            this.registerRemoteEntries(args.added, false);
        }
    }
    createDisplayText(newSelection, oldSelection) {
        return this.isRemote
            ? this.getRemoteSelection(newSelection, oldSelection)
            : this.concatDisplayText(newSelection);
    }
    /** Returns a string that should be populated in the combo's text box */
    concatDisplayText(selection) {
        const value = this.displayKey !== null && this.displayKey !== undefined ?
            this.convertKeysToItems(selection).map(entry => entry[this.displayKey]).join(', ') :
            selection.join(', ');
        return value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxComboComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.IgxSelectionAPIService }, { token: i2.IgxComboAPIService }, { token: i3.IgxIconService }, { token: DisplayDensityToken, optional: true }, { token: IGX_INPUT_GROUP_TYPE, optional: true }, { token: i0.Injector, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxComboComponent, isStandalone: true, selector: "igx-combo", inputs: { autoFocusSearch: "autoFocusSearch", filterable: "filterable", searchPlaceholder: "searchPlaceholder" }, outputs: { selectionChanging: "selectionChanging" }, host: { listeners: { "keydown.ArrowDown": "onArrowDown($event)", "keydown.Alt.ArrowDown": "onArrowDown($event)" } }, providers: [
            IgxComboAPIService,
            { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },
            { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }
        ], viewQueries: [{ propertyName: "dropdown", first: true, predicate: IgxComboDropDownComponent, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<igx-input-group #inputGroup [displayDensity]=\"displayDensity\" [type]=\"type\" (click)=\"onClick($event)\">\r\n    <ng-container ngProjectAs=\"[igxLabel]\">\r\n        <ng-content select=\"[igxLabel]\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-prefix\">\r\n        <ng-content select=\"igx-prefix\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\">\r\n        <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\r\n    </ng-container>\r\n    <input igxInput #comboInput name=\"comboInput\" type=\"text\" [value]=\"value\" readonly\r\n            [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\"\r\n            role=\"combobox\" aria-haspopup=\"listbox\"\r\n            [attr.aria-expanded]=\"!this.dropdown.collapsed\" [attr.aria-controls]=\"this.dropdown.listId\"\r\n            [attr.aria-labelledby]=\"this.ariaLabelledBy || this.label?.id || this.placeholder\"\r\n            (blur)=\"onBlur()\" />\r\n    <ng-container ngProjectAs=\"igx-suffix\">\r\n        <ng-content select=\"igx-suffix\"></ng-content>\r\n    </ng-container>\r\n    <igx-suffix *ngIf=\"value.length\" aria-label=\"Clear Selection\" class=\"igx-combo__clear-button\"\r\n        (click)=\"handleClearItems($event)\">\r\n        <ng-container *ngIf=\"clearIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"clearIconTemplate\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!clearIconTemplate\">\r\n            {{ clearIcon }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n    <igx-suffix class=\"igx-combo__toggle-button\">\r\n        <ng-container *ngIf=\"toggleIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!toggleIconTemplate\">\r\n            {{ toggleIcon }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n</igx-input-group>\r\n<igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [displayDensity]=\"displayDensity\"\r\n    [labelledBy]=\"this.ariaLabelledBy || this.label?.id || this.placeholder || ''\"\r\n    [width]=\"itemsWidth || '100%'\" (opening)=\"handleOpening($event)\" (closing)=\"handleClosing($event)\"\r\n    (opened)=\"handleOpened()\" (closed)=\"handleClosed()\">\r\n    <div class=\"igx-combo__search\">\r\n        <igx-input-group *ngIf=\"displaySearchInput\" [displayDensity]=\"displayDensity\" theme=\"material\" >\r\n            <input igxInput #searchInput name=\"searchInput\" autocomplete=\"off\" type=\"text\"\r\n                   [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\" (keyup)=\"handleKeyUp($event)\"\r\n                   (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [attr.placeholder]=\"searchPlaceholder\"\r\n                   aria-autocomplete=\"list\" role=\"searchbox\" aria-label=\"search\"/>\r\n            <igx-suffix *ngIf=\"showSearchCaseIcon\" (click)=\"toggleCaseSensitive()\">\r\n                <span [ngClass]=\"filteringOptions.caseSensitive? 'igx-combo__case-icon--active' : 'igx-combo__case-icon'\">\r\n                    <igx-icon family=\"imx-icons\" name=\"case-sensitive\" [active]=\"filteringOptions.caseSensitive\"></igx-icon>\r\n                </span>\r\n            </igx-suffix>\r\n        </igx-input-group>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"headerTemplate\">\r\n    </ng-container>\r\n    <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\"\r\n        [style.maxHeight.rem]=\"itemsMaxHeightInRem\" [igxDropDownItemNavigation]=\"dropdown\" (focus)=\"dropdown.onFocus()\"\r\n        [tabindex]=\"dropdown.collapsed ? -1 : 0\" [attr.id]=\"dropdown.id\" aria-multiselectable=\"true\"\r\n        [attr.aria-activedescendant]=\"this.activeDescendant\">\r\n        <igx-combo-item [itemHeight]='itemHeight' *igxFor=\"let item of data\r\n            | comboFiltering:filterValue:displayKey:filteringOptions:filterFunction\r\n            | comboGrouping:groupKey:valueKey:groupSortingDirection;\r\n            index as rowIndex; containerSize: itemsMaxHeight; scrollOrientation: 'vertical'; itemSize: itemHeight\"\r\n            [value]=\"item\" [isHeader]=\"item?.isHeader\" [index]=\"rowIndex\" [role]=\"item?.isHeader? 'group' : 'option'\">\r\n            <ng-container *ngIf=\"item?.isHeader\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase;\r\n                    context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\">\r\n                </ng-container>\r\n            </ng-container>\r\n            <!-- if item is 'null' it should be displayed and !!(item?.isHeader) would resolve it to 'false' and not display it -->\r\n            <ng-container *ngIf=\"!item?.isHeader\">\r\n                <ng-container #listItem\r\n                    *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </igx-combo-item>\r\n    </div>\r\n    <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\r\n        <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\r\n            <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty\">\r\n            </ng-container>\r\n        </div>\r\n        <igx-combo-add-item [itemHeight]=\"itemHeight\" *ngIf=\"isAddButtonVisible()\"\r\n            [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\" role=\"button\"\r\n            aria-label=\"Add Item\" [index]=\"virtualScrollContainer.igxForOf.length\">\r\n            <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault\">\r\n            </ng-container>\r\n        </igx-combo-add-item>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"footerTemplate\">\r\n    </ng-container>\r\n</igx-combo-drop-down>\r\n<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\r\n    {{display[key]}}\r\n</ng-template>\r\n<ng-template #primitive let-display>\r\n    {{display}}\r\n</ng-template>\r\n<ng-template #empty>\r\n    <span>{{resourceStrings.igx_combo_empty_message}}</span>\r\n</ng-template>\r\n<ng-template #addItemDefault let-control>\r\n    <button igxButton=\"flat\" igxRipple>Add item</button>\r\n</ng-template>\r\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\r\n    {{ item[key] }}\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "component", type: IgxComboDropDownComponent, selector: "igx-combo-drop-down", inputs: ["singleMode"] }, { kind: "directive", type: IgxDropDownItemNavigationDirective, selector: "[igxDropDownItemNavigation]", inputs: ["igxDropDownItemNavigation"] }, { kind: "directive", type: IgxForOfDirective, selector: "[igxFor][igxForOf]", inputs: ["igxForOf", "igxForSizePropName", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForItemSize", "igxForTotalItemCount", "igxForTrackBy"], outputs: ["chunkLoad", "scrollbarVisibilityChanged", "contentSizeChange", "dataChanged", "beforeViewDestroyed", "chunkPreload"] }, { kind: "component", type: IgxComboItemComponent, selector: "igx-combo-item", inputs: ["itemHeight", "ariaLabel", "singleMode"] }, { kind: "component", type: IgxComboAddItemComponent, selector: "igx-combo-add-item" }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "pipe", type: IgxComboFilteringPipe, name: "comboFiltering" }, { kind: "pipe", type: IgxComboGroupingPipe, name: "comboGrouping" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxComboComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-combo', providers: [
                        IgxComboAPIService,
                        { provide: IGX_COMBO_COMPONENT, useExisting: IgxComboComponent },
                        { provide: NG_VALUE_ACCESSOR, useExisting: IgxComboComponent, multi: true }
                    ], standalone: true, imports: [
                        NgIf,
                        NgTemplateOutlet,
                        NgClass,
                        FormsModule,
                        IgxInputGroupComponent,
                        IgxInputDirective,
                        IgxSuffixDirective,
                        IgxIconComponent,
                        IgxComboDropDownComponent,
                        IgxDropDownItemNavigationDirective,
                        IgxForOfDirective,
                        IgxComboItemComponent,
                        IgxComboAddItemComponent,
                        IgxButtonDirective,
                        IgxRippleDirective,
                        IgxComboFilteringPipe,
                        IgxComboGroupingPipe
                    ], template: "<igx-input-group #inputGroup [displayDensity]=\"displayDensity\" [type]=\"type\" (click)=\"onClick($event)\">\r\n    <ng-container ngProjectAs=\"[igxLabel]\">\r\n        <ng-content select=\"[igxLabel]\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-prefix\">\r\n        <ng-content select=\"igx-prefix\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\">\r\n        <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\r\n    </ng-container>\r\n    <input igxInput #comboInput name=\"comboInput\" type=\"text\" [value]=\"value\" readonly\r\n            [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\"\r\n            role=\"combobox\" aria-haspopup=\"listbox\"\r\n            [attr.aria-expanded]=\"!this.dropdown.collapsed\" [attr.aria-controls]=\"this.dropdown.listId\"\r\n            [attr.aria-labelledby]=\"this.ariaLabelledBy || this.label?.id || this.placeholder\"\r\n            (blur)=\"onBlur()\" />\r\n    <ng-container ngProjectAs=\"igx-suffix\">\r\n        <ng-content select=\"igx-suffix\"></ng-content>\r\n    </ng-container>\r\n    <igx-suffix *ngIf=\"value.length\" aria-label=\"Clear Selection\" class=\"igx-combo__clear-button\"\r\n        (click)=\"handleClearItems($event)\">\r\n        <ng-container *ngIf=\"clearIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"clearIconTemplate\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!clearIconTemplate\">\r\n            {{ clearIcon }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n    <igx-suffix class=\"igx-combo__toggle-button\">\r\n        <ng-container *ngIf=\"toggleIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!toggleIconTemplate\">\r\n            {{ toggleIcon }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n</igx-input-group>\r\n<igx-combo-drop-down #igxComboDropDown class=\"igx-combo__drop-down\" [displayDensity]=\"displayDensity\"\r\n    [labelledBy]=\"this.ariaLabelledBy || this.label?.id || this.placeholder || ''\"\r\n    [width]=\"itemsWidth || '100%'\" (opening)=\"handleOpening($event)\" (closing)=\"handleClosing($event)\"\r\n    (opened)=\"handleOpened()\" (closed)=\"handleClosed()\">\r\n    <div class=\"igx-combo__search\">\r\n        <igx-input-group *ngIf=\"displaySearchInput\" [displayDensity]=\"displayDensity\" theme=\"material\" >\r\n            <input igxInput #searchInput name=\"searchInput\" autocomplete=\"off\" type=\"text\"\r\n                   [(ngModel)]=\"searchValue\" (ngModelChange)=\"handleInputChange($event)\" (keyup)=\"handleKeyUp($event)\"\r\n                   (keydown)=\"handleKeyDown($event)\" (focus)=\"dropdown.onBlur($event)\" [attr.placeholder]=\"searchPlaceholder\"\r\n                   aria-autocomplete=\"list\" role=\"searchbox\" aria-label=\"search\"/>\r\n            <igx-suffix *ngIf=\"showSearchCaseIcon\" (click)=\"toggleCaseSensitive()\">\r\n                <span [ngClass]=\"filteringOptions.caseSensitive? 'igx-combo__case-icon--active' : 'igx-combo__case-icon'\">\r\n                    <igx-icon family=\"imx-icons\" name=\"case-sensitive\" [active]=\"filteringOptions.caseSensitive\"></igx-icon>\r\n                </span>\r\n            </igx-suffix>\r\n        </igx-input-group>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"headerTemplate\">\r\n    </ng-container>\r\n    <div #dropdownItemContainer class=\"igx-combo__content\" [style.overflow]=\"'hidden'\"\r\n        [style.maxHeight.rem]=\"itemsMaxHeightInRem\" [igxDropDownItemNavigation]=\"dropdown\" (focus)=\"dropdown.onFocus()\"\r\n        [tabindex]=\"dropdown.collapsed ? -1 : 0\" [attr.id]=\"dropdown.id\" aria-multiselectable=\"true\"\r\n        [attr.aria-activedescendant]=\"this.activeDescendant\">\r\n        <igx-combo-item [itemHeight]='itemHeight' *igxFor=\"let item of data\r\n            | comboFiltering:filterValue:displayKey:filteringOptions:filterFunction\r\n            | comboGrouping:groupKey:valueKey:groupSortingDirection;\r\n            index as rowIndex; containerSize: itemsMaxHeight; scrollOrientation: 'vertical'; itemSize: itemHeight\"\r\n            [value]=\"item\" [isHeader]=\"item?.isHeader\" [index]=\"rowIndex\" [role]=\"item?.isHeader? 'group' : 'option'\">\r\n            <ng-container *ngIf=\"item?.isHeader\">\r\n                <ng-container\r\n                    *ngTemplateOutlet=\"headerItemTemplate ? headerItemTemplate : headerItemBase;\r\n                    context: {$implicit: item, data: data, valueKey: valueKey, groupKey: groupKey, displayKey: displayKey}\">\r\n                </ng-container>\r\n            </ng-container>\r\n            <!-- if item is 'null' it should be displayed and !!(item?.isHeader) would resolve it to 'false' and not display it -->\r\n            <ng-container *ngIf=\"!item?.isHeader\">\r\n                <ng-container #listItem\r\n                    *ngTemplateOutlet=\"template; context: {$implicit: item, data: data, valueKey: valueKey, displayKey: displayKey};\">\r\n                </ng-container>\r\n            </ng-container>\r\n        </igx-combo-item>\r\n    </div>\r\n    <div class=\"igx-combo__add\" *ngIf=\"filteredData.length === 0 || isAddButtonVisible()\">\r\n        <div class=\"igx-combo__empty\" *ngIf=\"filteredData.length === 0\">\r\n            <ng-container *ngTemplateOutlet=\"emptyTemplate ? emptyTemplate : empty\">\r\n            </ng-container>\r\n        </div>\r\n        <igx-combo-add-item [itemHeight]=\"itemHeight\" *ngIf=\"isAddButtonVisible()\"\r\n            [tabindex]=\"dropdown.collapsed ? -1 : customValueFlag ? 1 : -1\" class=\"igx-combo__add-item\" role=\"button\"\r\n            aria-label=\"Add Item\" [index]=\"virtualScrollContainer.igxForOf.length\">\r\n            <ng-container *ngTemplateOutlet=\"addItemTemplate ? addItemTemplate : addItemDefault\">\r\n            </ng-container>\r\n        </igx-combo-add-item>\r\n    </div>\r\n    <ng-container *ngTemplateOutlet=\"footerTemplate\">\r\n    </ng-container>\r\n</igx-combo-drop-down>\r\n<ng-template #complex let-display let-data=\"data\" let-key=\"displayKey\">\r\n    {{display[key]}}\r\n</ng-template>\r\n<ng-template #primitive let-display>\r\n    {{display}}\r\n</ng-template>\r\n<ng-template #empty>\r\n    <span>{{resourceStrings.igx_combo_empty_message}}</span>\r\n</ng-template>\r\n<ng-template #addItemDefault let-control>\r\n    <button igxButton=\"flat\" igxRipple>Add item</button>\r\n</ng-template>\r\n<ng-template #headerItemBase let-item let-key=\"valueKey\" let-groupKey=\"groupKey\">\r\n    {{ item[key] }}\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.IgxSelectionAPIService }, { type: i2.IgxComboAPIService }, { type: i3.IgxIconService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_INPUT_GROUP_TYPE]
                }] }, { type: i0.Injector, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { autoFocusSearch: [{
                type: Input
            }], filterable: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], selectionChanging: [{
                type: Output
            }], dropdown: [{
                type: ViewChild,
                args: [IgxComboDropDownComponent, { static: true }]
            }], onArrowDown: [{
                type: HostListener,
                args: ['keydown.ArrowDown', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.Alt.ArrowDown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,