import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, HostBinding, Inject, LOCALE_ID } from '@angular/core';
import { CalendarSelection, isDateInRanges } from '../../calendar/calendar';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBaseDirective } from '../calendar-base';
import { isEqual } from '../../core/utils';
import { IgxDaysViewNavigationService } from '../days-view/daysview-navigation.service';
import { NgIf, NgFor, TitleCasePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../days-view/daysview-navigation.service";
import * as i2 from "../../core/utils";
let NEXT_ID = 0;
export class IgxDaysViewComponent extends IgxCalendarBaseDirective {
    /**
     * @hidden
     * @internal
     */
    set activeDate(value) {
        this._activeDate = value;
        this.activeDateChange.emit(this._activeDate);
    }
    get activeDate() {
        return this._activeDate ? this._activeDate : this.viewDate.toLocaleDateString();
    }
    /**
     * @hidden
     */
    constructor(daysNavService, platform, _localeId) {
        super(platform, _localeId);
        this.daysNavService = daysNavService;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId =  this.daysView.id;
         * ```
         */
        this.id = `igx-days-view-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this.changeDaysView = false;
        /**
         * @hidden
         */
        this.dateSelection = new EventEmitter();
        /**
         * @hidden
         */
        this.viewChanging = new EventEmitter();
        /**
         * @hidden
         */
        this.activeDateChange = new EventEmitter();
        /**
         * @hidden
         */
        this.monthsViewBlur = new EventEmitter();
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
        /** @hidden */
        this.shouldResetDate = true;
    }
    /**
     * @hidden
     * @internal
     */
    resetActiveMonth() {
        if (this.shouldResetDate) {
            const date = this.dates.find(day => day.selected && day.isCurrentMonth) ||
                this.dates.find(day => day.isToday && day.isCurrentMonth) ||
                this.dates.find(d => d.isFocusable);
            if (date) {
                this.activeDate = date.date.date.toLocaleDateString();
            }
            this.monthsViewBlur.emit();
        }
        this.shouldResetDate = true;
    }
    /**
     * @hidden
     * @internal
     */
    pointerDown() {
        this.shouldResetDate = false;
    }
    /**
     * @hidden
     */
    onKeydownArrow(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.daysNavService.focusNextDate(event.target, event.key);
    }
    /**
     * @hidden
     */
    onKeydownHome(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.getFirstMonthView().daysNavService.focusHomeDate();
    }
    /**
     * @hidden
     */
    onKeydownEnd(event) {
        event.preventDefault();
        event.stopPropagation();
        this.shouldResetDate = false;
        this.getLastMonthView().daysNavService.focusEndDate();
    }
    /**
     * @hidden
     */
    get getCalendarMonth() {
        return this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth(), true);
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.daysNavService.monthView = this;
    }
    /**
     * @hidden
     */
    ngDoCheck() {
        if (!this.changeDaysView && this.dates) {
            this.disableOutOfRangeDates();
        }
    }
    /**
     * @hidden
     * @internal
     */
    tabIndex(day) {
        return this.activeDate && this.activeDate === day.date.toLocaleDateString() && day.isCurrentMonth ? 0 : -1;
    }
    /**
     * Returns the week number by date
     *
     * @hidden
     */
    getWeekNumber(date) {
        return this.calendarModel.getWeekNumber(date);
    }
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    formattedDate(value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return `${value.getDate()}`;
    }
    /**
     * @hidden
     */
    generateWeekHeader() {
        const dayNames = [];
        const rv = this.calendarModel.monthdatescalendar(this.viewDate.getFullYear(), this.viewDate.getMonth())[0];
        for (const day of rv) {
            dayNames.push(this.formatterWeekday.format(day.date));
        }
        return dayNames;
    }
    /**
     * @hidden
     */
    rowTracker(index, item) {
        return `${item[index].date.getMonth()}${item[index].date.getDate()}`;
    }
    /**
     * @hidden
     */
    dateTracker(index, item) {
        return `${item.date.getMonth()}--${item.date.getDate()}`;
    }
    /**
     * @hidden
     */
    isCurrentMonth(value) {
        return this.viewDate.getMonth() === value.getMonth();
    }
    /**
     * @hidden
     */
    isCurrentYear(value) {
        return this.viewDate.getFullYear() === value.getFullYear();
    }
    /**
     * @hidden
     */
    isSelected(date) {
        let selectedDates;
        if (this.isDateDisabled(date.date) || !this.value ||
            (Array.isArray(this.value) && this.value.length === 0)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            selectedDates = this.value;
            return this.getDateOnly(selectedDates).getTime() === date.date.getTime();
        }
        selectedDates = this.value;
        if (this.selection === CalendarSelection.RANGE && selectedDates.length === 1) {
            return this.getDateOnly(selectedDates[0]).getTime() === date.date.getTime();
        }
        if (this.selection === CalendarSelection.MULTI) {
            const start = this.getDateOnly(selectedDates[0]);
            const end = this.getDateOnly(selectedDates[selectedDates.length - 1]);
            if (this.isWithinRange(date.date, false, start, end)) {
                const currentDate = selectedDates.find(element => element.getTime() === date.date.getTime());
                return !!currentDate;
            }
            else {
                return false;
            }
        }
        else {
            return this.isWithinRange(date.date, true);
        }
    }
    /**
     * @hidden
     */
    isLastInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        const dates = this.value;
        const lastDate = dates[dates.length - 1];
        return isEqual(lastDate, date.date);
    }
    /**
     * @hidden
     */
    isFirstInRange(date) {
        if (this.isSingleSelection || !this.value) {
            return false;
        }
        return isEqual(this.value[0], date.date);
    }
    /**
     * @hidden
     */
    isWithinRange(date, checkForRange, min, max) {
        if (checkForRange && !(Array.isArray(this.value) && this.value.length > 1)) {
            return false;
        }
        min = min ? min : this.value[0];
        max = max ? max : this.value[this.value.length - 1];
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    }
    /**
     * @hidden
     */
    focusActiveDate() {
        let date = this.dates.find((d) => d.selected);
        if (!date) {
            date = this.dates.find((d) => d.isToday);
        }
        if (date.isFocusable) {
            date.nativeElement.focus();
        }
    }
    /**
     * @hidden
     */
    selectDay(event) {
        this.selectDateFromClient(event.date);
        this.dateSelection.emit(event);
        this.selected.emit(this.selectedDates);
    }
    /**
     * @hidden
     */
    getFirstMonthView() {
        let monthView = this;
        while (monthView.prevMonthView) {
            monthView = monthView.prevMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     */
    disableOutOfRangeDates() {
        const dateRange = [];
        this.dates.toArray().forEach((date) => {
            if (!date.isCurrentMonth) {
                dateRange.push(date.date.date);
            }
        });
        this.outOfRangeDates = [{
                type: DateRangeType.Specific,
                dateRange
            }];
    }
    /**
     * @hidden
     */
    getLastMonthView() {
        let monthView = this;
        while (monthView.nextMonthView) {
            monthView = monthView.nextMonthView;
        }
        return monthView;
    }
    /**
     * @hidden
     */
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxDaysViewComponent, deps: [{ token: i1.IgxDaysViewNavigationService }, { token: i2.PlatformUtil }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxDaysViewComponent, isStandalone: true, selector: "igx-days-view", inputs: { id: "id", changeDaysView: "changeDaysView", showWeekNumbers: "showWeekNumbers", activeDate: "activeDate" }, outputs: { dateSelection: "dateSelection", viewChanging: "viewChanging", activeDateChange: "activeDateChange", monthsViewBlur: "monthsViewBlur" }, host: { listeners: { "focusout": "resetActiveMonth()", "keydown.pagedown": "pointerDown()", "keydown.pageup": "pointerDown()", "keydown.shift.pagedown": "pointerDown()", "keydown.shift.pageup": "pointerDown()", "pointerdown": "pointerDown()", "keydown.arrowleft": "onKeydownArrow($event)", "keydown.arrowright": "onKeydownArrow($event)", "keydown.arrowup": "onKeydownArrow($event)", "keydown.arrowdown": "onKeydownArrow($event)", "keydown.home": "onKeydownHome($event)", "keydown.end": "onKeydownEnd($event)" }, properties: { "attr.id": "this.id", "class.igx-calendar": "this.styleClass" } }, providers: [
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxDaysViewComponent
            },
            { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
        ], viewQueries: [{ propertyName: "dates", predicate: IgxDayItemComponent, descendants: true, read: IgxDayItemComponent }], usesInheritance: true, ngImport: i0, template: "<div role=\"row\" class=\"igx-calendar__body-row\">\r\n    <div role=\"columnheader\" *ngIf=\"showWeekNumbers\" class=\"igx-calendar__label igx-calendar__label--week-number\">\r\n        <span>Wk</span>\r\n    </div>\r\n    <span role=\"columnheader\" [attr.aria-label]=\"dayName\" *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\r\n        {{ dayName | titlecase }}\r\n    </span>\r\n</div>\r\n\r\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\r\n     class=\"igx-calendar__body-row\" role=\"row\">\r\n\r\n    <div *ngIf=\"showWeekNumbers\" class=\"igx-calendar__date igx-calendar__date--week-number\">\r\n\r\n        <span role=\"rowheader\" class=\"igx-calendar__date-content igx-calendar__date-content--week-number\">\r\n            {{getWeekNumber(week[0].date)}}\r\n        </span>\r\n\r\n    </div>\r\n\r\n    <!-- <igx-week-number-item *ngIf=\"showWeekNumbers\">{{getWeekNumber(week[0].date)}}</igx-week-number-item> -->\r\n    <igx-day-item\r\n        class=\"igx-calendar__date\"\r\n        *ngFor=\"let day of week; trackBy: dateTracker\"\r\n        [attr.aria-selected]=\"isSelected(day)\"\r\n        role=\"gridcell\"\r\n        [attr.aria-disabled]=\"isDateDisabled(day.date)\"\r\n        [attr.aria-label]=\"isFirstInRange(day) ? day.date.toDateString() + ', ' + resourceStrings.igx_calendar_range_start : isLastInRange(day) ? day.date.toDateString() + ', ' +  resourceStrings.igx_calendar_range_end  : day.date.toDateString()\"\r\n        [date]=\"day\"\r\n        [selection]=\"selection\"\r\n        [selected]=\"isSelected(day)\"\r\n        [isLastInRange]=\"isLastInRange(day)\"\r\n        [isFirstInRange]=\"isFirstInRange(day)\"\r\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\r\n        [disabledDates]=\"disabledDates\"\r\n        [specialDates]=\"specialDates\"\r\n        [outOfRangeDates]=\"outOfRangeDates\"\r\n        [hideOutsideDays]=\"hideOutsideDays\"\r\n        [attr.tabindex]=\"tabIndex(day)\"\r\n        (focus)=\"activeDate = day.date.toLocaleDateString()\"\r\n        (dateSelection)=\"selectDay($event)\">\r\n        {{ formattedDate(day.date) }}\r\n    </igx-day-item>\r\n</div>\r\n\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxDayItemComponent, selector: "igx-day-item", inputs: ["date", "selection", "selected", "disabledDates", "outOfRangeDates", "specialDates", "hideOutsideDays", "isLastInRange", "isFirstInRange", "isWithinRange"], outputs: ["dateSelection"] }, { kind: "pipe", type: TitleCasePipe, name: "titlecase" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxDaysViewComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxDaysViewComponent
                        },
                        { provide: IgxDaysViewNavigationService, useClass: IgxDaysViewNavigationService }
                    ], selector: 'igx-days-view', standalone: true, imports: [NgIf, NgFor, IgxDayItemComponent, TitleCasePipe], template: "<div role=\"row\" class=\"igx-calendar__body-row\">\r\n    <div role=\"columnheader\" *ngIf=\"showWeekNumbers\" class=\"igx-calendar__label igx-calendar__label--week-number\">\r\n        <span>Wk</span>\r\n    </div>\r\n    <span role=\"columnheader\" [attr.aria-label]=\"dayName\" *ngFor=\"let dayName of generateWeekHeader()\" class=\"igx-calendar__label\">\r\n        {{ dayName | titlecase }}\r\n    </span>\r\n</div>\r\n\r\n<div *ngFor=\"let week of getCalendarMonth; last as isLast; index as i; trackBy: rowTracker\"\r\n     class=\"igx-calendar__body-row\" role=\"row\">\r\n\r\n    <div *ngIf=\"showWeekNumbers\" class=\"igx-calendar__date igx-calendar__date--week-number\">\r\n\r\n        <span role=\"rowheader\" class=\"igx-calendar__date-content igx-calendar__date-content--week-number\">\r\n            {{getWeekNumber(week[0].date)}}\r\n        </span>\r\n\r\n    </div>\r\n\r\n    <!-- <igx-week-number-item *ngIf=\"showWeekNumbers\">{{getWeekNumber(week[0].date)}}</igx-week-number-item> -->\r\n    <igx-day-item\r\n        class=\"igx-calendar__date\"\r\n        *ngFor=\"let day of week; trackBy: dateTracker\"\r\n        [attr.aria-selected]=\"isSelected(day)\"\r\n        role=\"gridcell\"\r\n        [attr.aria-disabled]=\"isDateDisabled(day.date)\"\r\n        [attr.aria-label]=\"isFirstInRange(day) ? day.date.toDateString() + ', ' + resourceStrings.igx_calendar_range_start : isLastInRange(day) ? day.date.toDateString() + ', ' +  resourceStrings.igx_calendar_range_end  : day.date.toDateString()\"\r\n        [date]=\"day\"\r\n        [selection]=\"selection\"\r\n        [selected]=\"isSelected(day)\"\r\n        [isLastInRange]=\"isLastInRange(day)\"\r\n        [isFirstInRange]=\"isFirstInRange(day)\"\r\n        [isWithinRange]=\"isWithinRange(day.date, true)\"\r\n        [disabledDates]=\"disabledDates\"\r\n        [specialDates]=\"specialDates\"\r\n        [outOfRangeDates]=\"outOfRangeDates\"\r\n        [hideOutsideDays]=\"hideOutsideDays\"\r\n        [attr.tabindex]=\"tabIndex(day)\"\r\n        (focus)=\"activeDate = day.date.toLocaleDateString()\"\r\n        (dateSelection)=\"selectDay($event)\">\r\n        {{ formattedDate(day.date) }}\r\n    </igx-day-item>\r\n</div>\r\n\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.IgxDaysViewNavigationService }, { type: i2.PlatformUtil }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], changeDaysView: [{
                type: Input
            }], showWeekNumbers: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], dateSelection: [{
                type: Output
            }], viewChanging: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], monthsViewBlur: [{
                type: Output
            }], dates: [{
                type: ViewChildren,
                args: [IgxDayItemComponent, { read: IgxDayItemComponent }]
            }], styleClass: [{
                type: HostBinding,
                args: ['class.igx-calendar']
            }], resetActiveMonth: [{
                type: HostListener,
                args: ['focusout']
            }], pointerDown: [{
                type: HostListener,
                args: ['keydown.pagedown']
            }, {
                type: HostListener,
                args: ['keydown.pageup']
            }, {
                type: HostListener,
                args: ['keydown.shift.pagedown']
            }, {
                type: HostListener,
                args: ['keydown.shift.pageup']
            }, {
                type: HostListener,
                args: ['pointerdown']
            }], onKeydownArrow: [{
                type: HostListener,
                args: ['keydown.arrowleft', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.arrowright', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.arrowup', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.arrowdown', ['$event']]
            }], onKeydownHome: [{
                type: HostListener,
                args: ['keydown.home', ['$event']]
            }], onKeydownEnd: [{
                type: HostListener,
                args: ['keydown.end', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,