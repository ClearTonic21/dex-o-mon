import { animate, animation, keyframes, style } from '@angular/animations';
import { EaseOut } from '../easings';
const baseRecipe = [
    style({
        backfaceVisibility: 'hidden',
        transformStyle: 'preserve-3d'
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            transform: `translateZ({{startDistance}})
                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{startAngle}}deg)`
        }),
        style({
            offset: 1,
            transform: `translateZ({{endDistance}})
                rotate3d({{rotateX}}, {{rotateY}}, {{rotateZ}}, {{endAngle}}deg)`
        })
    ]))
];
const baseParams = {
    delay: '0s',
    duration: '600ms',
    easing: EaseOut.Quad,
    endAngle: 180,
    endDistance: '0px',
    rotateX: 1,
    rotateY: 0,
    rotateZ: 0,
    startAngle: 0,
    startDistance: '0px'
};
const flipTop = animation(baseRecipe, {
    params: {
        ...baseParams
    }
});
const flipBottom = animation(baseRecipe, {
    params: {
        ...baseParams,
        endAngle: -180
    }
});
const flipLeft = animation(baseRecipe, {
    params: {
        ...baseParams,
        rotateX: 0,
        rotateY: 1
    }
});
const flipRight = animation(baseRecipe, {
    params: {
        ...baseParams,
        endAngle: -180,
        rotateX: 0,
        rotateY: 1
    }
});
const flipHorFwd = animation(baseRecipe, {
    params: {
        ...baseParams,
        endDistance: '170px'
    }
});
const flipHorBck = animation(baseRecipe, {
    params: {
        ...baseParams,
        endDistance: '-170px'
    }
});
const flipVerFwd = animation(baseRecipe, {
    params: {
        ...baseParams,
        endDistance: '170px',
        rotateX: 0,
        rotateY: 1
    }
});
const flipVerBck = animation(baseRecipe, {
    params: {
        ...baseParams,
        endDistance: '-170px',
        rotateX: 0,
        rotateY: 1
    }
});
export { flipTop, flipRight, flipBottom, flipLeft, flipHorFwd, flipHorBck, flipVerFwd, flipVerBck };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvYW5pbWF0aW9ucy9mbGlwL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsU0FBUyxFQUdULFNBQVMsRUFDVCxLQUFLLEVBQ1IsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR3JDLE1BQU0sVUFBVSxHQUF3QjtJQUNwQyxLQUFLLENBQUM7UUFDRixrQkFBa0IsRUFBRSxRQUFRO1FBQzVCLGNBQWMsRUFBRSxhQUFhO0tBQ2hDLENBQUM7SUFDRixPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLFNBQVMsQ0FBQztRQUNOLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFO21GQUN3RDtTQUN0RSxDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxTQUFTLEVBQUU7aUZBQ3NEO1NBQ3BFLENBQUM7S0FDTCxDQUFDLENBQ0w7Q0FDSixDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQXFCO0lBQ2pDLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLE9BQU87SUFDakIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxJQUFJO0lBQ3BCLFFBQVEsRUFBRSxHQUFHO0lBQ2IsV0FBVyxFQUFFLEtBQUs7SUFDbEIsT0FBTyxFQUFFLENBQUM7SUFDVixPQUFPLEVBQUUsQ0FBQztJQUNWLE9BQU8sRUFBRSxDQUFDO0lBQ1YsVUFBVSxFQUFFLENBQUM7SUFDYixhQUFhLEVBQUUsS0FBSztDQUN2QixDQUFDO0FBRUYsTUFBTSxPQUFPLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDOUQsTUFBTSxFQUFFO1FBQ0osR0FBRyxVQUFVO0tBQ2hCO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSxFQUFFO1FBQ0osR0FBRyxVQUFVO1FBQ2IsUUFBUSxFQUFFLENBQUMsR0FBRztLQUNqQjtDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sUUFBUSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQy9ELE1BQU0sRUFBRTtRQUNKLEdBQUcsVUFBVTtRQUNiLE9BQU8sRUFBRSxDQUFDO1FBQ1YsT0FBTyxFQUFFLENBQUM7S0FDYjtDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2hFLE1BQU0sRUFBRTtRQUNKLEdBQUcsVUFBVTtRQUNiLFFBQVEsRUFBRSxDQUFDLEdBQUc7UUFDZCxPQUFPLEVBQUUsQ0FBQztRQUNWLE9BQU8sRUFBRSxDQUFDO0tBQ2I7Q0FDSixDQUFDLENBQUM7QUFFSCxNQUFNLFVBQVUsR0FBK0IsU0FBUyxDQUFDLFVBQVUsRUFBRTtJQUNqRSxNQUFNLEVBQUU7UUFDSixHQUFHLFVBQVU7UUFDYixXQUFXLEVBQUUsT0FBTztLQUN2QjtDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sVUFBVSxHQUErQixTQUFTLENBQUMsVUFBVSxFQUFFO0lBQ2pFLE1BQU0sRUFBRTtRQUNKLEdBQUcsVUFBVTtRQUNiLFdBQVcsRUFBRSxRQUFRO0tBQ3hCO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSxFQUFFO1FBQ0osR0FBRyxVQUFVO1FBQ2IsV0FBVyxFQUFFLE9BQU87UUFDcEIsT0FBTyxFQUFFLENBQUM7UUFDVixPQUFPLEVBQUUsQ0FBQztLQUNiO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQStCLFNBQVMsQ0FBQyxVQUFVLEVBQUU7SUFDakUsTUFBTSxFQUFFO1FBQ0osR0FBRyxVQUFVO1FBQ2IsV0FBVyxFQUFFLFFBQVE7UUFDckIsT0FBTyxFQUFFLENBQUM7UUFDVixPQUFPLEVBQUUsQ0FBQztLQUNiO0NBQ0osQ0FBQyxDQUFDO0FBRUgsT0FBTyxFQUNILE9BQU8sRUFDUCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFFBQVEsRUFDUixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBhbmltYXRlLFxyXG4gICAgYW5pbWF0aW9uLFxyXG4gICAgQW5pbWF0aW9uTWV0YWRhdGEsXHJcbiAgICBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSxcclxuICAgIGtleWZyYW1lcyxcclxuICAgIHN0eWxlXHJcbn0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XHJcbmltcG9ydCB7IEVhc2VPdXQgfSBmcm9tICcuLi9lYXNpbmdzJztcclxuaW1wb3J0IHsgSUFuaW1hdGlvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZSc7XHJcblxyXG5jb25zdCBiYXNlUmVjaXBlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xyXG4gICAgc3R5bGUoe1xyXG4gICAgICAgIGJhY2tmYWNlVmlzaWJpbGl0eTogJ2hpZGRlbicsXHJcbiAgICAgICAgdHJhbnNmb3JtU3R5bGU6ICdwcmVzZXJ2ZS0zZCdcclxuICAgIH0pLFxyXG4gICAgYW5pbWF0ZShcclxuICAgICAgICBge3tkdXJhdGlvbn19IHt7ZGVsYXl9fSB7e2Vhc2luZ319YCxcclxuICAgICAgICBrZXlmcmFtZXMoW1xyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGVaKHt7c3RhcnREaXN0YW5jZX19KVxyXG4gICAgICAgICAgICAgICAgcm90YXRlM2Qoe3tyb3RhdGVYfX0sIHt7cm90YXRlWX19LCB7e3JvdGF0ZVp9fSwge3tzdGFydEFuZ2xlfX1kZWcpYFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWih7e2VuZERpc3RhbmNlfX0pXHJcbiAgICAgICAgICAgICAgICByb3RhdGUzZCh7e3JvdGF0ZVh9fSwge3tyb3RhdGVZfX0sIHt7cm90YXRlWn19LCB7e2VuZEFuZ2xlfX1kZWcpYFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pXHJcbiAgICApXHJcbl07XHJcblxyXG5jb25zdCBiYXNlUGFyYW1zOiBJQW5pbWF0aW9uUGFyYW1zID0ge1xyXG4gICAgZGVsYXk6ICcwcycsXHJcbiAgICBkdXJhdGlvbjogJzYwMG1zJyxcclxuICAgIGVhc2luZzogRWFzZU91dC5RdWFkLFxyXG4gICAgZW5kQW5nbGU6IDE4MCxcclxuICAgIGVuZERpc3RhbmNlOiAnMHB4JyxcclxuICAgIHJvdGF0ZVg6IDEsXHJcbiAgICByb3RhdGVZOiAwLFxyXG4gICAgcm90YXRlWjogMCxcclxuICAgIHN0YXJ0QW5nbGU6IDAsXHJcbiAgICBzdGFydERpc3RhbmNlOiAnMHB4J1xyXG59O1xyXG5cclxuY29uc3QgZmxpcFRvcDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgLi4uYmFzZVBhcmFtc1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGZsaXBCb3R0b206IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXHJcbiAgICAgICAgZW5kQW5nbGU6IC0xODBcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBmbGlwTGVmdDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcclxuICAgICAgICByb3RhdGVYOiAwLFxyXG4gICAgICAgIHJvdGF0ZVk6IDFcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBmbGlwUmlnaHQ6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXHJcbiAgICAgICAgZW5kQW5nbGU6IC0xODAsXHJcbiAgICAgICAgcm90YXRlWDogMCxcclxuICAgICAgICByb3RhdGVZOiAxXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgZmxpcEhvckZ3ZDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcclxuICAgICAgICBlbmREaXN0YW5jZTogJzE3MHB4J1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGZsaXBIb3JCY2s6IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhID0gYW5pbWF0aW9uKGJhc2VSZWNpcGUsIHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIC4uLmJhc2VQYXJhbXMsXHJcbiAgICAgICAgZW5kRGlzdGFuY2U6ICctMTcwcHgnXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgZmxpcFZlckZ3ZDogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgPSBhbmltYXRpb24oYmFzZVJlY2lwZSwge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgLi4uYmFzZVBhcmFtcyxcclxuICAgICAgICBlbmREaXN0YW5jZTogJzE3MHB4JyxcclxuICAgICAgICByb3RhdGVYOiAwLFxyXG4gICAgICAgIHJvdGF0ZVk6IDFcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBmbGlwVmVyQmNrOiBBbmltYXRpb25SZWZlcmVuY2VNZXRhZGF0YSA9IGFuaW1hdGlvbihiYXNlUmVjaXBlLCB7XHJcbiAgICBwYXJhbXM6IHtcclxuICAgICAgICAuLi5iYXNlUGFyYW1zLFxyXG4gICAgICAgIGVuZERpc3RhbmNlOiAnLTE3MHB4JyxcclxuICAgICAgICByb3RhdGVYOiAwLFxyXG4gICAgICAgIHJvdGF0ZVk6IDFcclxuICAgIH1cclxufSk7XHJcblxyXG5leHBvcnQge1xyXG4gICAgZmxpcFRvcCxcclxuICAgIGZsaXBSaWdodCxcclxuICAgIGZsaXBCb3R0b20sXHJcbiAgICBmbGlwTGVmdCxcclxuICAgIGZsaXBIb3JGd2QsXHJcbiAgICBmbGlwSG9yQmNrLFxyXG4gICAgZmxpcFZlckZ3ZCxcclxuICAgIGZsaXBWZXJCY2tcclxufTtcclxuIl19