import { animate, animation, style } from '@angular/animations';
import { EaseIn, EaseOut } from '../easings';
const swingBase = [
    style({
        opacity: `{{startOpacity}}`,
        transform: `rotate{{direction}}({{startAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, style({
        opacity: `{{endOpacity}}`,
        transform: `rotate{{direction}}({{endAngle}}deg)`,
        transformOrigin: `{{xPos}} {{yPos}}`
    }))
];
const swingParams = {
    delay: '0s',
    direction: 'X',
    duration: '.5s',
    easing: EaseOut.Back,
    endAngle: 0,
    endOpacity: 1,
    startAngle: -100,
    startOpacity: 0,
    xPos: 'top',
    yPos: 'center'
};
const swingOutParams = {
    ...swingParams,
    duration: '.55s',
    easing: EaseIn.Back,
    endAngle: 70,
    endOpacity: 0,
    startAngle: 0,
    startOpacity: 1
};
const swingInTopFwd = animation(swingBase, {
    params: {
        ...swingParams
    }
});
const swingInRightFwd = animation(swingBase, {
    params: {
        ...swingParams,
        direction: 'Y',
        xPos: 'center',
        yPos: 'right'
    }
});
const swingInBottomFwd = animation(swingBase, {
    params: {
        ...swingParams,
        startAngle: 100,
        xPos: 'bottom'
    }
});
const swingInLeftFwd = animation(swingBase, {
    params: {
        ...swingParams,
        direction: 'Y',
        startAngle: 100,
        xPos: 'center',
        yPos: 'left'
    }
});
const swingInTopBck = animation(swingBase, {
    params: {
        ...swingParams,
        duration: '.6s',
        startAngle: 70
    }
});
const swingInRightBck = animation(swingBase, {
    params: {
        ...swingParams,
        direction: 'Y',
        duration: '.6s',
        startAngle: 70,
        xPos: 'center',
        yPos: 'right'
    }
});
const swingInBottomBck = animation(swingBase, {
    params: {
        ...swingParams,
        duration: '.6s',
        startAngle: -70,
        xPos: 'bottom'
    }
});
const swingInLeftBck = animation(swingBase, {
    params: {
        ...swingParams,
        direction: 'Y',
        duration: '.6s',
        startAngle: -70,
        xPos: 'center',
        yPos: 'left'
    }
});
const swingOutTopFwd = animation(swingBase, {
    params: {
        ...swingOutParams
    }
});
const swingOutRightFwd = animation(swingBase, {
    params: {
        ...swingOutParams,
        direction: 'Y',
        xPos: 'center',
        yPos: 'right'
    }
});
const swingOutBottomFwd = animation(swingBase, {
    params: {
        ...swingOutParams,
        endAngle: -70,
        xPos: 'bottom'
    }
});
const swingOutLefttFwd = animation(swingBase, {
    params: {
        ...swingOutParams,
        direction: 'Y',
        endAngle: -70,
        xPos: 'center',
        yPos: 'left'
    }
});
const swingOutTopBck = animation(swingBase, {
    params: {
        ...swingOutParams,
        duration: '.45s',
        endAngle: -100
    }
});
const swingOutRightBck = animation(swingBase, {
    params: {
        ...swingOutParams,
        direction: 'Y',
        duration: '.45s',
        endAngle: -100,
        xPos: 'center',
        yPos: 'right'
    }
});
const swingOutBottomBck = animation(swingBase, {
    params: {
        ...swingOutParams,
        duration: '.45s',
        endAngle: 100,
        xPos: 'bottom'
    }
});
const swingOutLeftBck = animation(swingBase, {
    params: {
        ...swingOutParams,
        direction: 'Y',
        duration: '.45s',
        endAngle: 100,
        xPos: 'center',
        yPos: 'left'
    }
});
export { swingInTopFwd, swingInRightFwd, swingInLeftFwd, swingInBottomFwd, swingInTopBck, swingInRightBck, swingInBottomBck, swingInLeftBck, swingOutTopFwd, swingOutRightFwd, swingOutBottomFwd, swingOutLefttFwd, swingOutTopBck, swingOutRightBck, swingOutBottomBck, swingOutLeftBck };
//# sourceMappingURL=data:application/json;base64,