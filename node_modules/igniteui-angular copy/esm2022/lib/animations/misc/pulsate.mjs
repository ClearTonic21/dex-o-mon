import { animate, animation, keyframes, style } from '@angular/animations';
const heartbeatBase = [
    style({
        animationTimingFunction: `ease-out`,
        transform: `scale(1)`,
        transformOrigin: `center center`
    }),
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            animationTimingFunction: `ease-in`,
            offset: 0.1,
            transform: `scale(0.91)`
        }),
        style({
            animationTimingFunction: `ease-out`,
            offset: 0.17,
            transform: `scale(0.98)`
        }),
        style({
            animationTimingFunction: `ease-in`,
            offset: 0.33,
            transform: `scale(0.87)`
        }),
        style({
            animationTimingFunction: `ease-out`,
            offset: 0.45,
            transform: `scale(1)`
        })
    ]))
];
const heartbeatParams = {
    delay: '0s',
    duration: '1.5s',
    easing: 'ease-in-out'
};
const pulsateBase = [
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            transform: `scale({{fromScale}})`
        }),
        style({
            offset: 0.5,
            transform: `scale({{toScale}})`
        }),
        style({
            offset: 1,
            transform: `scale({{fromScale}})`
        })
    ]))
];
const pulsateParams = {
    delay: '0s',
    duration: '.5s',
    easing: 'ease-in-out',
    fromScale: 1,
    toScale: 1.1
};
const blinkBase = [
    animate(`{{duration}} {{delay}} {{easing}}`, keyframes([
        style({
            offset: 0,
            opacity: .8,
            transform: `scale({{fromScale}})`
        }),
        style({
            offset: 0.8,
            opacity: 0,
            transform: `scale({{midScale}})`
        }),
        style({
            offset: 1,
            opacity: 0,
            transform: `scale({{toScale}})`
        })
    ]))
];
const blinkParams = {
    delay: '0s',
    duration: '.8s',
    easing: 'ease-in-out',
    fromScale: .2,
    midScale: 1.2,
    toScale: 2.2
};
const pulsateFwd = animation(pulsateBase, {
    params: {
        ...pulsateParams
    }
});
const pulsateBck = animation(pulsateBase, {
    params: {
        ...pulsateParams,
        toScale: .9
    }
});
const heartbeat = animation(heartbeatBase, {
    params: {
        ...heartbeatParams
    }
});
const blink = animation(blinkBase, {
    params: {
        ...blinkParams
    }
});
export { heartbeat, pulsateFwd, pulsateBck, blink };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVsc2F0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9hbmltYXRpb25zL21pc2MvcHVsc2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsT0FBTyxFQUNQLFNBQVMsRUFFVCxTQUFTLEVBQ1QsS0FBSyxFQUNSLE1BQU0scUJBQXFCLENBQUM7QUFHN0IsTUFBTSxhQUFhLEdBQXdCO0lBQ3ZDLEtBQUssQ0FBQztRQUNGLHVCQUF1QixFQUFFLFVBQVU7UUFDbkMsU0FBUyxFQUFFLFVBQVU7UUFDckIsZUFBZSxFQUFFLGVBQWU7S0FDbkMsQ0FBQztJQUNGLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsdUJBQXVCLEVBQUUsU0FBUztZQUNsQyxNQUFNLEVBQUUsR0FBRztZQUNYLFNBQVMsRUFBRSxhQUFhO1NBQzNCLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRix1QkFBdUIsRUFBRSxVQUFVO1lBQ25DLE1BQU0sRUFBRSxJQUFJO1lBQ1osU0FBUyxFQUFFLGFBQWE7U0FDM0IsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLHVCQUF1QixFQUFFLFNBQVM7WUFDbEMsTUFBTSxFQUFFLElBQUk7WUFDWixTQUFTLEVBQUUsYUFBYTtTQUMzQixDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsdUJBQXVCLEVBQUUsVUFBVTtZQUNuQyxNQUFNLEVBQUUsSUFBSTtZQUNaLFNBQVMsRUFBRSxVQUFVO1NBQ3hCLENBQUM7S0FDTCxDQUFDLENBQ0w7Q0FDSixDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQXFCO0lBQ3RDLEtBQUssRUFBRSxJQUFJO0lBQ1gsUUFBUSxFQUFFLE1BQU07SUFDaEIsTUFBTSxFQUFFLGFBQWE7Q0FDeEIsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUF3QjtJQUNyQyxPQUFPLENBQ0gsbUNBQW1DLEVBQ25DLFNBQVMsQ0FBQztRQUNOLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxDQUFDO1lBQ1QsU0FBUyxFQUFFLHNCQUFzQjtTQUNwQyxDQUFDO1FBQ0YsS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLEdBQUc7WUFDWCxTQUFTLEVBQUUsb0JBQW9CO1NBQ2xDLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULFNBQVMsRUFBRSxzQkFBc0I7U0FDcEMsQ0FBQztLQUNMLENBQUMsQ0FDTDtDQUNKLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBcUI7SUFDcEMsS0FBSyxFQUFFLElBQUk7SUFDWCxRQUFRLEVBQUUsS0FBSztJQUNmLE1BQU0sRUFBRSxhQUFhO0lBQ3JCLFNBQVMsRUFBRSxDQUFDO0lBQ1osT0FBTyxFQUFFLEdBQUc7Q0FDZixDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQXdCO0lBQ25DLE9BQU8sQ0FDSCxtQ0FBbUMsRUFDbkMsU0FBUyxDQUFDO1FBQ04sS0FBSyxDQUFDO1lBQ0YsTUFBTSxFQUFFLENBQUM7WUFDVCxPQUFPLEVBQUUsRUFBRTtZQUNYLFNBQVMsRUFBRSxzQkFBc0I7U0FDcEMsQ0FBQztRQUNGLEtBQUssQ0FBQztZQUNGLE1BQU0sRUFBRSxHQUFHO1lBQ1gsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUscUJBQXFCO1NBQ25DLENBQUM7UUFDRixLQUFLLENBQUM7WUFDRixNQUFNLEVBQUUsQ0FBQztZQUNULE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLG9CQUFvQjtTQUNsQyxDQUFDO0tBQ0wsQ0FBQyxDQUNMO0NBQ0osQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFxQjtJQUNsQyxLQUFLLEVBQUUsSUFBSTtJQUNYLFFBQVEsRUFBRSxLQUFLO0lBQ2YsTUFBTSxFQUFFLGFBQWE7SUFDckIsU0FBUyxFQUFFLEVBQUU7SUFDYixRQUFRLEVBQUUsR0FBRztJQUNiLE9BQU8sRUFBRSxHQUFHO0NBQ2YsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUU7SUFDdEMsTUFBTSxFQUFFO1FBQ0osR0FBRyxhQUFhO0tBQ25CO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRTtJQUN0QyxNQUFNLEVBQUU7UUFDSixHQUFHLGFBQWE7UUFDaEIsT0FBTyxFQUFFLEVBQUU7S0FDZDtDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxhQUFhLEVBQUU7SUFDdkMsTUFBTSxFQUFFO1FBQ0osR0FBRyxlQUFlO0tBQ3JCO0NBQ0osQ0FBQyxDQUFDO0FBRUgsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLFNBQVMsRUFBRTtJQUMvQixNQUFNLEVBQUU7UUFDSixHQUFHLFdBQVc7S0FDakI7Q0FDSixDQUFDLENBQUM7QUFFSCxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsS0FBSyxFQUNSLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgYW5pbWF0ZSxcclxuICAgIGFuaW1hdGlvbixcclxuICAgIEFuaW1hdGlvbk1ldGFkYXRhLFxyXG4gICAga2V5ZnJhbWVzLFxyXG4gICAgc3R5bGVcclxufSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcclxuaW1wb3J0IHsgSUFuaW1hdGlvblBhcmFtcyB9IGZyb20gJy4uL2ludGVyZmFjZSc7XHJcblxyXG5jb25zdCBoZWFydGJlYXRCYXNlOiBBbmltYXRpb25NZXRhZGF0YVtdID0gW1xyXG4gICAgc3R5bGUoe1xyXG4gICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1vdXRgLFxyXG4gICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKDEpYCxcclxuICAgICAgICB0cmFuc2Zvcm1PcmlnaW46IGBjZW50ZXIgY2VudGVyYFxyXG4gICAgfSksXHJcbiAgICBhbmltYXRlKFxyXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxyXG4gICAgICAgIGtleWZyYW1lcyhbXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1pbmAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMSxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKDAuOTEpYFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb246IGBlYXNlLW91dGAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMTcsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgwLjk4KWBcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1pbmAsXHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuMzMsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgwLjg3KWBcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uOiBgZWFzZS1vdXRgLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjQ1LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoMSlgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgXSlcclxuICAgIClcclxuXTtcclxuXHJcbmNvbnN0IGhlYXJ0YmVhdFBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcclxuICAgIGRlbGF5OiAnMHMnLFxyXG4gICAgZHVyYXRpb246ICcxLjVzJyxcclxuICAgIGVhc2luZzogJ2Vhc2UtaW4tb3V0J1xyXG59O1xyXG5cclxuY29uc3QgcHVsc2F0ZUJhc2U6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXHJcbiAgICBhbmltYXRlKFxyXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxyXG4gICAgICAgIGtleWZyYW1lcyhbXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKHt7ZnJvbVNjYWxlfX0pYFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAwLjUsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e3RvU2NhbGV9fSlgXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDEsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e2Zyb21TY2FsZX19KWBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBdKVxyXG4gICAgKVxyXG5dO1xyXG5cclxuY29uc3QgcHVsc2F0ZVBhcmFtczogSUFuaW1hdGlvblBhcmFtcyA9IHtcclxuICAgIGRlbGF5OiAnMHMnLFxyXG4gICAgZHVyYXRpb246ICcuNXMnLFxyXG4gICAgZWFzaW5nOiAnZWFzZS1pbi1vdXQnLFxyXG4gICAgZnJvbVNjYWxlOiAxLFxyXG4gICAgdG9TY2FsZTogMS4xXHJcbn07XHJcblxyXG5jb25zdCBibGlua0Jhc2U6IEFuaW1hdGlvbk1ldGFkYXRhW10gPSBbXHJcbiAgICBhbmltYXRlKFxyXG4gICAgICAgIGB7e2R1cmF0aW9ufX0ge3tkZWxheX19IHt7ZWFzaW5nfX1gLFxyXG4gICAgICAgIGtleWZyYW1lcyhbXHJcbiAgICAgICAgICAgIHN0eWxlKHtcclxuICAgICAgICAgICAgICAgIG9mZnNldDogMCxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IC44LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoe3tmcm9tU2NhbGV9fSlgXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzdHlsZSh7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IDAuOCxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSh7e21pZFNjYWxlfX0pYFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc3R5bGUoe1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHNjYWxlKHt7dG9TY2FsZX19KWBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBdKVxyXG4gICAgKVxyXG5dO1xyXG5cclxuY29uc3QgYmxpbmtQYXJhbXM6IElBbmltYXRpb25QYXJhbXMgPSB7XHJcbiAgICBkZWxheTogJzBzJyxcclxuICAgIGR1cmF0aW9uOiAnLjhzJyxcclxuICAgIGVhc2luZzogJ2Vhc2UtaW4tb3V0JyxcclxuICAgIGZyb21TY2FsZTogLjIsXHJcbiAgICBtaWRTY2FsZTogMS4yLFxyXG4gICAgdG9TY2FsZTogMi4yXHJcbn07XHJcblxyXG5jb25zdCBwdWxzYXRlRndkID0gYW5pbWF0aW9uKHB1bHNhdGVCYXNlLCB7XHJcbiAgICBwYXJhbXM6IHtcclxuICAgICAgICAuLi5wdWxzYXRlUGFyYW1zXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgcHVsc2F0ZUJjayA9IGFuaW1hdGlvbihwdWxzYXRlQmFzZSwge1xyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgLi4ucHVsc2F0ZVBhcmFtcyxcclxuICAgICAgICB0b1NjYWxlOiAuOVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNvbnN0IGhlYXJ0YmVhdCA9IGFuaW1hdGlvbihoZWFydGJlYXRCYXNlLCB7XHJcbiAgICBwYXJhbXM6IHtcclxuICAgICAgICAuLi5oZWFydGJlYXRQYXJhbXNcclxuICAgIH1cclxufSk7XHJcblxyXG5jb25zdCBibGluayA9IGFuaW1hdGlvbihibGlua0Jhc2UsIHtcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIC4uLmJsaW5rUGFyYW1zXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IHtcclxuICAgIGhlYXJ0YmVhdCxcclxuICAgIHB1bHNhdGVGd2QsXHJcbiAgICBwdWxzYXRlQmNrLFxyXG4gICAgYmxpbmtcclxufTtcclxuIl19