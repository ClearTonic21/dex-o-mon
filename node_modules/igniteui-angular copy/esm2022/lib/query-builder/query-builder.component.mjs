import { ContentChild, EventEmitter, LOCALE_ID, Optional, Output, Pipe } from '@angular/core';
import { getLocaleFirstDayOfWeek, NgIf, NgFor, NgTemplateOutlet, NgClass, DatePipe } from '@angular/common';
import { Inject } from '@angular/core';
import { Component, Input, ViewChild, ViewChildren, ElementRef, HostBinding } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Subject } from 'rxjs';
import { editor } from '@igniteui/material-icons-extended';
import { IgxButtonGroupComponent } from '../buttonGroup/buttonGroup.component';
import { IgxChipComponent } from '../chips/chip.component';
import { DisplayDensityBase, DisplayDensityToken } from '../core/density';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DataType, DataUtil } from '../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxDateFilteringOperand, IgxDateTimeFilteringOperand, IgxNumberFilteringOperand, IgxStringFilteringOperand, IgxTimeFilteringOperand } from '../data-operations/filtering-condition';
import { FilteringLogic } from '../data-operations/filtering-expression.interface';
import { FilteringExpressionsTree } from '../data-operations/filtering-expressions-tree';
import { IgxDatePickerComponent } from '../date-picker/date-picker.component';
import { IgxButtonDirective } from '../directives/button/button.directive';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/date-time-editor.directive';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxSelectComponent } from '../select/select.component';
import { HorizontalAlignment, Point, VerticalAlignment } from '../services/overlay/utilities';
import { AbsoluteScrollStrategy, AutoPositionStrategy, CloseScrollStrategy, ConnectedPositioningStrategy } from '../services/public_api';
import { IgxTimePickerComponent } from '../time-picker/time-picker.component';
import { IgxQueryBuilderHeaderComponent } from './query-builder-header.component';
import { IgxPickerToggleComponent, IgxPickerClearComponent } from '../date-common/picker-icons.common';
import { IgxInputDirective } from '../directives/input/input.directive';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxSelectItemComponent } from '../select/select-item.component';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxPrefixDirective } from '../directives/prefix/prefix.directive';
import { IgxIconComponent } from '../icon/icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../icon/icon.service";
import * as i2 from "../core/utils";
import * as i3 from "@angular/forms";
const DEFAULT_PIPE_DATE_FORMAT = 'mediumDate';
const DEFAULT_PIPE_TIME_FORMAT = 'mediumTime';
const DEFAULT_PIPE_DATE_TIME_FORMAT = 'medium';
const DEFAULT_PIPE_DIGITS_INFO = '1.0-3';
const DEFAULT_DATE_TIME_FORMAT = 'dd/MM/yyyy HH:mm:ss tt';
const DEFAULT_TIME_FORMAT = 'hh:mm:ss tt';
export class IgxFieldFormatterPipe {
    transform(value, formatter, rowData, fieldData) {
        return formatter(value, rowData, fieldData);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxFieldFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.2", ngImport: i0, type: IgxFieldFormatterPipe, isStandalone: true, name: "fieldFormatter" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxFieldFormatterPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'fieldFormatter',
                    standalone: true
                }]
        }] });
/**
 * @hidden @internal
 *
 * Internal class usage
 */
class ExpressionItem {
    constructor(parent) {
        this.parent = parent;
    }
}
/**
 * @hidden @internal
 *
 * Internal class usage
 */
class ExpressionGroupItem extends ExpressionItem {
    constructor(operator, parent) {
        super(parent);
        this.operator = operator;
        this.children = [];
    }
}
/**
 * @hidden @internal
 *
 * Internal class usage
 */
class ExpressionOperandItem extends ExpressionItem {
    constructor(expression, parent) {
        super(parent);
        this.expression = expression;
    }
}
/**
 * A component used for operating with complex filters by creating or editing conditions
 * and grouping them using AND/OR logic.
 * It is used internally in the Advanced Filtering of the Grid.
 *
 * @example
 * ```html
 * <igx-query-builder [fields]="this.fields">
 * </igx-query-builder>
 * ```
 */
export class IgxQueryBuilderComponent extends DisplayDensityBase {
    /**
    * Returns the fields.
    */
    get fields() {
        return this._fields;
    }
    /**
     * An @Input property that sets the fields.
     */
    set fields(fields) {
        this._fields = fields;
        if (this._fields) {
            this.registerSVGIcons();
            this._fields.forEach(field => {
                this.setFilters(field);
                this.setFormat(field);
            });
        }
    }
    /**
    * Returns the expression tree.
    */
    get expressionTree() {
        return this._expressionTree;
    }
    /**
     * An @Input property that sets the expression tree.
     */
    set expressionTree(expressionTree) {
        this._expressionTree = expressionTree;
        this.init();
    }
    /**
     * Gets the `locale` of the query builder.
     * If not set, defaults to application's locale.
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the query builder.
     * Expects a valid BCP 47 language tag.
     */
    set locale(value) {
        this._locale = value;
        // if value is invalid, set it back to _localeId
        try {
            getLocaleFirstDayOfWeek(this._locale);
        }
        catch (e) {
            this._locale = this._localeId;
        }
    }
    /**
     * Sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * Returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    set editingInputsContainer(value) {
        if ((value && !this._editingInputsContainer) ||
            (value && this._editingInputsContainer && this._editingInputsContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._editingInputsContainer = value;
    }
    /** @hidden */
    get editingInputsContainer() {
        return this._editingInputsContainer;
    }
    set addModeContainer(value) {
        if ((value && !this._addModeContainer) ||
            (value && this._addModeContainer && this._addModeContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._addModeContainer = value;
    }
    /** @hidden */
    get addModeContainer() {
        return this._addModeContainer;
    }
    set currentGroupButtonsContainer(value) {
        if ((value && !this._currentGroupButtonsContainer) ||
            (value && this._currentGroupButtonsContainer && this._currentGroupButtonsContainer.nativeElement !== value.nativeElement)) {
            requestAnimationFrame(() => {
                this.scrollElementIntoView(value.nativeElement);
            });
        }
        this._currentGroupButtonsContainer = value;
    }
    /** @hidden */
    get currentGroupButtonsContainer() {
        return this._currentGroupButtonsContainer;
    }
    constructor(cdr, iconService, platform, _localeId, _displayDensityOptions) {
        super(_displayDensityOptions);
        this.cdr = cdr;
        this.iconService = iconService;
        this.platform = platform;
        this._localeId = _localeId;
        this._displayDensityOptions = _displayDensityOptions;
        /**
         * @hidden @internal
         */
        this.cssClass = 'igx-query-builder';
        /**
         * @hidden @internal
         */
        this.display = 'block';
        /**
         * Event fired as the expression tree is changed.
         *
         * ```html
         *  <igx-query-builder (expressionTreeChange)='onExpressionTreeChange()'></igx-query-builder>
         * ```
         */
        this.expressionTreeChange = new EventEmitter();
        /**
         * @hidden @internal
         */
        this.selectedExpressions = [];
        /**
         * @hidden @internal
         */
        this.fieldSelectOverlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false
        };
        /**
         * @hidden @internal
         */
        this.conditionSelectOverlaySettings = {
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnOutsideClick: false
        };
        this.destroy$ = new Subject();
        this._dblClickDelay = 200;
        this._preventChipClick = false;
        this._selectedGroups = [];
        this._resourceStrings = CurrentResourceStrings.QueryBuilderResStrings;
        this._positionSettings = {
            horizontalStartPoint: HorizontalAlignment.Right,
            verticalStartPoint: VerticalAlignment.Top
        };
        this._overlaySettings = {
            closeOnOutsideClick: false,
            modal: false,
            positionStrategy: new ConnectedPositioningStrategy(this._positionSettings),
            scrollStrategy: new CloseScrollStrategy()
        };
        this.locale = this.locale || this._localeId;
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        this._overlaySettings.outlet = this.overlayOutlet;
        this.fieldSelectOverlaySettings.outlet = this.overlayOutlet;
        this.conditionSelectOverlaySettings.outlet = this.overlayOutlet;
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    set selectedField(value) {
        const oldValue = this._selectedField;
        if (this._selectedField !== value) {
            this._selectedField = value;
            if (oldValue && this._selectedField && this._selectedField.dataType !== oldValue.dataType) {
                this.selectedCondition = null;
                this.searchValue = null;
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * @hidden @internal
     */
    get selectedField() {
        return this._selectedField;
    }
    /**
     * @hidden @internal
     *
     * used by the grid
     */
    setPickerOutlet(outlet) {
        this.pickerOutlet = outlet;
    }
    /**
     * @hidden @internal
     *
     * used by the grid
     */
    get isContextMenuVisible() {
        return !this.contextMenuToggle.collapsed;
    }
    /**
     * @hidden @internal
     */
    get hasEditedExpression() {
        return this._editedExpression !== undefined && this._editedExpression !== null;
    }
    /**
     * @hidden @internal
     */
    addCondition(parent, afterExpression) {
        this.cancelOperandAdd();
        const operandItem = new ExpressionOperandItem({
            fieldName: null,
            condition: null,
            ignoreCase: true,
            searchVal: null
        }, parent);
        if (afterExpression) {
            const index = parent.children.indexOf(afterExpression);
            parent.children.splice(index + 1, 0, operandItem);
        }
        else {
            parent.children.push(operandItem);
        }
        this.enterExpressionEdit(operandItem);
    }
    /**
     * @hidden @internal
     */
    addAndGroup(parent, afterExpression) {
        this.addGroup(FilteringLogic.And, parent, afterExpression);
    }
    /**
     * @hidden @internal
     */
    addOrGroup(parent, afterExpression) {
        this.addGroup(FilteringLogic.Or, parent, afterExpression);
    }
    /**
     * @hidden @internal
     */
    endGroup(groupItem) {
        this.currentGroup = groupItem.parent;
    }
    /**
     * @hidden @internal
     */
    commitOperandEdit() {
        if (this._editedExpression) {
            this._editedExpression.expression.fieldName = this.selectedField.field;
            this._editedExpression.expression.condition = this.selectedField.filters.condition(this.selectedCondition);
            this._editedExpression.expression.searchVal = DataUtil.parseValue(this.selectedField.dataType, this.searchValue);
            this._editedExpression.fieldLabel = this.selectedField.label
                ? this.selectedField.label
                : this.selectedField.header
                    ? this.selectedField.header
                    : this.selectedField.field;
            this._editedExpression.inEditMode = false;
            this._editedExpression = null;
        }
        this._expressionTree = this.createExpressionTreeFromGroupItem(this.rootGroup);
        this.expressionTreeChange.emit();
    }
    /**
     * @hidden @internal
     */
    cancelOperandAdd() {
        if (this._addModeExpression) {
            this._addModeExpression.inAddMode = false;
            this._addModeExpression = null;
        }
    }
    /**
     * @hidden @internal
     */
    cancelOperandEdit() {
        if (this._editedExpression) {
            this._editedExpression.inEditMode = false;
            if (!this._editedExpression.expression.fieldName) {
                this.deleteItem(this._editedExpression);
            }
            this._editedExpression = null;
        }
    }
    /**
     * @hidden @internal
     */
    operandCanBeCommitted() {
        return this.selectedField && this.selectedCondition &&
            (!!this.searchValue || this.selectedField.filters.condition(this.selectedCondition).isUnary);
    }
    /**
     * @hidden @internal
     *
     * used by the grid
     */
    exitOperandEdit() {
        if (!this._editedExpression) {
            return;
        }
        if (this.operandCanBeCommitted()) {
            this.commitOperandEdit();
        }
        else {
            this.cancelOperandEdit();
        }
    }
    /**
     * @hidden @internal
     */
    isExpressionGroup(expression) {
        return expression instanceof ExpressionGroupItem;
    }
    /**
     * @hidden @internal
     */
    onChipRemove(expressionItem) {
        this.deleteItem(expressionItem);
    }
    /**
     * @hidden @internal
     */
    onChipClick(expressionItem) {
        this._clickTimer = setTimeout(() => {
            if (!this._preventChipClick) {
                this.onToggleExpression(expressionItem);
            }
            this._preventChipClick = false;
        }, this._dblClickDelay);
    }
    /**
     * @hidden @internal
     */
    onChipDblClick(expressionItem) {
        clearTimeout(this._clickTimer);
        this._preventChipClick = true;
        this.enterExpressionEdit(expressionItem);
    }
    /**
     * @hidden @internal
     */
    enterExpressionEdit(expressionItem) {
        this.clearSelection();
        this.exitOperandEdit();
        this.cancelOperandAdd();
        if (this._editedExpression) {
            this._editedExpression.inEditMode = false;
        }
        expressionItem.hovered = false;
        this.selectedField = expressionItem.expression.fieldName ?
            this.fields.find(field => field.field === expressionItem.expression.fieldName) : null;
        this.selectedCondition = expressionItem.expression.condition ?
            expressionItem.expression.condition.name : null;
        this.searchValue = expressionItem.expression.searchVal;
        expressionItem.inEditMode = true;
        this._editedExpression = expressionItem;
        this.cdr.detectChanges();
        this.fieldSelectOverlaySettings.target = this.fieldSelect.element;
        this.fieldSelectOverlaySettings.excludeFromOutsideClick = [this.fieldSelect.element];
        this.fieldSelectOverlaySettings.positionStrategy = new AutoPositionStrategy();
        this.conditionSelectOverlaySettings.target = this.conditionSelect.element;
        this.conditionSelectOverlaySettings.excludeFromOutsideClick = [this.conditionSelect.element];
        this.conditionSelectOverlaySettings.positionStrategy = new AutoPositionStrategy();
        if (!this.selectedField) {
            this.fieldSelect.input.nativeElement.focus();
        }
        else if (this.selectedField.filters.condition(this.selectedCondition).isUnary) {
            this.conditionSelect.input.nativeElement.focus();
        }
        else {
            const input = this.searchValueInput?.nativeElement || this.picker?.getEditElement();
            input.focus();
        }
    }
    /**
     * @hidden @internal
     */
    clearSelection() {
        for (const group of this._selectedGroups) {
            group.selected = false;
        }
        this._selectedGroups = [];
        for (const expr of this.selectedExpressions) {
            expr.selected = false;
        }
        this.selectedExpressions = [];
        this.toggleContextMenu();
    }
    /**
     * @hidden @internal
     */
    enterExpressionAdd(expressionItem) {
        this.clearSelection();
        this.exitOperandEdit();
        if (this._addModeExpression) {
            this._addModeExpression.inAddMode = false;
        }
        expressionItem.inAddMode = true;
        this._addModeExpression = expressionItem;
        if (expressionItem.selected) {
            this.toggleExpression(expressionItem);
        }
    }
    /**
     * @hidden @internal
     */
    contextMenuClosed() {
        this.contextualGroup = null;
    }
    /**
     * @hidden @internal
     */
    onKeyDown(eventArgs) {
        eventArgs.stopPropagation();
        const key = eventArgs.key;
        if (!this.contextMenuToggle.collapsed && (key === this.platform.KEYMAP.ESCAPE)) {
            this.clearSelection();
        }
    }
    /**
     * @hidden @internal
     */
    createAndGroup() {
        this.createGroup(FilteringLogic.And);
    }
    /**
     * @hidden @internal
     */
    createOrGroup() {
        this.createGroup(FilteringLogic.Or);
    }
    /**
     * @hidden @internal
     */
    deleteFilters() {
        for (const expr of this.selectedExpressions) {
            this.deleteItem(expr);
        }
        this.clearSelection();
    }
    /**
     * @hidden @internal
     */
    onGroupClick(groupItem) {
        this.toggleGroup(groupItem);
    }
    /**
     * @hidden @internal
     */
    ungroup() {
        const selectedGroup = this.contextualGroup;
        const parent = selectedGroup.parent;
        if (parent) {
            const index = parent.children.indexOf(selectedGroup);
            parent.children.splice(index, 1, ...selectedGroup.children);
            for (const expr of selectedGroup.children) {
                expr.parent = parent;
            }
        }
        this.clearSelection();
        this.commitOperandEdit();
    }
    /**
     * @hidden @internal
     */
    deleteGroup() {
        const selectedGroup = this.contextualGroup;
        const parent = selectedGroup.parent;
        if (parent) {
            const index = parent.children.indexOf(selectedGroup);
            parent.children.splice(index, 1);
        }
        else {
            this.rootGroup = null;
        }
        this.clearSelection();
        this.commitOperandEdit();
    }
    /**
     * @hidden @internal
     */
    selectFilteringLogic(event) {
        this.contextualGroup.operator = event.index;
        this.commitOperandEdit();
    }
    /**
     * @hidden @internal
     */
    getConditionFriendlyName(name) {
        return this.resourceStrings[`igx_query_builder_filter_${name}`] || name;
    }
    /**
     * @hidden @internal
     */
    isDate(value) {
        return value instanceof Date;
    }
    /**
     * @hidden @internal
     */
    onExpressionsScrolled() {
        if (!this.contextMenuToggle.collapsed) {
            this.calculateContextMenuTarget();
            this.contextMenuToggle.reposition();
        }
    }
    /**
     * @hidden @internal
     */
    invokeClick(eventArgs) {
        if (this.platform.isActivationKey(eventArgs)) {
            eventArgs.preventDefault();
            eventArgs.currentTarget.click();
        }
    }
    /**
     * @hidden @internal
     */
    openPicker(args) {
        if (this.platform.isActivationKey(args)) {
            args.preventDefault();
            this.picker.open();
        }
    }
    /**
     * @hidden @internal
     */
    onOutletPointerDown(event) {
        // This prevents closing the select's dropdown when clicking the scroll
        event.preventDefault();
    }
    /**
     * @hidden @internal
     */
    getConditionList() {
        return this.selectedField ? this.selectedField.filters.conditionList() : [];
    }
    /**
     * @hidden @internal
     */
    getFormatter(field) {
        return this.fields.find(el => el.field === field).formatter;
    }
    /**
     * @hidden @internal
     */
    getFormat(field) {
        return this.fields.find(el => el.field === field).pipeArgs.format;
    }
    /**
     * @hidden @internal
     *
     * used by the grid
     */
    setAddButtonFocus() {
        if (this.addRootAndGroupButton) {
            this.addRootAndGroupButton.nativeElement.focus();
        }
        else if (this.addConditionButton) {
            this.addConditionButton.nativeElement.focus();
        }
    }
    /**
     * @hidden @internal
     */
    context(expression, afterExpression) {
        return {
            $implicit: expression,
            afterExpression
        };
    }
    /**
     * @hidden @internal
     */
    onChipSelectionEnd() {
        const contextualGroup = this.findSingleSelectedGroup();
        if (contextualGroup || this.selectedExpressions.length > 1) {
            this.contextualGroup = contextualGroup;
            this.calculateContextMenuTarget();
            if (this.contextMenuToggle.collapsed) {
                this.contextMenuToggle.open(this._overlaySettings);
            }
            else {
                this.contextMenuToggle.reposition();
            }
        }
    }
    setFormat(field) {
        if (!field.pipeArgs) {
            field.pipeArgs = { digitsInfo: DEFAULT_PIPE_DIGITS_INFO };
        }
        if (!field.pipeArgs.format) {
            field.pipeArgs.format = field.dataType === DataType.Time ?
                DEFAULT_PIPE_TIME_FORMAT : field.dataType === DataType.DateTime ?
                DEFAULT_PIPE_DATE_TIME_FORMAT : DEFAULT_PIPE_DATE_FORMAT;
        }
        if (!field.defaultDateTimeFormat) {
            field.defaultDateTimeFormat = DEFAULT_DATE_TIME_FORMAT;
        }
        if (!field.defaultTimeFormat) {
            field.defaultTimeFormat = DEFAULT_TIME_FORMAT;
        }
    }
    setFilters(field) {
        if (!field.filters) {
            switch (field.dataType) {
                case DataType.Boolean:
                    field.filters = IgxBooleanFilteringOperand.instance();
                    break;
                case DataType.Number:
                case DataType.Currency:
                case DataType.Percent:
                    field.filters = IgxNumberFilteringOperand.instance();
                    break;
                case DataType.Date:
                    field.filters = IgxDateFilteringOperand.instance();
                    break;
                case DataType.Time:
                    field.filters = IgxTimeFilteringOperand.instance();
                    break;
                case DataType.DateTime:
                    field.filters = IgxDateTimeFilteringOperand.instance();
                    break;
                case DataType.String:
                default:
                    field.filters = IgxStringFilteringOperand.instance();
                    break;
            }
        }
    }
    onToggleExpression(expressionItem) {
        this.exitOperandEdit();
        this.toggleExpression(expressionItem);
        this.toggleContextMenu();
    }
    toggleExpression(expressionItem) {
        expressionItem.selected = !expressionItem.selected;
        if (expressionItem.selected) {
            this.selectedExpressions.push(expressionItem);
        }
        else {
            const index = this.selectedExpressions.indexOf(expressionItem);
            this.selectedExpressions.splice(index, 1);
            this.deselectParentRecursive(expressionItem);
        }
    }
    addGroup(operator, parent, afterExpression) {
        this.cancelOperandAdd();
        const groupItem = new ExpressionGroupItem(operator, parent);
        if (parent) {
            if (afterExpression) {
                const index = parent.children.indexOf(afterExpression);
                parent.children.splice(index + 1, 0, groupItem);
            }
            else {
                parent.children.push(groupItem);
            }
        }
        else {
            this.rootGroup = groupItem;
        }
        this.addCondition(groupItem);
        this.currentGroup = groupItem;
    }
    createExpressionGroupItem(expressionTree, parent) {
        let groupItem;
        if (expressionTree) {
            groupItem = new ExpressionGroupItem(expressionTree.operator, parent);
            for (const expr of expressionTree.filteringOperands) {
                if (expr instanceof FilteringExpressionsTree) {
                    groupItem.children.push(this.createExpressionGroupItem(expr, groupItem));
                }
                else {
                    const filteringExpr = expr;
                    const exprCopy = {
                        fieldName: filteringExpr.fieldName,
                        condition: filteringExpr.condition,
                        searchVal: filteringExpr.searchVal,
                        ignoreCase: filteringExpr.ignoreCase
                    };
                    const operandItem = new ExpressionOperandItem(exprCopy, groupItem);
                    const field = this.fields.find(el => el.field === filteringExpr.fieldName);
                    operandItem.fieldLabel = field.label || field.header || field.field;
                    groupItem.children.push(operandItem);
                }
            }
        }
        return groupItem;
    }
    createExpressionTreeFromGroupItem(groupItem) {
        if (!groupItem) {
            return null;
        }
        const expressionTree = new FilteringExpressionsTree(groupItem.operator);
        for (const item of groupItem.children) {
            if (item instanceof ExpressionGroupItem) {
                const subTree = this.createExpressionTreeFromGroupItem(item);
                expressionTree.filteringOperands.push(subTree);
            }
            else {
                expressionTree.filteringOperands.push(item.expression);
            }
        }
        return expressionTree;
    }
    toggleContextMenu() {
        const contextualGroup = this.findSingleSelectedGroup();
        if (contextualGroup || this.selectedExpressions.length > 1) {
            this.contextualGroup = contextualGroup;
            if (contextualGroup) {
                this.filteringLogics = [
                    {
                        label: this.resourceStrings.igx_query_builder_filter_operator_and,
                        selected: contextualGroup.operator === FilteringLogic.And
                    },
                    {
                        label: this.resourceStrings.igx_query_builder_filter_operator_or,
                        selected: contextualGroup.operator === FilteringLogic.Or
                    }
                ];
            }
        }
        else if (this.contextMenuToggle) {
            this.contextMenuToggle.close();
        }
    }
    findSingleSelectedGroup() {
        for (const group of this._selectedGroups) {
            const containsAllSelectedExpressions = this.selectedExpressions.every(op => this.isInsideGroup(op, group));
            if (containsAllSelectedExpressions) {
                return group;
            }
        }
        return null;
    }
    isInsideGroup(item, group) {
        if (!item) {
            return false;
        }
        if (item.parent === group) {
            return true;
        }
        return this.isInsideGroup(item.parent, group);
    }
    deleteItem(expressionItem) {
        if (!expressionItem.parent) {
            this.rootGroup = null;
            this.currentGroup = null;
            this._expressionTree = null;
            return;
        }
        if (expressionItem === this.currentGroup) {
            this.currentGroup = this.currentGroup.parent;
        }
        const children = expressionItem.parent.children;
        const index = children.indexOf(expressionItem);
        children.splice(index, 1);
        this._expressionTree = this.createExpressionTreeFromGroupItem(this.rootGroup);
        if (!children.length) {
            this.deleteItem(expressionItem.parent);
        }
        this.expressionTreeChange.emit();
    }
    createGroup(operator) {
        const chips = this.chips.toArray();
        const minIndex = this.selectedExpressions.reduce((i, e) => Math.min(i, chips.findIndex(c => c.data === e)), Number.MAX_VALUE);
        const firstExpression = chips[minIndex].data;
        const parent = firstExpression.parent;
        const groupItem = new ExpressionGroupItem(operator, parent);
        const index = parent.children.indexOf(firstExpression);
        parent.children.splice(index, 0, groupItem);
        for (const expr of this.selectedExpressions) {
            groupItem.children.push(expr);
            this.deleteItem(expr);
            expr.parent = groupItem;
        }
        this.clearSelection();
    }
    toggleGroup(groupItem) {
        this.exitOperandEdit();
        if (groupItem.children && groupItem.children.length) {
            this.toggleGroupRecursive(groupItem, !groupItem.selected);
            if (!groupItem.selected) {
                this.deselectParentRecursive(groupItem);
            }
            this.toggleContextMenu();
        }
    }
    toggleGroupRecursive(groupItem, selected) {
        if (groupItem.selected !== selected) {
            groupItem.selected = selected;
            if (groupItem.selected) {
                this._selectedGroups.push(groupItem);
            }
            else {
                const index = this._selectedGroups.indexOf(groupItem);
                this._selectedGroups.splice(index, 1);
            }
        }
        for (const expr of groupItem.children) {
            if (expr instanceof ExpressionGroupItem) {
                this.toggleGroupRecursive(expr, selected);
            }
            else {
                const operandExpression = expr;
                if (operandExpression.selected !== selected) {
                    this.toggleExpression(operandExpression);
                }
            }
        }
    }
    deselectParentRecursive(expressionItem) {
        const parent = expressionItem.parent;
        if (parent) {
            if (parent.selected) {
                parent.selected = false;
                const index = this._selectedGroups.indexOf(parent);
                this._selectedGroups.splice(index, 1);
            }
            this.deselectParentRecursive(parent);
        }
    }
    calculateContextMenuTarget() {
        const containerRect = this.expressionsContainer.nativeElement.getBoundingClientRect();
        const chips = this.chips.filter(c => this.selectedExpressions.indexOf(c.data) !== -1);
        let minTop = chips.reduce((t, c) => Math.min(t, c.nativeElement.getBoundingClientRect().top), Number.MAX_VALUE);
        minTop = Math.max(containerRect.top, minTop);
        minTop = Math.min(containerRect.bottom, minTop);
        let maxRight = chips.reduce((r, c) => Math.max(r, c.nativeElement.getBoundingClientRect().right), 0);
        maxRight = Math.max(maxRight, containerRect.left);
        maxRight = Math.min(maxRight, containerRect.right);
        this._overlaySettings.target = new Point(maxRight, minTop);
    }
    scrollElementIntoView(target) {
        const container = this.expressionsContainer.nativeElement;
        const targetOffset = target.offsetTop - container.offsetTop;
        const delta = 10;
        if (container.scrollTop + delta > targetOffset) {
            container.scrollTop = targetOffset - delta;
        }
        else if (container.scrollTop + container.clientHeight < targetOffset + target.offsetHeight + delta) {
            container.scrollTop = targetOffset + target.offsetHeight + delta - container.clientHeight;
        }
    }
    init() {
        this.clearSelection();
        this.cancelOperandAdd();
        this.cancelOperandEdit();
        this.rootGroup = this.createExpressionGroupItem(this.expressionTree);
        this.currentGroup = this.rootGroup;
    }
    registerSVGIcons() {
        const editorIcons = editor;
        editorIcons.forEach(icon => this.iconService.addSvgIconFromText(icon.name, icon.value, 'imx-icons'));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxQueryBuilderComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.IgxIconService }, { token: i2.PlatformUtil }, { token: LOCALE_ID }, { token: DisplayDensityToken, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxQueryBuilderComponent, isStandalone: true, selector: "igx-query-builder", inputs: { fields: "fields", expressionTree: "expressionTree", locale: "locale", resourceStrings: "resourceStrings" }, outputs: { expressionTreeChange: "expressionTreeChange" }, host: { properties: { "class.igx-query-builder": "this.cssClass", "style.display": "this.display" } }, queries: [{ propertyName: "headerContent", first: true, predicate: IgxQueryBuilderHeaderComponent, descendants: true }], viewQueries: [{ propertyName: "fieldSelect", first: true, predicate: ["fieldSelect"], descendants: true, read: IgxSelectComponent }, { propertyName: "conditionSelect", first: true, predicate: ["conditionSelect"], descendants: true, read: IgxSelectComponent }, { propertyName: "searchValueInput", first: true, predicate: ["searchValueInput"], descendants: true, read: ElementRef }, { propertyName: "picker", first: true, predicate: ["picker"], descendants: true }, { propertyName: "addRootAndGroupButton", first: true, predicate: ["addRootAndGroupButton"], descendants: true, read: ElementRef }, { propertyName: "addConditionButton", first: true, predicate: ["addConditionButton"], descendants: true, read: ElementRef }, { propertyName: "editingInputsContainer", first: true, predicate: ["editingInputsContainer"], descendants: true, read: ElementRef }, { propertyName: "addModeContainer", first: true, predicate: ["addModeContainer"], descendants: true, read: ElementRef }, { propertyName: "currentGroupButtonsContainer", first: true, predicate: ["currentGroupButtonsContainer"], descendants: true, read: ElementRef }, { propertyName: "contextMenuToggle", first: true, predicate: IgxToggleDirective, descendants: true }, { propertyName: "expressionsContainer", first: true, predicate: ["expressionsContainer"], descendants: true }, { propertyName: "overlayOutlet", first: true, predicate: ["overlayOutlet"], descendants: true, read: IgxOverlayOutletDirective, static: true }, { propertyName: "chips", predicate: IgxChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<igx-query-builder-header\r\n    *ngIf=\"!headerContent\"\r\n    [title]=\"this.resourceStrings.igx_query_builder_title\"\r\n>\r\n</igx-query-builder-header>\r\n\r\n<ng-content select=\"igx-query-builder-header\"></ng-content>\r\n\r\n<div\r\n    #expressionsContainer\r\n    class=\"igx-query-builder__main\"\r\n    (scroll)=\"onExpressionsScrolled()\"\r\n>\r\n    <ng-container *ngIf=\"!rootGroup\">\r\n        <button\r\n            #addRootAndGroupButton\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            (click)=\"addAndGroup()\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_and_group }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            (click)=\"addOrGroup()\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_or_group }}</span>\r\n        </button>\r\n\r\n        <div class=\"igx-filter-empty\">\r\n            <h6 class=\"igx-filter-empty__title\">\r\n                {{ this.resourceStrings.igx_query_builder_initial_text }}\r\n            </h6>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-template\r\n        #addExpressionsTemplate\r\n        let-expressionItem\r\n        let-afterExpression=\"afterExpression\"\r\n    >\r\n        <button\r\n            #addConditionButton\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addCondition(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{\r\n                this.resourceStrings.igx_query_builder_add_condition\r\n            }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addAndGroup(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_and_group }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addOrGroup(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_or_group }}</span>\r\n        </button>\r\n    </ng-template>\r\n\r\n    <ng-template #filterOperandTemplate let-expressionItem>\r\n        <div\r\n            *ngIf=\"!expressionItem.inEditMode\"\r\n            class=\"igx-filter-tree__expression-item\"\r\n            (mouseenter)=\"expressionItem.hovered = true\"\r\n            (mouseleave)=\"expressionItem.hovered = false\"\r\n        >\r\n            <igx-chip\r\n                [data]=\"expressionItem\"\r\n                [displayDensity]=\"\r\n                    displayDensity === 'compact' ? 'cosy' : displayDensity\r\n                \"\r\n                [removable]=\"true\"\r\n                [selected]=\"expressionItem.selected\"\r\n                (keydown)=\"invokeClick($event)\"\r\n                (click)=\"onChipClick(expressionItem)\"\r\n                (dblclick)=\"onChipDblClick(expressionItem)\"\r\n                (remove)=\"onChipRemove(expressionItem)\"\r\n                (selectedChanged)=\"onChipSelectionEnd()\"\r\n            >\r\n                <span igxPrefix class=\"igx-filter-tree__expression-column\">{{\r\n                    expressionItem.fieldLabel ||\r\n                        expressionItem.expression.fieldName\r\n                }}</span>\r\n                <igx-prefix>\r\n                    <igx-icon\r\n                        family=\"imx-icons\"\r\n                        [name]=\"expressionItem.expression.condition.iconName\"\r\n                    >\r\n                    </igx-icon>\r\n                </igx-prefix>\r\n                <span class=\"igx-filter-tree__expression-condition\">\r\n                    {{\r\n                        getConditionFriendlyName(\r\n                            expressionItem.expression.condition.name\r\n                        )\r\n                    }}\r\n                </span>\r\n                <span\r\n                    igxSuffix\r\n                    *ngIf=\"!expressionItem.expression.condition.isUnary\"\r\n                >\r\n                    {{\r\n                        isDate(expressionItem.expression.searchVal)\r\n                            ? getFormatter(expressionItem.expression.fieldName)\r\n                                ? (expressionItem.expression.searchVal\r\n                                  | fieldFormatter\r\n                                      : getFormatter(\r\n                                            expressionItem.expression.fieldName\r\n                                        )\r\n                                      : undefined)\r\n                                : (expressionItem.expression.searchVal\r\n                                  | date\r\n                                      : getFormat(\r\n                                            expressionItem.expression.fieldName\r\n                                        )\r\n                                      : undefined\r\n                                      : this.locale)\r\n                            : expressionItem.expression.searchVal\r\n                    }}\r\n                </span>\r\n            </igx-chip>\r\n            <div\r\n                class=\"igx-filter-tree__expression-actions\"\r\n                *ngIf=\"\r\n                    (expressionItem.selected &&\r\n                        selectedExpressions.length === 1) ||\r\n                    expressionItem.hovered\r\n                \"\r\n            >\r\n                <igx-icon\r\n                    tabindex=\"0\"\r\n                    (keydown)=\"invokeClick($event)\"\r\n                    (click)=\"enterExpressionEdit(expressionItem)\"\r\n                >\r\n                    edit\r\n                </igx-icon>\r\n                <igx-icon\r\n                    tabindex=\"0\"\r\n                    (keydown)=\"invokeClick($event)\"\r\n                    (click)=\"enterExpressionAdd(expressionItem)\"\r\n                    *ngIf=\"\r\n                        !expressionItem.inAddMode &&\r\n                        (expressionItem.parent !== currentGroup ||\r\n                            expressionItem !==\r\n                                currentGroup.children[\r\n                                    currentGroup.children.length - 1\r\n                                ])\r\n                    \"\r\n                >\r\n                    add\r\n                </igx-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <div\r\n            *ngIf=\"expressionItem.inEditMode\"\r\n            #editingInputsContainer\r\n            class=\"igx-filter-tree__inputs\"\r\n        >\r\n            <igx-select\r\n                #fieldSelect\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n                [overlaySettings]=\"fieldSelectOverlaySettings\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_column_placeholder\r\n                \"\r\n                [(ngModel)]=\"selectedField\"\r\n            >\r\n                <igx-select-item *ngFor=\"let field of fields\" [value]=\"field\">\r\n                    {{ field.label || field.header || field.field }}\r\n                </igx-select-item>\r\n            </igx-select>\r\n\r\n            <igx-select\r\n                #conditionSelect\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n                [overlaySettings]=\"conditionSelectOverlaySettings\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_condition_placeholder\r\n                \"\r\n                [(ngModel)]=\"selectedCondition\"\r\n                [disabled]=\"!selectedField\"\r\n            >\r\n                <igx-prefix\r\n                    *ngIf=\"\r\n                        selectedField &&\r\n                        conditionSelect.value &&\r\n                        selectedField.filters.condition(conditionSelect.value)\r\n                    \"\r\n                >\r\n                    <igx-icon\r\n                        family=\"imx-icons\"\r\n                        [name]=\"\r\n                            selectedField.filters.condition(\r\n                                conditionSelect.value\r\n                            ).iconName\r\n                        \"\r\n                    >\r\n                    </igx-icon>\r\n                </igx-prefix>\r\n\r\n                <igx-select-item\r\n                    *ngFor=\"let condition of getConditionList()\"\r\n                    [value]=\"condition\"\r\n                    [text]=\"getConditionFriendlyName(condition)\"\r\n                >\r\n                    <div class=\"igx-grid__filtering-dropdown-items\">\r\n                        <igx-icon\r\n                            family=\"imx-icons\"\r\n                            [name]=\"\r\n                                selectedField.filters.condition(condition)\r\n                                    .iconName\r\n                            \"\r\n                        >\r\n                        </igx-icon>\r\n                        <span class=\"igx-grid__filtering-dropdown-text\">{{\r\n                            getConditionFriendlyName(condition)\r\n                        }}</span>\r\n                    </div>\r\n                </igx-select-item>\r\n            </igx-select>\r\n\r\n            <igx-input-group\r\n                *ngIf=\"\r\n                    !selectedField ||\r\n                    (selectedField.dataType !== 'date' &&\r\n                        selectedField.dataType !== 'time' &&\r\n                        selectedField.dataType !== 'dateTime')\r\n                \"\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n            >\r\n                <input\r\n                    #searchValueInput\r\n                    igxInput\r\n                    [disabled]=\"\r\n                        !selectedField ||\r\n                        !selectedCondition ||\r\n                        (selectedField &&\r\n                            selectedField.filters.condition(selectedCondition)\r\n                                .isUnary)\r\n                    \"\r\n                    [type]=\"\r\n                        selectedField && selectedField.dataType === 'number'\r\n                            ? 'number'\r\n                            : 'text'\r\n                    \"\r\n                    [placeholder]=\"\r\n                        this.resourceStrings.igx_query_builder_value_placeholder\r\n                    \"\r\n                    [(ngModel)]=\"searchValue\"\r\n                />\r\n            </igx-input-group>\r\n\r\n            <igx-date-picker\r\n                #picker\r\n                *ngIf=\"selectedField && selectedField.dataType === 'date'\"\r\n                [(value)]=\"searchValue\"\r\n                (keydown)=\"openPicker($event)\"\r\n                (click)=\"picker.open()\"\r\n                type=\"box\"\r\n                [readOnly]=\"true\"\r\n                [displayDensity]=\"'compact'\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_date_placeholder\r\n                \"\r\n                [disabled]=\"\r\n                    !selectedField ||\r\n                    !selectedCondition ||\r\n                    (selectedField &&\r\n                        selectedField.filters.condition(selectedCondition)\r\n                            .isUnary)\r\n                \"\r\n                [locale]=\"this.locale\"\r\n                [outlet]=\"pickerOutlet\"\r\n                [formatter]=\"selectedField.formatter\"\r\n                [displayFormat]=\"selectedField.pipeArgs.format\"\r\n                [weekStart]=\"selectedField.pipeArgs.weekStart\"\r\n            >\r\n                <!-- disable default icons -->\r\n                <igx-picker-toggle></igx-picker-toggle>\r\n                <igx-picker-clear></igx-picker-clear>\r\n            </igx-date-picker>\r\n\r\n            <igx-time-picker\r\n                #picker\r\n                *ngIf=\"selectedField && selectedField.dataType === 'time'\"\r\n                [(value)]=\"searchValue\"\r\n                (click)=\"picker.open()\"\r\n                (keydown)=\"openPicker($event)\"\r\n                [displayDensity]=\"'compact'\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_time_placeholder\r\n                \"\r\n                type=\"box\"\r\n                [readOnly]=\"true\"\r\n                [disabled]=\"\r\n                    !selectedField ||\r\n                    !selectedCondition ||\r\n                    (selectedField &&\r\n                        selectedField.filters.condition(selectedCondition)\r\n                            .isUnary)\r\n                \"\r\n                [locale]=\"this.locale\"\r\n                [outlet]=\"pickerOutlet\"\r\n                [formatter]=\"selectedField.formatter\"\r\n                [inputFormat]=\"selectedField.defaultTimeFormat\"\r\n            >\r\n                <!-- disable default icons -->\r\n                <igx-picker-toggle></igx-picker-toggle>\r\n                <igx-picker-clear></igx-picker-clear>\r\n            </igx-time-picker>\r\n\r\n            <igx-input-group\r\n                #inputGroup\r\n                type=\"box\"\r\n                *ngIf=\"selectedField && selectedField.dataType === 'dateTime'\"\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n            >\r\n                <input\r\n                    #input\r\n                    igxInput\r\n                    tabindex=\"0\"\r\n                    [placeholder]=\"\r\n                        this.resourceStrings.igx_query_builder_date_placeholder\r\n                    \"\r\n                    [(ngModel)]=\"searchValue\"\r\n                    [disabled]=\"\r\n                        !selectedField ||\r\n                        !selectedCondition ||\r\n                        (selectedField &&\r\n                            selectedField.filters.condition(selectedCondition)\r\n                                .isUnary)\r\n                    \"\r\n                    [igxDateTimeEditor]=\"selectedField.defaultDateTimeFormat\"\r\n                />\r\n            </igx-input-group>\r\n\r\n            <div class=\"igx-filter-tree__inputs-actions\">\r\n                <button\r\n                    igxButton=\"icon\"\r\n                    [displayDensity]=\"this.displayDensity\"\r\n                    [disabled]=\"!operandCanBeCommitted()\"\r\n                    (click)=\"commitOperandEdit()\"\r\n                >\r\n                    <igx-icon>check</igx-icon>\r\n                </button>\r\n                <button\r\n                    igxButton=\"icon\"\r\n                    [displayDensity]=\"this.displayDensity\"\r\n                    (click)=\"cancelOperandEdit()\"\r\n                >\r\n                    <igx-icon>close</igx-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div\r\n            *ngIf=\"expressionItem.inAddMode\"\r\n            #addModeContainer\r\n            class=\"igx-filter-tree__buttons\"\r\n        >\r\n            <ng-container\r\n                *ngTemplateOutlet=\"\r\n                    addExpressionsTemplate;\r\n                    context: context(expressionItem.parent, expressionItem)\r\n                \"\r\n            >\r\n            </ng-container>\r\n            <button\r\n                igxButton=\"icon\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"cancelOperandAdd()\"\r\n            >\r\n                <igx-icon>close</igx-icon>\r\n            </button>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #expressionTreeTemplate let-expressionItem>\r\n        <div class=\"igx-filter-tree\">\r\n            <div\r\n                tabindex=\"0\"\r\n                class=\"igx-filter-tree__line\"\r\n                [ngClass]=\"{\r\n                    'igx-filter-tree__line--and': expressionItem.operator === 0,\r\n                    'igx-filter-tree__line--or': expressionItem.operator === 1,\r\n                    'igx-filter-tree__line--selected': expressionItem.selected\r\n                }\"\r\n                (keydown)=\"invokeClick($event)\"\r\n                (click)=\"onGroupClick(expressionItem)\"\r\n            ></div>\r\n\r\n            <div class=\"igx-filter-tree__expression\">\r\n                <ng-container *ngFor=\"let expr of expressionItem.children\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                            isExpressionGroup(expr)\r\n                                ? expressionTreeTemplate\r\n                                : filterOperandTemplate;\r\n                            context: context(expr)\r\n                        \"\r\n                    >\r\n                    </ng-container>\r\n                </ng-container>\r\n                <div\r\n                    *ngIf=\"currentGroup === expressionItem\"\r\n                    #currentGroupButtonsContainer\r\n                    class=\"igx-filter-tree__buttons\"\r\n                >\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                            addExpressionsTemplate;\r\n                            context: context(expressionItem)\r\n                        \"\r\n                    >\r\n                    </ng-container>\r\n                    <button\r\n                        igxButton=\"outlined\"\r\n                        *ngIf=\"expressionItem !== rootGroup\"\r\n                        [displayDensity]=\"this.displayDensity\"\r\n                        [disabled]=\"\r\n                            hasEditedExpression ||\r\n                            expressionItem.children.length < 2\r\n                        \"\r\n                        (click)=\"endGroup(expressionItem)\"\r\n                    >\r\n                        <span>{{\r\n                            this.resourceStrings.igx_query_builder_end_group\r\n                        }}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"rootGroup\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                expressionTreeTemplate;\r\n                context: context(rootGroup)\r\n            \"\r\n        ></ng-container>\r\n    </ng-container>\r\n\r\n    <div\r\n        igxToggle\r\n        class=\"igx-filter-contextual-menu\"\r\n        (keydown)=\"onKeyDown($event)\"\r\n        (closed)=\"contextMenuClosed()\"\r\n        [ngClass]=\"{\r\n            'igx-filter-contextual-menu--cosy': displayDensity === 'cosy',\r\n            'igx-filter-contextual-menu--compact': displayDensity === 'compact'\r\n        }\"\r\n    >\r\n        <button\r\n            igxButton=\"icon\"\r\n            class=\"igx-filter-contextual-menu__close-btn\"\r\n            (click)=\"clearSelection()\"\r\n        >\r\n            <igx-icon>close</igx-icon>\r\n        </button>\r\n\r\n        <ng-container *ngIf=\"contextualGroup\">\r\n            <igx-buttongroup\r\n                [displayDensity]=\"this.displayDensity\"\r\n                [multiSelection]=\"false\"\r\n                [values]=\"filteringLogics\"\r\n                type=\"outline\"\r\n                (selected)=\"selectFilteringLogic($event)\"\r\n            >\r\n            </igx-buttongroup>\r\n\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                [disabled]=\"!contextualGroup.parent\"\r\n                (click)=\"ungroup()\"\r\n            >\r\n                <igx-icon family=\"imx-icons\" name=\"ungroup\"></igx-icon>\r\n                <span>{{\r\n                    this.resourceStrings.igx_query_builder_ungroup\r\n                }}</span>\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"deleteGroup()\"\r\n                class=\"igx-filter-contextual-menu__delete-btn\"\r\n            >\r\n                <igx-icon>delete</igx-icon>\r\n                <span>{{ this.resourceStrings.igx_query_builder_delete }}</span>\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!contextualGroup\">\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"createAndGroup()\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_create_and_group }}\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"createOrGroup()\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_create_or_group }}\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"deleteFilters()\"\r\n                class=\"igx-filter-contextual-menu__delete-btn\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_delete_filters }}\r\n            </button>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<div\r\n    #overlayOutlet\r\n    igxOverlayOutlet\r\n    class=\"igx-query-builder__outlet\"\r\n    (pointerdown)=\"onOutletPointerDown($event)\"\r\n></div>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxQueryBuilderHeaderComponent, selector: "igx-query-builder-header", inputs: ["title", "showLegend", "resourceStrings"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "component", type: IgxChipComponent, selector: "igx-chip", inputs: ["variant", "id", "tabIndex", "data", "draggable", "animateOnRelease", "hideBaseOnDrag", "removable", "removeIcon", "selectable", "selectIcon", "class", "disabled", "selected", "color", "resourceStrings"], outputs: ["selectedChange", "moveStart", "moveEnd", "remove", "chipClick", "selectedChanging", "selectedChanged", "keyDown", "dragEnter", "dragLeave", "dragOver", "dragDrop"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "component", type: IgxSelectComponent, selector: "igx-select", inputs: ["placeholder", "disabled", "overlaySettings", "value", "type"], outputs: ["opening", "opened", "closing", "closed"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxSelectItemComponent, selector: "igx-select-item", inputs: ["text"] }, { kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "component", type: IgxDatePickerComponent, selector: "igx-date-picker", inputs: ["hideOutsideDays", "displayMonthsCount", "showWeekNumbers", "formatter", "headerOrientation", "todayButtonLabel", "cancelButtonLabel", "spinLoop", "spinDelta", "outlet", "id", "formatViews", "disabledDates", "specialDates", "calendarFormat", "value", "minValue", "maxValue", "resourceStrings", "readOnly"], outputs: ["valueChange", "validationFailed"] }, { kind: "component", type: IgxPickerToggleComponent, selector: "igx-picker-toggle", outputs: ["clicked"] }, { kind: "component", type: IgxPickerClearComponent, selector: "igx-picker-clear" }, { kind: "component", type: IgxTimePickerComponent, selector: "igx-time-picker", inputs: ["id", "displayFormat", "inputFormat", "mode", "minValue", "maxValue", "spinLoop", "formatter", "headerOrientation", "readOnly", "value", "resourceStrings", "okButtonLabel", "cancelButtonLabel", "itemsDelta"], outputs: ["selected", "valueChange", "validationFailed"] }, { kind: "directive", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: ["locale", "minValue", "maxValue", "spinLoop", "displayFormat", "igxDateTimeEditor", "value", "spinDelta"], outputs: ["valueChange", "validationFailed"], exportAs: ["igxDateTimeEditor"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "component", type: IgxButtonGroupComponent, selector: "igx-buttongroup", inputs: ["id", "itemContentCssClass", "multiSelection", "values", "disabled", "alignment"], outputs: ["selected", "deselected"] }, { kind: "directive", type: IgxOverlayOutletDirective, selector: "[igxOverlayOutlet]", exportAs: ["overlay-outlet"] }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "pipe", type: IgxFieldFormatterPipe, name: "fieldFormatter" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxQueryBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-query-builder', standalone: true, imports: [NgIf, IgxQueryBuilderHeaderComponent, IgxButtonDirective, IgxIconComponent, IgxChipComponent, IgxPrefixDirective, IgxSuffixDirective, IgxSelectComponent, FormsModule, NgFor, IgxSelectItemComponent, IgxInputGroupComponent, IgxInputDirective, IgxDatePickerComponent, IgxPickerToggleComponent, IgxPickerClearComponent, IgxTimePickerComponent, IgxDateTimeEditorDirective, NgTemplateOutlet, NgClass, IgxToggleDirective, IgxButtonGroupComponent, IgxOverlayOutletDirective, DatePipe, IgxFieldFormatterPipe], template: "<igx-query-builder-header\r\n    *ngIf=\"!headerContent\"\r\n    [title]=\"this.resourceStrings.igx_query_builder_title\"\r\n>\r\n</igx-query-builder-header>\r\n\r\n<ng-content select=\"igx-query-builder-header\"></ng-content>\r\n\r\n<div\r\n    #expressionsContainer\r\n    class=\"igx-query-builder__main\"\r\n    (scroll)=\"onExpressionsScrolled()\"\r\n>\r\n    <ng-container *ngIf=\"!rootGroup\">\r\n        <button\r\n            #addRootAndGroupButton\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            (click)=\"addAndGroup()\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_and_group }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            (click)=\"addOrGroup()\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_or_group }}</span>\r\n        </button>\r\n\r\n        <div class=\"igx-filter-empty\">\r\n            <h6 class=\"igx-filter-empty__title\">\r\n                {{ this.resourceStrings.igx_query_builder_initial_text }}\r\n            </h6>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <ng-template\r\n        #addExpressionsTemplate\r\n        let-expressionItem\r\n        let-afterExpression=\"afterExpression\"\r\n    >\r\n        <button\r\n            #addConditionButton\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addCondition(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{\r\n                this.resourceStrings.igx_query_builder_add_condition\r\n            }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addAndGroup(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_and_group }}</span>\r\n        </button>\r\n\r\n        <button\r\n            igxButton=\"outlined\"\r\n            [displayDensity]=\"this.displayDensity\"\r\n            [disabled]=\"hasEditedExpression\"\r\n            (click)=\"addOrGroup(expressionItem, afterExpression)\"\r\n        >\r\n            <igx-icon>add</igx-icon>\r\n            <span>{{ this.resourceStrings.igx_query_builder_or_group }}</span>\r\n        </button>\r\n    </ng-template>\r\n\r\n    <ng-template #filterOperandTemplate let-expressionItem>\r\n        <div\r\n            *ngIf=\"!expressionItem.inEditMode\"\r\n            class=\"igx-filter-tree__expression-item\"\r\n            (mouseenter)=\"expressionItem.hovered = true\"\r\n            (mouseleave)=\"expressionItem.hovered = false\"\r\n        >\r\n            <igx-chip\r\n                [data]=\"expressionItem\"\r\n                [displayDensity]=\"\r\n                    displayDensity === 'compact' ? 'cosy' : displayDensity\r\n                \"\r\n                [removable]=\"true\"\r\n                [selected]=\"expressionItem.selected\"\r\n                (keydown)=\"invokeClick($event)\"\r\n                (click)=\"onChipClick(expressionItem)\"\r\n                (dblclick)=\"onChipDblClick(expressionItem)\"\r\n                (remove)=\"onChipRemove(expressionItem)\"\r\n                (selectedChanged)=\"onChipSelectionEnd()\"\r\n            >\r\n                <span igxPrefix class=\"igx-filter-tree__expression-column\">{{\r\n                    expressionItem.fieldLabel ||\r\n                        expressionItem.expression.fieldName\r\n                }}</span>\r\n                <igx-prefix>\r\n                    <igx-icon\r\n                        family=\"imx-icons\"\r\n                        [name]=\"expressionItem.expression.condition.iconName\"\r\n                    >\r\n                    </igx-icon>\r\n                </igx-prefix>\r\n                <span class=\"igx-filter-tree__expression-condition\">\r\n                    {{\r\n                        getConditionFriendlyName(\r\n                            expressionItem.expression.condition.name\r\n                        )\r\n                    }}\r\n                </span>\r\n                <span\r\n                    igxSuffix\r\n                    *ngIf=\"!expressionItem.expression.condition.isUnary\"\r\n                >\r\n                    {{\r\n                        isDate(expressionItem.expression.searchVal)\r\n                            ? getFormatter(expressionItem.expression.fieldName)\r\n                                ? (expressionItem.expression.searchVal\r\n                                  | fieldFormatter\r\n                                      : getFormatter(\r\n                                            expressionItem.expression.fieldName\r\n                                        )\r\n                                      : undefined)\r\n                                : (expressionItem.expression.searchVal\r\n                                  | date\r\n                                      : getFormat(\r\n                                            expressionItem.expression.fieldName\r\n                                        )\r\n                                      : undefined\r\n                                      : this.locale)\r\n                            : expressionItem.expression.searchVal\r\n                    }}\r\n                </span>\r\n            </igx-chip>\r\n            <div\r\n                class=\"igx-filter-tree__expression-actions\"\r\n                *ngIf=\"\r\n                    (expressionItem.selected &&\r\n                        selectedExpressions.length === 1) ||\r\n                    expressionItem.hovered\r\n                \"\r\n            >\r\n                <igx-icon\r\n                    tabindex=\"0\"\r\n                    (keydown)=\"invokeClick($event)\"\r\n                    (click)=\"enterExpressionEdit(expressionItem)\"\r\n                >\r\n                    edit\r\n                </igx-icon>\r\n                <igx-icon\r\n                    tabindex=\"0\"\r\n                    (keydown)=\"invokeClick($event)\"\r\n                    (click)=\"enterExpressionAdd(expressionItem)\"\r\n                    *ngIf=\"\r\n                        !expressionItem.inAddMode &&\r\n                        (expressionItem.parent !== currentGroup ||\r\n                            expressionItem !==\r\n                                currentGroup.children[\r\n                                    currentGroup.children.length - 1\r\n                                ])\r\n                    \"\r\n                >\r\n                    add\r\n                </igx-icon>\r\n            </div>\r\n        </div>\r\n\r\n        <div\r\n            *ngIf=\"expressionItem.inEditMode\"\r\n            #editingInputsContainer\r\n            class=\"igx-filter-tree__inputs\"\r\n        >\r\n            <igx-select\r\n                #fieldSelect\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n                [overlaySettings]=\"fieldSelectOverlaySettings\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_column_placeholder\r\n                \"\r\n                [(ngModel)]=\"selectedField\"\r\n            >\r\n                <igx-select-item *ngFor=\"let field of fields\" [value]=\"field\">\r\n                    {{ field.label || field.header || field.field }}\r\n                </igx-select-item>\r\n            </igx-select>\r\n\r\n            <igx-select\r\n                #conditionSelect\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n                [overlaySettings]=\"conditionSelectOverlaySettings\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_condition_placeholder\r\n                \"\r\n                [(ngModel)]=\"selectedCondition\"\r\n                [disabled]=\"!selectedField\"\r\n            >\r\n                <igx-prefix\r\n                    *ngIf=\"\r\n                        selectedField &&\r\n                        conditionSelect.value &&\r\n                        selectedField.filters.condition(conditionSelect.value)\r\n                    \"\r\n                >\r\n                    <igx-icon\r\n                        family=\"imx-icons\"\r\n                        [name]=\"\r\n                            selectedField.filters.condition(\r\n                                conditionSelect.value\r\n                            ).iconName\r\n                        \"\r\n                    >\r\n                    </igx-icon>\r\n                </igx-prefix>\r\n\r\n                <igx-select-item\r\n                    *ngFor=\"let condition of getConditionList()\"\r\n                    [value]=\"condition\"\r\n                    [text]=\"getConditionFriendlyName(condition)\"\r\n                >\r\n                    <div class=\"igx-grid__filtering-dropdown-items\">\r\n                        <igx-icon\r\n                            family=\"imx-icons\"\r\n                            [name]=\"\r\n                                selectedField.filters.condition(condition)\r\n                                    .iconName\r\n                            \"\r\n                        >\r\n                        </igx-icon>\r\n                        <span class=\"igx-grid__filtering-dropdown-text\">{{\r\n                            getConditionFriendlyName(condition)\r\n                        }}</span>\r\n                    </div>\r\n                </igx-select-item>\r\n            </igx-select>\r\n\r\n            <igx-input-group\r\n                *ngIf=\"\r\n                    !selectedField ||\r\n                    (selectedField.dataType !== 'date' &&\r\n                        selectedField.dataType !== 'time' &&\r\n                        selectedField.dataType !== 'dateTime')\r\n                \"\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n            >\r\n                <input\r\n                    #searchValueInput\r\n                    igxInput\r\n                    [disabled]=\"\r\n                        !selectedField ||\r\n                        !selectedCondition ||\r\n                        (selectedField &&\r\n                            selectedField.filters.condition(selectedCondition)\r\n                                .isUnary)\r\n                    \"\r\n                    [type]=\"\r\n                        selectedField && selectedField.dataType === 'number'\r\n                            ? 'number'\r\n                            : 'text'\r\n                    \"\r\n                    [placeholder]=\"\r\n                        this.resourceStrings.igx_query_builder_value_placeholder\r\n                    \"\r\n                    [(ngModel)]=\"searchValue\"\r\n                />\r\n            </igx-input-group>\r\n\r\n            <igx-date-picker\r\n                #picker\r\n                *ngIf=\"selectedField && selectedField.dataType === 'date'\"\r\n                [(value)]=\"searchValue\"\r\n                (keydown)=\"openPicker($event)\"\r\n                (click)=\"picker.open()\"\r\n                type=\"box\"\r\n                [readOnly]=\"true\"\r\n                [displayDensity]=\"'compact'\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_date_placeholder\r\n                \"\r\n                [disabled]=\"\r\n                    !selectedField ||\r\n                    !selectedCondition ||\r\n                    (selectedField &&\r\n                        selectedField.filters.condition(selectedCondition)\r\n                            .isUnary)\r\n                \"\r\n                [locale]=\"this.locale\"\r\n                [outlet]=\"pickerOutlet\"\r\n                [formatter]=\"selectedField.formatter\"\r\n                [displayFormat]=\"selectedField.pipeArgs.format\"\r\n                [weekStart]=\"selectedField.pipeArgs.weekStart\"\r\n            >\r\n                <!-- disable default icons -->\r\n                <igx-picker-toggle></igx-picker-toggle>\r\n                <igx-picker-clear></igx-picker-clear>\r\n            </igx-date-picker>\r\n\r\n            <igx-time-picker\r\n                #picker\r\n                *ngIf=\"selectedField && selectedField.dataType === 'time'\"\r\n                [(value)]=\"searchValue\"\r\n                (click)=\"picker.open()\"\r\n                (keydown)=\"openPicker($event)\"\r\n                [displayDensity]=\"'compact'\"\r\n                [placeholder]=\"\r\n                    this.resourceStrings.igx_query_builder_time_placeholder\r\n                \"\r\n                type=\"box\"\r\n                [readOnly]=\"true\"\r\n                [disabled]=\"\r\n                    !selectedField ||\r\n                    !selectedCondition ||\r\n                    (selectedField &&\r\n                        selectedField.filters.condition(selectedCondition)\r\n                            .isUnary)\r\n                \"\r\n                [locale]=\"this.locale\"\r\n                [outlet]=\"pickerOutlet\"\r\n                [formatter]=\"selectedField.formatter\"\r\n                [inputFormat]=\"selectedField.defaultTimeFormat\"\r\n            >\r\n                <!-- disable default icons -->\r\n                <igx-picker-toggle></igx-picker-toggle>\r\n                <igx-picker-clear></igx-picker-clear>\r\n            </igx-time-picker>\r\n\r\n            <igx-input-group\r\n                #inputGroup\r\n                type=\"box\"\r\n                *ngIf=\"selectedField && selectedField.dataType === 'dateTime'\"\r\n                type=\"box\"\r\n                [displayDensity]=\"'compact'\"\r\n            >\r\n                <input\r\n                    #input\r\n                    igxInput\r\n                    tabindex=\"0\"\r\n                    [placeholder]=\"\r\n                        this.resourceStrings.igx_query_builder_date_placeholder\r\n                    \"\r\n                    [(ngModel)]=\"searchValue\"\r\n                    [disabled]=\"\r\n                        !selectedField ||\r\n                        !selectedCondition ||\r\n                        (selectedField &&\r\n                            selectedField.filters.condition(selectedCondition)\r\n                                .isUnary)\r\n                    \"\r\n                    [igxDateTimeEditor]=\"selectedField.defaultDateTimeFormat\"\r\n                />\r\n            </igx-input-group>\r\n\r\n            <div class=\"igx-filter-tree__inputs-actions\">\r\n                <button\r\n                    igxButton=\"icon\"\r\n                    [displayDensity]=\"this.displayDensity\"\r\n                    [disabled]=\"!operandCanBeCommitted()\"\r\n                    (click)=\"commitOperandEdit()\"\r\n                >\r\n                    <igx-icon>check</igx-icon>\r\n                </button>\r\n                <button\r\n                    igxButton=\"icon\"\r\n                    [displayDensity]=\"this.displayDensity\"\r\n                    (click)=\"cancelOperandEdit()\"\r\n                >\r\n                    <igx-icon>close</igx-icon>\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n        <div\r\n            *ngIf=\"expressionItem.inAddMode\"\r\n            #addModeContainer\r\n            class=\"igx-filter-tree__buttons\"\r\n        >\r\n            <ng-container\r\n                *ngTemplateOutlet=\"\r\n                    addExpressionsTemplate;\r\n                    context: context(expressionItem.parent, expressionItem)\r\n                \"\r\n            >\r\n            </ng-container>\r\n            <button\r\n                igxButton=\"icon\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"cancelOperandAdd()\"\r\n            >\r\n                <igx-icon>close</igx-icon>\r\n            </button>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-template #expressionTreeTemplate let-expressionItem>\r\n        <div class=\"igx-filter-tree\">\r\n            <div\r\n                tabindex=\"0\"\r\n                class=\"igx-filter-tree__line\"\r\n                [ngClass]=\"{\r\n                    'igx-filter-tree__line--and': expressionItem.operator === 0,\r\n                    'igx-filter-tree__line--or': expressionItem.operator === 1,\r\n                    'igx-filter-tree__line--selected': expressionItem.selected\r\n                }\"\r\n                (keydown)=\"invokeClick($event)\"\r\n                (click)=\"onGroupClick(expressionItem)\"\r\n            ></div>\r\n\r\n            <div class=\"igx-filter-tree__expression\">\r\n                <ng-container *ngFor=\"let expr of expressionItem.children\">\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                            isExpressionGroup(expr)\r\n                                ? expressionTreeTemplate\r\n                                : filterOperandTemplate;\r\n                            context: context(expr)\r\n                        \"\r\n                    >\r\n                    </ng-container>\r\n                </ng-container>\r\n                <div\r\n                    *ngIf=\"currentGroup === expressionItem\"\r\n                    #currentGroupButtonsContainer\r\n                    class=\"igx-filter-tree__buttons\"\r\n                >\r\n                    <ng-container\r\n                        *ngTemplateOutlet=\"\r\n                            addExpressionsTemplate;\r\n                            context: context(expressionItem)\r\n                        \"\r\n                    >\r\n                    </ng-container>\r\n                    <button\r\n                        igxButton=\"outlined\"\r\n                        *ngIf=\"expressionItem !== rootGroup\"\r\n                        [displayDensity]=\"this.displayDensity\"\r\n                        [disabled]=\"\r\n                            hasEditedExpression ||\r\n                            expressionItem.children.length < 2\r\n                        \"\r\n                        (click)=\"endGroup(expressionItem)\"\r\n                    >\r\n                        <span>{{\r\n                            this.resourceStrings.igx_query_builder_end_group\r\n                        }}</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"rootGroup\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"\r\n                expressionTreeTemplate;\r\n                context: context(rootGroup)\r\n            \"\r\n        ></ng-container>\r\n    </ng-container>\r\n\r\n    <div\r\n        igxToggle\r\n        class=\"igx-filter-contextual-menu\"\r\n        (keydown)=\"onKeyDown($event)\"\r\n        (closed)=\"contextMenuClosed()\"\r\n        [ngClass]=\"{\r\n            'igx-filter-contextual-menu--cosy': displayDensity === 'cosy',\r\n            'igx-filter-contextual-menu--compact': displayDensity === 'compact'\r\n        }\"\r\n    >\r\n        <button\r\n            igxButton=\"icon\"\r\n            class=\"igx-filter-contextual-menu__close-btn\"\r\n            (click)=\"clearSelection()\"\r\n        >\r\n            <igx-icon>close</igx-icon>\r\n        </button>\r\n\r\n        <ng-container *ngIf=\"contextualGroup\">\r\n            <igx-buttongroup\r\n                [displayDensity]=\"this.displayDensity\"\r\n                [multiSelection]=\"false\"\r\n                [values]=\"filteringLogics\"\r\n                type=\"outline\"\r\n                (selected)=\"selectFilteringLogic($event)\"\r\n            >\r\n            </igx-buttongroup>\r\n\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                [disabled]=\"!contextualGroup.parent\"\r\n                (click)=\"ungroup()\"\r\n            >\r\n                <igx-icon family=\"imx-icons\" name=\"ungroup\"></igx-icon>\r\n                <span>{{\r\n                    this.resourceStrings.igx_query_builder_ungroup\r\n                }}</span>\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"deleteGroup()\"\r\n                class=\"igx-filter-contextual-menu__delete-btn\"\r\n            >\r\n                <igx-icon>delete</igx-icon>\r\n                <span>{{ this.resourceStrings.igx_query_builder_delete }}</span>\r\n            </button>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!contextualGroup\">\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"createAndGroup()\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_create_and_group }}\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"createOrGroup()\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_create_or_group }}\r\n            </button>\r\n            <button\r\n                igxButton=\"outlined\"\r\n                [displayDensity]=\"this.displayDensity\"\r\n                (click)=\"deleteFilters()\"\r\n                class=\"igx-filter-contextual-menu__delete-btn\"\r\n            >\r\n                {{ this.resourceStrings.igx_query_builder_delete_filters }}\r\n            </button>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<div\r\n    #overlayOutlet\r\n    igxOverlayOutlet\r\n    class=\"igx-query-builder__outlet\"\r\n    (pointerdown)=\"onOutletPointerDown($event)\"\r\n></div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1.IgxIconService }, { type: i2.PlatformUtil }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }]; }, propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-query-builder']
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], fields: [{
                type: Input
            }], expressionTree: [{
                type: Input
            }], locale: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }], expressionTreeChange: [{
                type: Output
            }], fieldSelect: [{
                type: ViewChild,
                args: ['fieldSelect', { read: IgxSelectComponent }]
            }], conditionSelect: [{
                type: ViewChild,
                args: ['conditionSelect', { read: IgxSelectComponent }]
            }], searchValueInput: [{
                type: ViewChild,
                args: ['searchValueInput', { read: ElementRef }]
            }], picker: [{
                type: ViewChild,
                args: ['picker']
            }], addRootAndGroupButton: [{
                type: ViewChild,
                args: ['addRootAndGroupButton', { read: ElementRef }]
            }], addConditionButton: [{
                type: ViewChild,
                args: ['addConditionButton', { read: ElementRef }]
            }], headerContent: [{
                type: ContentChild,
                args: [IgxQueryBuilderHeaderComponent]
            }], editingInputsContainer: [{
                type: ViewChild,
                args: ['editingInputsContainer', { read: ElementRef }]
            }], addModeContainer: [{
                type: ViewChild,
                args: ['addModeContainer', { read: ElementRef }]
            }], currentGroupButtonsContainer: [{
                type: ViewChild,
                args: ['currentGroupButtonsContainer', { read: ElementRef }]
            }], contextMenuToggle: [{
                type: ViewChild,
                args: [IgxToggleDirective]
            }], chips: [{
                type: ViewChildren,
                args: [IgxChipComponent]
            }], expressionsContainer: [{
                type: ViewChild,
                args: ['expressionsContainer']
            }], overlayOutlet: [{
                type: ViewChild,
                args: ['overlayOutlet', { read: IgxOverlayOutletDirective, static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,