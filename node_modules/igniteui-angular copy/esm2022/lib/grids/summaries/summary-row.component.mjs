import { Component, Input, ViewChildren, QueryList, HostBinding, ViewChild, ChangeDetectionStrategy, Inject } from '@angular/core';
import { IgxSummaryCellComponent } from './summary-cell.component';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxForOfSyncService } from '../../directives/for-of/for_of.sync.service';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridNotGroupedPipe } from '../common/pipes';
import { NgIf, NgTemplateOutlet, NgFor } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxSummaryRowComponent {
    get dataRowIndex() {
        return this.index;
    }
    get minHeight() {
        return this.grid.summaryRowHeight - 1;
    }
    get summaryCells() {
        const res = new QueryList();
        if (!this._summaryCells) {
            return res;
        }
        const cList = this._summaryCells.filter(c => c.nativeElement.isConnected);
        res.reset(cList);
        return res;
    }
    set summaryCells(cells) { }
    constructor(grid, element, cdr) {
        this.grid = grid;
        this.element = element;
        this.cdr = cdr;
        this.firstCellIndentation = -1;
    }
    ngDoCheck() {
        this.cdr.markForCheck();
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    getColumnSummaries(columnName) {
        if (!this.summaries.get(columnName)) {
            return [];
        }
        return this.summaries.get(columnName);
    }
    /**
     * @hidden
     * @internal
     */
    isCellActive(visibleColumnIndex) {
        const node = this.grid.navigation.activeNode;
        return node ? node.row === this.index && node.column === visibleColumnIndex : false;
    }
    /**
     * @hidden
     */
    get pinnedColumns() {
        return this.grid.pinnedColumns;
    }
    /**
     * @hidden
     */
    get unpinnedColumns() {
        return this.grid.unpinnedColumns;
    }
    getContext(row) {
        return {
            $implicit: row
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSummaryRowComponent, deps: [{ token: IGX_GRID_BASE }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxSummaryRowComponent, isStandalone: true, selector: "igx-grid-summary-row", inputs: { summaries: "summaries", gridID: "gridID", index: "index", firstCellIndentation: "firstCellIndentation" }, host: { properties: { "attr.data-rowIndex": "this.dataRowIndex" } }, providers: [IgxForOfSyncService], viewQueries: [{ propertyName: "virtDirRow", first: true, predicate: ["igxDirRef"], descendants: true, read: IgxGridForOfDirective }, { propertyName: "_summaryCells", predicate: IgxSummaryCellComponent, descendants: true, read: IgxSummaryCellComponent }], ngImport: i0, template: "<ng-container *ngIf=\"summaries.size\">\r\n    <ng-container *ngIf=\"grid.summariesMargin\">\r\n        <div\r\n        class=\"igx-grid__summaries-patch\"\r\n        [style.min-width.px]=\"grid.summariesMargin\"\r\n        [style.flex-basis.px]=\"grid.summariesMargin\"\r\n        (pointerdown)=\"$event.preventDefault()\"\r\n        ></div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\r\n    </ng-container>\r\n    <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForTrackBy]=\"grid.trackColumnChanges\" [igxForSizePropName]='\"calcPixelWidth\"' #igxDirRef>\r\n        <igx-grid-summary-cell\r\n            class=\"igx-grid-summary igx-grid-summary--fw\"\r\n            role=\"cell\"\r\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\r\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\r\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\r\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\r\n            [column]=\"col\"\r\n            [rowIndex]=\"index\"\r\n            [firstCellIndentation]=\"firstCellIndentation\"\r\n            [summaryResults]=\"getColumnSummaries(col.field)\"\r\n            [summaryTemplate]=\"col.summaryTemplate\"\r\n            [hasSummary]=\"col.hasSummary\"\r\n            [density]=\"grid.displayDensity\"\r\n            [summaryFormatter]=\"col.summaryFormatter\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [style.max-height.px]=\"minHeight\"\r\n            [style.min-height.px]=\"minHeight\"\r\n            [style.min-width]=\"col.getCellWidth()\"\r\n            [style.max-width]=\"col.getCellWidth()\"\r\n            [style.flex-basis]=\"col.getCellWidth()\">\r\n        </igx-grid-summary-cell>\r\n    </ng-template>\r\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\r\n    </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #summaryCellTemplate let-col>\r\n    <igx-grid-summary-cell *ngFor=\"let col of pinnedColumns | igxNotGrouped\"\r\n            role=\"cell\"\r\n            class=\"igx-grid-summary igx-grid-summary--fw igx-grid-summary--pinned\"\r\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\r\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\r\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\r\n            [class.igx-grid-summary--pinned-first]=\"col.isFirstPinned\"\r\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\r\n            [column]=\"col\"\r\n            [firstCellIndentation]=\"firstCellIndentation\"\r\n            [rowIndex]=\"index\"\r\n            [summaryResults]=\"getColumnSummaries(col.field)\"\r\n            [summaryTemplate]=\"col.summaryTemplate\"\r\n            [hasSummary]=\"col.hasSummary\"\r\n            [density]=\"grid.displayDensity\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [style.max-height.px]=\"minHeight\"\r\n            [style.min-height.px]=\"minHeight\"\r\n            [style.min-width]=\"col.getCellWidth()\"\r\n            [style.max-width]=\"col.getCellWidth()\"\r\n            [style.flex-basis]=\"col.getCellWidth()\"\r\n            [style.left]=\"col.rightPinnedOffset\">\r\n        </igx-grid-summary-cell>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "component", type: IgxSummaryCellComponent, selector: "igx-grid-summary-cell", inputs: ["summaryResults", "column", "firstCellIndentation", "hasSummary", "density", "summaryFormatter", "summaryTemplate", "active", "rowIndex"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: IgxGridNotGroupedPipe, name: "igxNotGrouped" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSummaryRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-grid-summary-row', providers: [IgxForOfSyncService], standalone: true, imports: [NgIf, NgTemplateOutlet, IgxGridForOfDirective, IgxSummaryCellComponent, NgFor, IgxGridNotGroupedPipe], template: "<ng-container *ngIf=\"summaries.size\">\r\n    <ng-container *ngIf=\"grid.summariesMargin\">\r\n        <div\r\n        class=\"igx-grid__summaries-patch\"\r\n        [style.min-width.px]=\"grid.summariesMargin\"\r\n        [style.flex-basis.px]=\"grid.summariesMargin\"\r\n        (pointerdown)=\"$event.preventDefault()\"\r\n        ></div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\r\n    </ng-container>\r\n    <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForTrackBy]=\"grid.trackColumnChanges\" [igxForSizePropName]='\"calcPixelWidth\"' #igxDirRef>\r\n        <igx-grid-summary-cell\r\n            class=\"igx-grid-summary igx-grid-summary--fw\"\r\n            role=\"cell\"\r\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\r\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\r\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\r\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\r\n            [column]=\"col\"\r\n            [rowIndex]=\"index\"\r\n            [firstCellIndentation]=\"firstCellIndentation\"\r\n            [summaryResults]=\"getColumnSummaries(col.field)\"\r\n            [summaryTemplate]=\"col.summaryTemplate\"\r\n            [hasSummary]=\"col.hasSummary\"\r\n            [density]=\"grid.displayDensity\"\r\n            [summaryFormatter]=\"col.summaryFormatter\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [style.max-height.px]=\"minHeight\"\r\n            [style.min-height.px]=\"minHeight\"\r\n            [style.min-width]=\"col.getCellWidth()\"\r\n            [style.max-width]=\"col.getCellWidth()\"\r\n            [style.flex-basis]=\"col.getCellWidth()\">\r\n        </igx-grid-summary-cell>\r\n    </ng-template>\r\n    <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n        <ng-container *ngTemplateOutlet=\"summaryCellTemplate; context: getContext(this)\"></ng-container>\r\n    </ng-container>\r\n</ng-container>\r\n\r\n<ng-template #summaryCellTemplate let-col>\r\n    <igx-grid-summary-cell *ngFor=\"let col of pinnedColumns | igxNotGrouped\"\r\n            role=\"cell\"\r\n            class=\"igx-grid-summary igx-grid-summary--fw igx-grid-summary--pinned\"\r\n            [class.igx-grid-summary--cosy]=\"grid.displayDensity === 'cosy'\"\r\n            [class.igx-grid-summary--compact]=\"grid.displayDensity === 'compact'\"\r\n            [class.igx-grid-summary--empty]=\"!col.hasSummary\"\r\n            [class.igx-grid-summary--pinned-first]=\"col.isFirstPinned\"\r\n            [class.igx-grid-summary--pinned-last]=\"col.isLastPinned\"\r\n            [column]=\"col\"\r\n            [firstCellIndentation]=\"firstCellIndentation\"\r\n            [rowIndex]=\"index\"\r\n            [summaryResults]=\"getColumnSummaries(col.field)\"\r\n            [summaryTemplate]=\"col.summaryTemplate\"\r\n            [hasSummary]=\"col.hasSummary\"\r\n            [density]=\"grid.displayDensity\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [style.max-height.px]=\"minHeight\"\r\n            [style.min-height.px]=\"minHeight\"\r\n            [style.min-width]=\"col.getCellWidth()\"\r\n            [style.max-width]=\"col.getCellWidth()\"\r\n            [style.flex-basis]=\"col.getCellWidth()\"\r\n            [style.left]=\"col.rightPinnedOffset\">\r\n        </igx-grid-summary-cell>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { summaries: [{
                type: Input
            }], gridID: [{
                type: Input
            }], index: [{
                type: Input
            }], firstCellIndentation: [{
                type: Input
            }], dataRowIndex: [{
                type: HostBinding,
                args: ['attr.data-rowIndex']
            }], _summaryCells: [{
                type: ViewChildren,
                args: [IgxSummaryCellComponent, { read: IgxSummaryCellComponent }]
            }], virtDirRow: [{
                type: ViewChild,
                args: ['igxDirRef', { read: IgxGridForOfDirective }]
            }] } });
//# sourceMappingURL=data:application/json;base64,