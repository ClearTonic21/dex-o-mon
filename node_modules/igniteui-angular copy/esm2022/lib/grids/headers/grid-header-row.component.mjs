import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, ViewChildren } from '@angular/core';
import { flatten } from '../../core/utils';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxGridFilteringRowComponent } from '../filtering/base/grid-filtering-row.component';
import { IgxGridHeaderGroupComponent } from './grid-header-group.component';
import { IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe } from './pipes';
import { IgxGridTopLevelColumns } from '../common/pipes';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { IgxColumnMovingDropDirective } from '../moving/moving.drop.directive';
import { NgIf, NgTemplateOutlet, NgClass, NgFor, NgStyle } from '@angular/common';
import * as i0 from "@angular/core";
/**
 *
 * For all intents & purposes treat this component as what a <thead> usually is in the default <table> element.
 *
 * This container holds the grid header elements and their behavior/interactions.
 *
 * @hidden @internal
 */
export class IgxGridHeaderRowComponent {
    /**
     * @hidden
     * @internal
     */
    get cosyStyle() {
        return this.density === 'cosy';
    }
    /**
     * @hidden
     * @internal
     */
    get compactStyle() {
        return this.density === 'compact';
    }
    /**
     * The flattened header groups collection.
     *
     * @hidden @internal
     */
    get groups() {
        return flatten(this._groups?.toArray() ?? []);
    }
    /** Header components in the header row. */
    get headers() {
        return this.groups.map(group => group.header);
    }
    /** Filtering cell components in the header row. */
    get filters() {
        return this.groups.map(group => group.filter);
    }
    get headerForOf() {
        return this.headerContainer;
    }
    get navigation() {
        return this.grid.navigation;
    }
    get nativeElement() {
        return this.ref.nativeElement;
    }
    /**
     * Returns whether the current grid instance is a hierarchical grid.
     * as only hierarchical grids have the `isHierarchicalRecord` method.
     *
     * @hidden @internal
     */
    get isHierarchicalGrid() {
        return !!this.grid.isHierarchicalRecord;
    }
    get indentationCSSClasses() {
        return `igx-grid__header-indentation igx-grid__row-indentation--level-${this.grid.groupingExpressions.length}`;
    }
    get rowSelectorsContext() {
        const ctx = {
            $implicit: {
                selectedCount: this.grid.selectionService.filteredSelectedRowIds.length,
                totalCount: this.grid.totalRowsCountAfterFilter
            }
        };
        if (this.isHierarchicalGrid) {
            ctx.$implicit.selectAll = () => this.grid.selectAllRows();
            ctx.$implicit.deselectAll = () => this.grid.deselectAllRows();
        }
        return ctx;
    }
    constructor(ref, cdr) {
        this.ref = ref;
        this.cdr = cdr;
        /** Pinned columns of the grid. */
        this.pinnedColumnCollection = [];
        /** Unpinned columns of the grid. */
        this.unpinnedColumnCollection = [];
    }
    /**
     * This hook exists as a workaround for the unfortunate fact
     * that when we have pinned columns in the grid, the unpinned columns headers
     * are affected by a delayed change detection cycle after a horizontal scroll :(
     * Thus, we tell the parent grid change detector to check us at each cycle.
     *
     * @hidden @internal
     */
    ngDoCheck() {
        this.cdr.markForCheck();
    }
    headerRowSelection(event) {
        if (!this.grid.isMultiRowSelectionEnabled) {
            return;
        }
        if (this.grid.selectionService.areAllRowSelected()) {
            this.grid.selectionService.clearRowSelection(event);
        }
        else {
            this.grid.selectionService.selectAllRows(event);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridHeaderRowComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxGridHeaderRowComponent, isStandalone: true, selector: "igx-grid-header-row", inputs: { grid: "grid", pinnedColumnCollection: "pinnedColumnCollection", unpinnedColumnCollection: "unpinnedColumnCollection", activeDescendant: "activeDescendant", hasMRL: "hasMRL", width: "width", density: "density" }, host: { properties: { "class.igx-grid-thead--cosy": "this.cosyStyle", "class.igx-grid-thead--compact": "this.compactStyle" } }, viewQueries: [{ propertyName: "headerContainer", first: true, predicate: ["headerVirtualContainer"], descendants: true, read: IgxGridForOfDirective, static: true }, { propertyName: "headerDragContainer", first: true, predicate: ["headerDragContainer"], descendants: true }, { propertyName: "headerSelectorContainer", first: true, predicate: ["headerSelectorContainer"], descendants: true }, { propertyName: "headerGroupContainer", first: true, predicate: ["headerGroupContainer"], descendants: true }, { propertyName: "headSelectorBaseTemplate", first: true, predicate: ["headSelectorBaseTemplate"], descendants: true }, { propertyName: "filterRow", first: true, predicate: IgxGridFilteringRowComponent, descendants: true }, { propertyName: "headerHierarchyExpander", first: true, predicate: ["headerHierarchyExpander"], descendants: true }, { propertyName: "_groups", predicate: IgxGridHeaderGroupComponent, descendants: true }], ngImport: i0, template: "<div role=\"rowgroup\" class=\"igx-grid-thead__wrapper\" [style.width.px]=\"width\"\r\n    [class.igx-grid__tr--mrl]=\"hasMRL\">\r\n\r\n    <!-- Column headers area -->\r\n    <div class=\"igx-grid__tr\" role=\"row\" [style.width.px]=\"width\">\r\n\r\n        <!-- Left column moving area -->\r\n        <ng-container *ngIf=\"grid.moving && grid.columnInDrag && pinnedColumnCollection.length <= 0\">\r\n            <span id=\"left\" class=\"igx-grid__scroll-on-drag-left\" droppable=\"true\" [style.left.px]=\"grid.pinnedWidth\"\r\n                [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"grid.moving && grid.columnInDrag && pinnedColumnCollection.length > 0\">\r\n            <span id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" droppable=\"true\" [style.left.px]=\"grid.pinnedWidth\"\r\n                [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n        </ng-container>\r\n\r\n        <!-- Row dragging area -->\r\n        <ng-container *ngIf=\"grid.rowDraggable\">\r\n            <div #headerDragContainer class=\"igx-grid__drag-indicator igx-grid__tr-action\" (pointerdown)=\"$event.preventDefault()\" [class.igx-grid__drag-indicator--header]=\"!grid.isRowSelectable\">\r\n                <div style=\"visibility: hidden;\">\r\n                    <ng-container *ngTemplateOutlet=\"grid.dragIndicatorIconTemplate || grid.dragIndicatorIconBase\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Row selectors area -->\r\n        <ng-container *ngIf=\"grid.showRowSelectors\">\r\n            <div #headerSelectorContainer class=\"igx-grid__cbx-selection igx-grid__tr-action\"\r\n                [class.igx-grid__cbx-selection--push]=\"grid.filteringService.isFilterRowVisible\"\r\n                (click)=\"headerRowSelection($event)\"\r\n                (pointerdown)=\"$event.preventDefault()\">\r\n                <ng-container #headSelector\r\n                    *ngTemplateOutlet=\"grid.headSelectorTemplate || headSelectorBaseTemplate; context: rowSelectorsContext\">\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Hierarchical grids expand all area -->\r\n        <ng-container *ngIf=\"isHierarchicalGrid\">\r\n            <div #headerHierarchyExpander\r\n                (click)=\"grid.toggleAll()\"\r\n                (pointerdown)=\"$event.preventDefault()\"\r\n                [hidden]=\"!grid.hasExpandableChildren || !grid.hasVisibleColumns\"\r\n                [ngClass]=\"{\r\n                    'igx-grid__hierarchical-expander igx-grid__hierarchical-expander--header igx-grid__tr-action': grid.hasExpandableChildren,\r\n                    'igx-grid__hierarchical-expander--push': grid.filteringService.isFilterRowVisible,\r\n                    'igx-grid__hierarchical-expander--no-border': grid.isRowSelectable || grid.rowDraggable\r\n                }\">\r\n                <ng-container *ngTemplateOutlet=\"grid.iconTemplate; context: { $implicit: grid }\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n\r\n        <!-- Grouping icon toggle area -->\r\n        <ng-container *ngIf=\"grid?.groupingExpressions?.length\">\r\n            <div #headerGroupContainer class=\"{{ indentationCSSClasses }}\"\r\n                (click)=\"grid.toggleAllGroupRows()\"\r\n                (pointerdown)=\"$event.preventDefault()\">\r\n                <ng-container *ngTemplateOutlet=\"grid.iconTemplate; context: { $implicit: grid }\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Pinned columns collection from the start -->\r\n        <ng-container *ngIf=\"pinnedColumnCollection.length && grid.isPinningToStart\">\r\n            <ng-container *ngFor=\"let column of pinnedColumnCollection | igxTopLevel\">\r\n                <igx-grid-header-group\r\n                    [ngClass]=\"column.headerGroupClasses\"\r\n                    [ngStyle]=\"column.headerGroupStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                    [column]=\"column\"\r\n                    [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\">\r\n                </igx-grid-header-group>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Unpinned columns collection -->\r\n        <ng-template igxGridFor #headerVirtualContainer let-column\r\n            [igxGridForOf]=\"unpinnedColumnCollection | igxTopLevel\"\r\n            [igxForScrollContainer]=\"grid.parentVirtDir\"\r\n            [igxForContainerSize]=\"grid.unpinnedWidth\"\r\n            [igxForTrackBy]=\"grid.trackColumnChanges\"\r\n            [igxForSizePropName]=\"'calcPixelWidth'\"\r\n            [igxForScrollOrientation]=\"'horizontal'\"\r\n        >\r\n            <igx-grid-header-group\r\n                [ngClass]=\"column.headerGroupClasses\"\r\n                [ngStyle]=\"column.headerGroupStyles |igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                [column]=\"column\"\r\n                [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\">\r\n            </igx-grid-header-group>\r\n        </ng-template>\r\n\r\n        <!-- Pinned columns collection at the end -->\r\n        <ng-container *ngIf=\"pinnedColumnCollection.length && !grid.isPinningToStart\">\r\n            <ng-container *ngFor=\"let column of pinnedColumnCollection | igxTopLevel\">\r\n                <igx-grid-header-group\r\n                    [ngClass]=\"column.headerGroupClasses\"\r\n                    [ngStyle]=\"column.headerGroupStyles |igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                    [column]=\"column\"\r\n                    [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.left]=\"column.rightPinnedOffset\">\r\n                </igx-grid-header-group>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <!-- Filter row area -->\r\n    <ng-container *ngIf=\"grid.filteringService.isFilterRowVisible\">\r\n        <igx-grid-filtering-row #filteringRow\r\n            [column]=\"grid.filteringService.filteredColumn\"\r\n            [style.width.px]=\"width\">\r\n        </igx-grid-filtering-row>\r\n    </ng-container>\r\n\r\n    <!-- Right column moving area -->\r\n    <ng-container *ngIf=\"grid.moving && grid.columnInDrag\">\r\n        <span id=\"right\" class=\"igx-grid__scroll-on-drag-right\" droppable=\"true\" [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n    </ng-container>\r\n</div>\r\n\r\n<!-- Header thumb area -->\r\n<div class=\"igx-grid-thead__thumb\" [hidden]=\"!grid.hasVerticalScroll()\" [style.width.px]=\"grid.scrollSize\"></div>\r\n\r\n<!-- Default row selection header checkbox template -->\r\n<ng-template #headSelectorBaseTemplate igxHeadSelector let-context>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [readonly]=\"true\"\r\n            [checked]=\"context.selectedCount > 0 && grid.selectionService.areAllRowSelected()\"\r\n            [disableRipple]=\"true\"\r\n            [ngStyle]=\"{'visibility': grid.isMultiRowSelectionEnabled? 'visible' : 'hidden' }\"\r\n            [indeterminate]=\"context.selectedCount > 0 && grid.selectionService.hasSomeRowSelected()\"\r\n            [aria-label]=\"grid.headSelectorBaseAriaLabel\"\r\n            #headerCheckbox>\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxColumnMovingDropDirective, selector: "[igxColumnMovingDrop]", inputs: ["igxColumnMovingDrop"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxGridHeaderGroupComponent, selector: "igx-grid-header-group", inputs: ["column"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "component", type: IgxGridFilteringRowComponent, selector: "igx-grid-filtering-row", inputs: ["column", "value"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "pipe", type: IgxGridTopLevelColumns, name: "igxTopLevel" }, { kind: "pipe", type: IgxHeaderGroupWidthPipe, name: "igxHeaderGroupWidth" }, { kind: "pipe", type: IgxHeaderGroupStylePipe, name: "igxHeaderGroupStyle" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridHeaderRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-grid-header-row', standalone: true, imports: [NgIf, IgxColumnMovingDropDirective, NgTemplateOutlet, NgClass, NgFor, IgxGridHeaderGroupComponent, NgStyle, IgxGridForOfDirective, IgxGridFilteringRowComponent, IgxCheckboxComponent, IgxGridTopLevelColumns, IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe], template: "<div role=\"rowgroup\" class=\"igx-grid-thead__wrapper\" [style.width.px]=\"width\"\r\n    [class.igx-grid__tr--mrl]=\"hasMRL\">\r\n\r\n    <!-- Column headers area -->\r\n    <div class=\"igx-grid__tr\" role=\"row\" [style.width.px]=\"width\">\r\n\r\n        <!-- Left column moving area -->\r\n        <ng-container *ngIf=\"grid.moving && grid.columnInDrag && pinnedColumnCollection.length <= 0\">\r\n            <span id=\"left\" class=\"igx-grid__scroll-on-drag-left\" droppable=\"true\" [style.left.px]=\"grid.pinnedWidth\"\r\n                [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"grid.moving && grid.columnInDrag && pinnedColumnCollection.length > 0\">\r\n            <span id=\"left\" class=\"igx-grid__scroll-on-drag-pinned\" droppable=\"true\" [style.left.px]=\"grid.pinnedWidth\"\r\n                [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n        </ng-container>\r\n\r\n        <!-- Row dragging area -->\r\n        <ng-container *ngIf=\"grid.rowDraggable\">\r\n            <div #headerDragContainer class=\"igx-grid__drag-indicator igx-grid__tr-action\" (pointerdown)=\"$event.preventDefault()\" [class.igx-grid__drag-indicator--header]=\"!grid.isRowSelectable\">\r\n                <div style=\"visibility: hidden;\">\r\n                    <ng-container *ngTemplateOutlet=\"grid.dragIndicatorIconTemplate || grid.dragIndicatorIconBase\"></ng-container>\r\n                </div>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Row selectors area -->\r\n        <ng-container *ngIf=\"grid.showRowSelectors\">\r\n            <div #headerSelectorContainer class=\"igx-grid__cbx-selection igx-grid__tr-action\"\r\n                [class.igx-grid__cbx-selection--push]=\"grid.filteringService.isFilterRowVisible\"\r\n                (click)=\"headerRowSelection($event)\"\r\n                (pointerdown)=\"$event.preventDefault()\">\r\n                <ng-container #headSelector\r\n                    *ngTemplateOutlet=\"grid.headSelectorTemplate || headSelectorBaseTemplate; context: rowSelectorsContext\">\r\n                </ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Hierarchical grids expand all area -->\r\n        <ng-container *ngIf=\"isHierarchicalGrid\">\r\n            <div #headerHierarchyExpander\r\n                (click)=\"grid.toggleAll()\"\r\n                (pointerdown)=\"$event.preventDefault()\"\r\n                [hidden]=\"!grid.hasExpandableChildren || !grid.hasVisibleColumns\"\r\n                [ngClass]=\"{\r\n                    'igx-grid__hierarchical-expander igx-grid__hierarchical-expander--header igx-grid__tr-action': grid.hasExpandableChildren,\r\n                    'igx-grid__hierarchical-expander--push': grid.filteringService.isFilterRowVisible,\r\n                    'igx-grid__hierarchical-expander--no-border': grid.isRowSelectable || grid.rowDraggable\r\n                }\">\r\n                <ng-container *ngTemplateOutlet=\"grid.iconTemplate; context: { $implicit: grid }\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n\r\n        <!-- Grouping icon toggle area -->\r\n        <ng-container *ngIf=\"grid?.groupingExpressions?.length\">\r\n            <div #headerGroupContainer class=\"{{ indentationCSSClasses }}\"\r\n                (click)=\"grid.toggleAllGroupRows()\"\r\n                (pointerdown)=\"$event.preventDefault()\">\r\n                <ng-container *ngTemplateOutlet=\"grid.iconTemplate; context: { $implicit: grid }\"></ng-container>\r\n            </div>\r\n        </ng-container>\r\n\r\n        <!-- Pinned columns collection from the start -->\r\n        <ng-container *ngIf=\"pinnedColumnCollection.length && grid.isPinningToStart\">\r\n            <ng-container *ngFor=\"let column of pinnedColumnCollection | igxTopLevel\">\r\n                <igx-grid-header-group\r\n                    [ngClass]=\"column.headerGroupClasses\"\r\n                    [ngStyle]=\"column.headerGroupStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                    [column]=\"column\"\r\n                    [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\">\r\n                </igx-grid-header-group>\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n        <!-- Unpinned columns collection -->\r\n        <ng-template igxGridFor #headerVirtualContainer let-column\r\n            [igxGridForOf]=\"unpinnedColumnCollection | igxTopLevel\"\r\n            [igxForScrollContainer]=\"grid.parentVirtDir\"\r\n            [igxForContainerSize]=\"grid.unpinnedWidth\"\r\n            [igxForTrackBy]=\"grid.trackColumnChanges\"\r\n            [igxForSizePropName]=\"'calcPixelWidth'\"\r\n            [igxForScrollOrientation]=\"'horizontal'\"\r\n        >\r\n            <igx-grid-header-group\r\n                [ngClass]=\"column.headerGroupClasses\"\r\n                [ngStyle]=\"column.headerGroupStyles |igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                [column]=\"column\"\r\n                [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\">\r\n            </igx-grid-header-group>\r\n        </ng-template>\r\n\r\n        <!-- Pinned columns collection at the end -->\r\n        <ng-container *ngIf=\"pinnedColumnCollection.length && !grid.isPinningToStart\">\r\n            <ng-container *ngFor=\"let column of pinnedColumnCollection | igxTopLevel\">\r\n                <igx-grid-header-group\r\n                    [ngClass]=\"column.headerGroupClasses\"\r\n                    [ngStyle]=\"column.headerGroupStyles |igxHeaderGroupStyle:column:grid.pipeTrigger\"\r\n                    [column]=\"column\"\r\n                    [style.min-width]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.flex-basis]=\"column.width | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\r\n                    [style.left]=\"column.rightPinnedOffset\">\r\n                </igx-grid-header-group>\r\n            </ng-container>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <!-- Filter row area -->\r\n    <ng-container *ngIf=\"grid.filteringService.isFilterRowVisible\">\r\n        <igx-grid-filtering-row #filteringRow\r\n            [column]=\"grid.filteringService.filteredColumn\"\r\n            [style.width.px]=\"width\">\r\n        </igx-grid-filtering-row>\r\n    </ng-container>\r\n\r\n    <!-- Right column moving area -->\r\n    <ng-container *ngIf=\"grid.moving && grid.columnInDrag\">\r\n        <span id=\"right\" class=\"igx-grid__scroll-on-drag-right\" droppable=\"true\" [igxColumnMovingDrop]=\"headerContainer\"></span>\r\n    </ng-container>\r\n</div>\r\n\r\n<!-- Header thumb area -->\r\n<div class=\"igx-grid-thead__thumb\" [hidden]=\"!grid.hasVerticalScroll()\" [style.width.px]=\"grid.scrollSize\"></div>\r\n\r\n<!-- Default row selection header checkbox template -->\r\n<ng-template #headSelectorBaseTemplate igxHeadSelector let-context>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [readonly]=\"true\"\r\n            [checked]=\"context.selectedCount > 0 && grid.selectionService.areAllRowSelected()\"\r\n            [disableRipple]=\"true\"\r\n            [ngStyle]=\"{'visibility': grid.isMultiRowSelectionEnabled? 'visible' : 'hidden' }\"\r\n            [indeterminate]=\"context.selectedCount > 0 && grid.selectionService.hasSomeRowSelected()\"\r\n            [aria-label]=\"grid.headSelectorBaseAriaLabel\"\r\n            #headerCheckbox>\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { grid: [{
                type: Input
            }], pinnedColumnCollection: [{
                type: Input
            }], unpinnedColumnCollection: [{
                type: Input
            }], activeDescendant: [{
                type: Input
            }], hasMRL: [{
                type: Input
            }], width: [{
                type: Input
            }], density: [{
                type: Input
            }], cosyStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-thead--cosy']
            }], compactStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-thead--compact']
            }], _groups: [{
                type: ViewChildren,
                args: [IgxGridHeaderGroupComponent]
            }], headerContainer: [{
                type: ViewChild,
                args: ['headerVirtualContainer', { read: IgxGridForOfDirective, static: true }]
            }], headerDragContainer: [{
                type: ViewChild,
                args: ['headerDragContainer']
            }], headerSelectorContainer: [{
                type: ViewChild,
                args: ['headerSelectorContainer']
            }], headerGroupContainer: [{
                type: ViewChild,
                args: ['headerGroupContainer']
            }], headSelectorBaseTemplate: [{
                type: ViewChild,
                args: ['headSelectorBaseTemplate']
            }], filterRow: [{
                type: ViewChild,
                args: [IgxGridFilteringRowComponent]
            }], headerHierarchyExpander: [{
                type: ViewChild,
                args: ['headerHierarchyExpander']
            }] } });
//# sourceMappingURL=data:application/json;base64,