import { ChangeDetectionStrategy, Component, ContentChildren, CUSTOM_ELEMENTS_SCHEMA, HostBinding, Inject, Input, reflectComponentType, TemplateRef, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';
import { NgIf, NgClass, NgFor, NgTemplateOutlet, NgStyle } from '@angular/common';
import { IgxHierarchicalGridAPIService } from './hierarchical-grid-api.service';
import { IgxRowIslandComponent } from './row-island.component';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { IgxHierarchicalGridNavigationService } from './hierarchical-grid-navigation.service';
import { IgxGridSummaryService } from '../summaries/grid-summary.service';
import { IgxHierarchicalGridBaseDirective } from './hierarchical-grid-base.directive';
import { takeUntil } from 'rxjs/operators';
import { IgxTemplateOutletDirective } from '../../directives/template-outlet/template_outlet.directive';
import { IgxGridSelectionService } from '../selection/selection.service';
import { IgxForOfSyncService, IgxForOfScrollSyncService } from '../../directives/for-of/for_of.sync.service';
import { IGX_GRID_BASE, IGX_GRID_SERVICE_BASE } from '../common/grid.interface';
import { IgxRowIslandAPIService } from './row-island-api.service';
import { IgxGridCRUDService } from '../common/crud.service';
import { IgxHierarchicalGridRow } from '../grid-public-row';
import { IgxGridCell } from '../grid-public-cell';
import { IgxPaginatorComponent } from '../../paginator/paginator.component';
import { IgxGridComponent } from '../grid/grid.component';
import { IgxOverlayOutletDirective, IgxToggleDirective } from '../../directives/toggle/toggle.directive';
import { IgxColumnResizingService } from '../resizing/resizing.service';
import { IgxGridValidationService } from '../grid/grid-validation.service';
import { IgxGridHierarchicalPipe, IgxGridHierarchicalPagingPipe } from './hierarchical-grid.pipes';
import { IgxSummaryDataPipe } from '../summaries/grid-root-summary.pipe';
import { IgxGridTransactionPipe, IgxHasVisibleColumnsPipe, IgxGridRowPinningPipe, IgxGridAddRowPipe, IgxGridRowClassesPipe, IgxGridRowStylesPipe } from '../common/pipes';
import { IgxGridSortingPipe, IgxGridFilteringPipe } from '../grid/grid.pipes';
import { IgxGridColumnResizerComponent } from '../resizing/resizer.component';
import { IgxRowEditTabStopDirective } from '../grid.rowEdit.directive';
import { IgxIconComponent } from '../../icon/icon.component';
import { IgxRippleDirective } from '../../directives/ripple/ripple.directive';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { IgxSummaryRowComponent } from '../summaries/summary-row.component';
import { IgxSnackbarComponent } from '../../snackbar/snackbar.component';
import { IgxCircularProgressBarComponent } from '../../progressbar/progressbar.component';
import { IgxHierarchicalRowComponent } from './hierarchical-row.component';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxColumnMovingDropDirective } from '../moving/moving.drop.directive';
import { IgxGridDragSelectDirective } from '../selection/drag-select.directive';
import { IgxGridBodyDirective } from '../grid.common';
import { IgxGridHeaderRowComponent } from '../headers/grid-header-row.component';
import * as i0 from "@angular/core";
import * as i1 from "./hierarchical-grid-api.service";
let NEXT_ID = 0;
export class IgxChildGridRowComponent {
    /**
     * @hidden
     */
    get parentHasScroll() {
        return !this.parentGrid.verticalScrollContainer.dc.instance.notVirtual;
    }
    /**
     * Get a reference to the grid that contains the selected row.
     *
     * ```typescript
     * handleRowSelection(event) {
     *  // the grid on which the rowSelected event was triggered
     *  const grid = event.row.grid;
     * }
     * ```
     *
     * ```html
     *  <igx-grid
     *    [data]="data"
     *    (rowSelected)="handleRowSelection($event)">
     *  </igx-grid>
     * ```
     */
    // TODO: Refactor
    get parentGrid() {
        return this.gridAPI.grid;
    }
    get level() {
        return this.layout.level;
    }
    /**
     * The native DOM element representing the row. Could be null in certain environments.
     *
     * ```typescript
     * // get the nativeElement of the second selected row
     * let selectedRowNativeElement = this.grid.selectedRows[1].nativeElement;
     * ```
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    constructor(gridAPI, element, cdr) {
        this.gridAPI = gridAPI;
        this.element = element;
        this.cdr = cdr;
        /**
         *  The data passed to the row component.
         *
         * ```typescript
         * // get the row data for the first selected row
         * let selectedRowData = this.grid.selectedRows[0].data;
         * ```
         */
        this.data = [];
        /**
         * Returns whether the row is expanded.
         * ```typescript
         * const RowExpanded = this.grid1.rowList.first.expanded;
         * ```
         */
        this.expanded = false;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        const ref = this.container.createComponent(IgxHierarchicalGridComponent, { injector: this.container.injector });
        this.hGrid = ref.instance;
        this.hGrid.data = this.data.childGridsData[this.layout.key];
        this.layout.layoutChange.subscribe((ch) => {
            this._handleLayoutChanges(ch);
        });
        const changes = this.layout.initialChanges;
        changes.forEach(change => {
            this._handleLayoutChanges(change);
        });
        this.hGrid.parent = this.parentGrid;
        this.hGrid.parentIsland = this.layout;
        this.hGrid.childRow = this;
        // handler logic that re-emits hgrid events on the row island
        this.setupEventEmitters();
        this.layout.gridCreated.emit({
            owner: this.layout,
            parentID: this.data.rowID,
            grid: this.hGrid
        });
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.hGrid.childLayoutList = this.layout.children;
        const layouts = this.hGrid.childLayoutList.toArray();
        layouts.forEach((l) => this.hGrid.gridAPI.registerChildRowIsland(l));
        this.parentGrid.gridAPI.registerChildGrid(this.data.rowID, this.layout.key, this.hGrid);
        this.layout.rowIslandAPI.registerChildGrid(this.data.rowID, this.hGrid);
        this.layout.gridInitialized.emit({
            owner: this.layout,
            parentID: this.data.rowID,
            grid: this.hGrid
        });
        this.hGrid.cdr.detectChanges();
    }
    setupEventEmitters() {
        const destructor = takeUntil(this.hGrid.destroy$);
        const mirror = reflectComponentType(IgxGridComponent);
        // exclude outputs related to two-way binding functionality
        const inputNames = mirror.inputs.map(input => input.propName);
        const outputs = mirror.outputs.filter(o => {
            const matchingInputPropName = o.propName.slice(0, o.propName.indexOf('Change'));
            return inputNames.indexOf(matchingInputPropName) === -1;
        });
        // TODO: Skip the `rendered` output. Rendered should be called once per grid.
        outputs.filter(o => o.propName !== 'rendered').forEach(output => {
            if (this.hGrid[output.propName]) {
                this.hGrid[output.propName].pipe(destructor).subscribe((args) => {
                    if (!args) {
                        args = {};
                    }
                    args.owner = this.hGrid;
                    this.layout[output.propName].emit(args);
                });
            }
        });
    }
    _handleLayoutChanges(changes) {
        for (const change in changes) {
            if (changes.hasOwnProperty(change)) {
                this.hGrid[change] = changes[change].currentValue;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxChildGridRowComponent, deps: [{ token: IGX_GRID_SERVICE_BASE }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxChildGridRowComponent, isStandalone: true, selector: "igx-child-grid-row", inputs: { layout: "layout", parentGridID: "parentGridID", data: "data", index: "index" }, host: { properties: { "attr.aria-level": "this.level" } }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: "<div class=\"igx-grid__hierarchical-indent\" [ngClass]=\"{'igx-grid__hierarchical-indent--scroll': parentHasScroll}\">\r\n    <ng-container #container></ng-container>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxChildGridRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-child-grid-row', standalone: true, imports: [NgClass], template: "<div class=\"igx-grid__hierarchical-indent\" [ngClass]=\"{'igx-grid__hierarchical-indent--scroll': parentHasScroll}\">\r\n    <ng-container #container></ng-container>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.IgxHierarchicalGridAPIService, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_SERVICE_BASE]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { layout: [{
                type: Input
            }], parentGridID: [{
                type: Input
            }], data: [{
                type: Input
            }], index: [{
                type: Input
            }], container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }], level: [{
                type: HostBinding,
                args: ['attr.aria-level']
            }] } });
export class IgxHierarchicalGridComponent extends IgxHierarchicalGridBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * @hidden @internal
         */
        this.role = 'grid';
        /**
         * @hidden
         */
        this.childLayoutKeys = [];
        /**
         * @hidden
         */
        this.highlightedRowID = null;
        /**
         * @hidden
         */
        this.updateOnRender = false;
        /**
         * @hidden
         */
        this.parent = null;
        this.h_id = `igx-hierarchical-grid-${NEXT_ID++}`;
        this.childGridTemplates = new Map();
    }
    // @ViewChild('headerHierarchyExpander', { read: ElementRef, static: true })
    get headerHierarchyExpander() {
        return this.theadRow?.headerHierarchyExpander;
    }
    /**
     * Gets/Sets the value of the `id` attribute.
     *
     * @remarks
     * If not provided it will be automatically generated.
     * @example
     * ```html
     * <igx-hierarchical-grid [id]="'igx-hgrid-1'" [data]="Data" [autoGenerate]="true"></igx-hierarchical-grid>
     * ```
     */
    get id() {
        return this.h_id;
    }
    set id(value) {
        this.h_id = value;
    }
    /**
     * An @Input property that lets you fill the `IgxHierarchicalGridComponent` with an array of data.
     * ```html
     * <igx-hierarchical-grid [data]="Data" [autoGenerate]="true"></igx-hierarchical-grid>
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    set data(value) {
        this._data = value || [];
        this.summaryService.clearSummaryCache();
        if (!this._init) {
            this.validation.updateAll(this._data);
        }
        if (this.shouldGenerate) {
            this.setupColumns();
            this.reflow();
        }
        this.cdr.markForCheck();
        if (this.parent && (this.height === null || this.height.indexOf('%') !== -1)) {
            // If the height will change based on how much data there is, recalculate sizes in igxForOf.
            this.notifyChanges(true);
        }
    }
    /**
     * Returns an array of data set to the `IgxHierarchicalGridComponent`.
     * ```typescript
     * let filteredData = this.grid.filteredData;
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    get data() {
        return this._data;
    }
    /** @hidden @internal */
    get paginator() {
        const id = this.id;
        return (!this.parentIsland && this.paginationComponents?.first) || this.rootGrid.paginatorList?.find((pg) => pg.nativeElement.offsetParent?.id === id);
    }
    /** @hidden @internal */
    get excelStyleFilteringComponent() {
        return this.parentIsland ?
            this.parentIsland.excelStyleFilteringComponents.first :
            super.excelStyleFilteringComponent;
    }
    /**
     * Gets/Sets the total number of records in the data source.
     *
     * @remarks
     * This property is required for remote grid virtualization to function when it is bound to remote data.
     * @example
     * ```typescript
     * const itemCount = this.grid1.totalItemCount;
     * this.grid1.totalItemCount = 55;
     * ```
     */
    set totalItemCount(count) {
        this.verticalScrollContainer.totalItemCount = count;
    }
    get totalItemCount() {
        return this.verticalScrollContainer.totalItemCount;
    }
    /**
     * Sets if all immediate children of the `IgxHierarchicalGridComponent` should be expanded/collapsed.
     * Defult value is false.
     * ```html
     * <igx-hierarchical-grid [id]="'igx-grid-1'" [data]="Data" [autoGenerate]="true" [expandChildren]="true"></igx-hierarchical-grid>
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    set expandChildren(value) {
        this._defaultExpandState = value;
        this.expansionStates = new Map();
    }
    /**
     * Gets if all immediate children of the `IgxHierarchicalGridComponent` previously have been set to be expanded/collapsed.
     * If previously set and some rows have been manually expanded/collapsed it will still return the last set value.
     * ```typescript
     * const expanded = this.grid.expandChildren;
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    get expandChildren() {
        return this._defaultExpandState;
    }
    /**
     * Gets the unique identifier of the parent row. It may be a `string` or `number` if `primaryKey` of the
     * parent grid is set or an object reference of the parent record otherwise.
     * ```typescript
     * const foreignKey = this.grid.foreignKey;
     * ```
     *
     * @memberof IgxHierarchicalGridComponent
     */
    get foreignKey() {
        if (!this.parent) {
            return null;
        }
        return this.parent.gridAPI.getParentRowId(this);
    }
    /**
     * @hidden
     */
    get hasExpandableChildren() {
        return !!this.childLayoutKeys.length;
    }
    /**
     * @hidden
     */
    get resolveRowEditContainer() {
        if (this.parentIsland && this.parentIsland.rowEditCustom) {
            return this.parentIsland.rowEditContainer;
        }
        return this.rowEditContainer;
    }
    /**
     * @hidden
     */
    get resolveRowEditActions() {
        return this.parentIsland ? this.parentIsland.rowEditActionsTemplate : this.rowEditActionsTemplate;
    }
    /**
     * @hidden
     */
    get resolveRowEditText() {
        return this.parentIsland ? this.parentIsland.rowEditTextTemplate : this.rowEditTextTemplate;
    }
    /** @hidden */
    hideActionStrip() {
        if (!this.parent) {
            // hide child layout actions strips when
            // moving outside root grid.
            super.hideActionStrip();
            this.allLayoutList.forEach(ri => {
                ri.actionStrip?.hide();
            });
        }
    }
    /**
     * @hidden
     */
    get parentRowOutletDirective() {
        // Targeting parent outlet in order to prevent hiding when outlet
        // is present at a child grid and is attached to a row.
        return this.parent ? this.parent.rowOutletDirective : this.outlet;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        // this.expansionStatesChange.pipe(takeUntil(this.destroy$)).subscribe((value: Map<any, boolean>) => {
        //     const res = Array.from(value.entries()).filter(({1: v}) => v === true).map(([k]) => k);
        // });
        this.batchEditing = !!this.rootGrid.batchEditing;
        if (this.rootGrid !== this) {
            this.rootGrid.batchEditingChange.pipe(takeUntil(this.destroy$)).subscribe((val) => {
                this.batchEditing = val;
            });
        }
        super.ngOnInit();
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.verticalScrollContainer.beforeViewDestroyed.pipe(takeUntil(this.destroy$)).subscribe((view) => {
            const rowData = view.context.$implicit;
            if (this.isChildGridRecord(rowData)) {
                const cachedData = this.childGridTemplates.get(rowData.rowID);
                if (cachedData) {
                    const tmlpOutlet = cachedData.owner;
                    tmlpOutlet._viewContainerRef.detach(0);
                }
            }
        });
        if (this.parent) {
            this._displayDensity = this.rootGrid.displayDensity;
            this.summaryService.summaryHeight = 0;
            this.rootGrid.densityChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this._displayDensity = this.rootGrid.displayDensity;
                this.summaryService.summaryHeight = 0;
                this.notifyChanges(true);
                this.cdr.markForCheck();
            });
            this.childLayoutKeys = this.parentIsland.children.map((item) => item.key);
        }
        this.actionStrip = this.parentIsland ? this.parentIsland.actionStrip : this.actionStrip;
        this.headSelectorsTemplates = this.parentIsland ?
            this.parentIsland.headSelectorsTemplates :
            this.headSelectorsTemplates;
        this.rowSelectorsTemplates = this.parentIsland ?
            this.parentIsland.rowSelectorsTemplates :
            this.rowSelectorsTemplates;
        this.dragIndicatorIconTemplate = this.parentIsland ?
            this.parentIsland.dragIndicatorIconTemplate :
            this.dragIndicatorIconTemplate;
        this.rowExpandedIndicatorTemplate = this.rootGrid.rowExpandedIndicatorTemplate;
        this.rowCollapsedIndicatorTemplate = this.rootGrid.rowCollapsedIndicatorTemplate;
        this.headerCollapsedIndicatorTemplate = this.rootGrid.headerCollapsedIndicatorTemplate;
        this.headerExpandedIndicatorTemplate = this.rootGrid.headerExpandedIndicatorTemplate;
        this.excelStyleHeaderIconTemplate = this.rootGrid.excelStyleHeaderIconTemplate;
        this.sortAscendingHeaderIconTemplate = this.rootGrid.sortAscendingHeaderIconTemplate;
        this.sortDescendingHeaderIconTemplate = this.rootGrid.sortDescendingHeaderIconTemplate;
        this.sortHeaderIconTemplate = this.rootGrid.sortHeaderIconTemplate;
        this.hasChildrenKey = this.parentIsland ?
            this.parentIsland.hasChildrenKey || this.rootGrid.hasChildrenKey :
            this.rootGrid.hasChildrenKey;
        this.showExpandAll = this.parentIsland ?
            this.parentIsland.showExpandAll : this.rootGrid.showExpandAll;
    }
    /**
     * @hidden
     */
    ngAfterContentInit() {
        this.updateColumnList(false);
        this.childLayoutKeys = this.parent ?
            this.parentIsland.children.map((item) => item.key) :
            this.childLayoutKeys = this.childLayoutList.map((item) => item.key);
        this.childLayoutList.notifyOnChanges();
        this.childLayoutList.changes.pipe(takeUntil(this.destroy$)).subscribe(() => this.onRowIslandChange());
        super.ngAfterContentInit();
    }
    /**
     * Returns the `RowType` by index.
     *
     * @example
     * ```typescript
     * const myRow = this.grid1.getRowByIndex(1);
     * ```
     * @param index
     */
    getRowByIndex(index) {
        if (index < 0 || index >= this.dataView.length) {
            return undefined;
        }
        return this.createRow(index);
    }
    /**
     * Returns the `RowType` by key.
     *
     * @example
     * ```typescript
     * const myRow = this.grid1.getRowByKey(1);
     * ```
     * @param key
     */
    getRowByKey(key) {
        const data = this.dataView;
        const rec = this.primaryKey ?
            data.find(record => record[this.primaryKey] === key) :
            data.find(record => record === key);
        const index = data.indexOf(rec);
        if (index < 0 || index > data.length) {
            return undefined;
        }
        return new IgxHierarchicalGridRow(this, index, rec);
    }
    /**
     * @hidden @internal
     */
    allRows() {
        return this.dataView.map((rec, index) => this.createRow(index));
    }
    /**
     * Returns the collection of `IgxHierarchicalGridRow`s for current page.
     *
     * @hidden @internal
     */
    dataRows() {
        return this.allRows().filter(row => row instanceof IgxHierarchicalGridRow);
    }
    /**
     * Returns an array of the selected `IgxGridCell`s.
     *
     * @example
     * ```typescript
     * const selectedCells = this.grid.selectedCells;
     * ```
     */
    get selectedCells() {
        return this.dataRows().map((row) => row.cells.filter((cell) => cell.selected))
            .reduce((a, b) => a.concat(b), []);
    }
    /**
     * Returns a `CellType` object that matches the conditions.
     *
     * @example
     * ```typescript
     * const myCell = this.grid1.getCellByColumn(2, "UnitPrice");
     * ```
     * @param rowIndex
     * @param columnField
     */
    getCellByColumn(rowIndex, columnField) {
        const row = this.getRowByIndex(rowIndex);
        const column = this.columns.find((col) => col.field === columnField);
        if (row && row instanceof IgxHierarchicalGridRow && column) {
            return new IgxGridCell(this, rowIndex, columnField);
        }
    }
    /**
     * Returns a `CellType` object that matches the conditions.
     *
     * @remarks
     * Requires that the primaryKey property is set.
     * @example
     * ```typescript
     * grid.getCellByKey(1, 'index');
     * ```
     * @param rowSelector match any rowID
     * @param columnField
     */
    getCellByKey(rowSelector, columnField) {
        const row = this.getRowByKey(rowSelector);
        const column = this.columns.find((col) => col.field === columnField);
        if (row && column) {
            return new IgxGridCell(this, row.index, columnField);
        }
    }
    pinRow(rowID, index) {
        const row = this.getRowByKey(rowID);
        return super.pinRow(rowID, index, row);
    }
    unpinRow(rowID) {
        const row = this.getRowByKey(rowID);
        return super.unpinRow(rowID, row);
    }
    /**
     * @hidden @internal
     */
    dataLoading(event) {
        this.dataPreLoad.emit(event);
    }
    /** @hidden */
    featureColumnsWidth() {
        return super.featureColumnsWidth(this.headerHierarchyExpander);
    }
    /**
     * @hidden
     */
    onRowIslandChange() {
        if (this.parent) {
            this.childLayoutKeys = this.parentIsland.children.filter(item => !item._destroyed).map((item) => item.key);
        }
        else {
            this.childLayoutKeys = this.childLayoutList.filter(item => !item._destroyed).map((item) => item.key);
        }
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    /** @hidden @internal **/
    ngOnDestroy() {
        if (!this.parent) {
            this.gridAPI.getChildGrids(true).forEach((grid) => {
                if (!grid.childRow.cdr.destroyed) {
                    grid.childRow.cdr.destroy();
                }
            });
        }
        if (this.parent && this.selectionService.activeElement) {
            // in case selection is in destroyed child grid, selection should be cleared.
            this._clearSeletionHighlights();
        }
        super.ngOnDestroy();
    }
    /**
     * @hidden
     */
    isRowHighlighted(rowData) {
        return this.highlightedRowID === rowData.rowID;
    }
    /**
     * @hidden
     */
    isHierarchicalRecord(record) {
        if (this.isGhostRecord(record)) {
            record = record.recordRef;
        }
        return this.childLayoutList.length !== 0 && record[this.childLayoutList.first.key];
    }
    /**
     * @hidden
     */
    isChildGridRecord(record) {
        // Can be null when there is defined layout but no child data was found
        return record?.childGridsData !== undefined;
    }
    /**
     * @hidden
     */
    trackChanges(index, rec) {
        if (rec.childGridsData !== undefined) {
            // if is child rec
            return rec.rowID;
        }
        return rec;
    }
    /**
     * @hidden
     */
    getContext(rowData, rowIndex, pinned) {
        if (this.isChildGridRecord(rowData)) {
            const cachedData = this.childGridTemplates.get(rowData.rowID);
            if (cachedData) {
                const view = cachedData.view;
                const tmlpOutlet = cachedData.owner;
                return {
                    $implicit: rowData,
                    moveView: view,
                    owner: tmlpOutlet,
                    index: this.dataView.indexOf(rowData)
                };
            }
            else {
                // child rows contain unique grids, hence should have unique templates
                return {
                    $implicit: rowData,
                    templateID: {
                        type: 'childRow',
                        id: rowData.rowID
                    },
                    index: this.dataView.indexOf(rowData)
                };
            }
        }
        else {
            return {
                $implicit: this.isGhostRecord(rowData) ? rowData.recordRef : rowData,
                templateID: {
                    type: 'dataRow',
                    id: null
                },
                index: this.getDataViewIndex(rowIndex, pinned),
                disabled: this.isGhostRecord(rowData)
            };
        }
    }
    /**
     * @hidden
     */
    get rootGrid() {
        let currGrid = this;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
        }
        return currGrid;
    }
    /**
     * @hidden
     */
    get iconTemplate() {
        const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;
        if (!expanded && this.showExpandAll) {
            return this.headerCollapsedIndicatorTemplate || this.defaultCollapsedTemplate;
        }
        else {
            return this.headerExpandedIndicatorTemplate || this.defaultExpandedTemplate;
        }
    }
    /**
     * @hidden
     * @internal
     */
    getDragGhostCustomTemplate() {
        if (this.parentIsland) {
            return this.parentIsland.getDragGhostCustomTemplate();
        }
        return super.getDragGhostCustomTemplate();
    }
    /**
     * @hidden
     * Gets the visible content height that includes header + tbody + footer.
     * For hierarchical child grid it may be scrolled and not fully visible.
     */
    getVisibleContentHeight() {
        let height = super.getVisibleContentHeight();
        if (this.parent) {
            const rootHeight = this.rootGrid.getVisibleContentHeight();
            const topDiff = this.nativeElement.getBoundingClientRect().top - this.rootGrid.nativeElement.getBoundingClientRect().top;
            height = rootHeight - topDiff > height ? height : rootHeight - topDiff;
        }
        return height;
    }
    /**
     * @hidden
     */
    toggleAll() {
        const expanded = this.hasExpandedRecords() && this.hasExpandableChildren;
        if (!expanded && this.showExpandAll) {
            this.expandAll();
        }
        else {
            this.collapseAll();
        }
    }
    /**
     * @hidden
     * @internal
     */
    hasExpandedRecords() {
        if (this.expandChildren) {
            return true;
        }
        let hasExpandedEntry = false;
        this.expansionStates.forEach(value => {
            if (value) {
                hasExpandedEntry = value;
            }
        });
        return hasExpandedEntry;
    }
    getDefaultExpandState(record) {
        if (this.hasChildrenKey && !record[this.hasChildrenKey]) {
            return false;
        }
        return this.expandChildren;
    }
    /**
     * @hidden
     */
    isExpanded(record) {
        return this.gridAPI.get_row_expansion_state(record);
    }
    /**
     * @hidden
     */
    viewCreatedHandler(args) {
        if (this.isChildGridRecord(args.context.$implicit)) {
            const key = args.context.$implicit.rowID;
            this.childGridTemplates.set(key, args);
        }
    }
    /**
     * @hidden
     */
    viewMovedHandler(args) {
        if (this.isChildGridRecord(args.context.$implicit)) {
            // view was moved, update owner in cache
            const key = args.context.$implicit.rowID;
            const cachedData = this.childGridTemplates.get(key);
            cachedData.owner = args.owner;
            this.childLayoutList.forEach((layout) => {
                const relatedGrid = this.gridAPI.getChildGridByID(layout.key, args.context.$implicit.rowID);
                if (relatedGrid && relatedGrid.updateOnRender) {
                    // Detect changes if `expandChildren` has changed when the grid wasn't visible. This is for performance reasons.
                    relatedGrid.notifyChanges(true);
                    relatedGrid.updateOnRender = false;
                }
            });
        }
    }
    /** @hidden @internal **/
    onContainerScroll() {
        this.hideOverlays();
    }
    /**
     * @hidden
     */
    createRow(index, data) {
        let row;
        const dataIndex = this._getDataViewIndex(index);
        const rec = data ?? this.dataView[dataIndex];
        if (!row && rec && !rec.childGridsData) {
            row = new IgxHierarchicalGridRow(this, index, rec);
        }
        return row;
    }
    /** @hidden @internal */
    getChildGrids(inDeph) {
        return this.gridAPI.getChildGrids(inDeph);
    }
    generateDataFields(data) {
        return super.generateDataFields(data).filter((field) => {
            const layoutsList = this.parentIsland ? this.parentIsland.children : this.childLayoutList;
            const keys = layoutsList.map((item) => item.key);
            return keys.indexOf(field) === -1;
        });
    }
    resizeNotifyHandler() {
        // do not trigger reflow if element is detached or if it is child grid.
        if (this.document.contains(this.nativeElement) && !this.parent) {
            this.notifyChanges(true);
        }
    }
    /**
     * @hidden
     */
    initColumns(collection, cb = null) {
        if (this.hasColumnLayouts) {
            // invalid configuration - hierarchical grid should not allow column layouts
            // remove column layouts
            const nonColumnLayoutColumns = this.columns.filter((col) => !col.columnLayout && !col.columnLayoutChild);
            this.updateColumns(nonColumnLayoutColumns);
        }
        super.initColumns(collection, cb);
    }
    setupColumns() {
        if (this.parentIsland && this.parentIsland.childColumns.length > 0 && !this.autoGenerate) {
            this.createColumnsList(this.parentIsland.childColumns.toArray());
        }
        else {
            super.setupColumns();
        }
    }
    getColumnList() {
        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;
        const nestedColumns = childLayouts.map((layout) => layout.columnList.toArray());
        const colsArray = [].concat.apply([], nestedColumns);
        if (colsArray.length > 0) {
            const topCols = this.columnList.filter((item) => colsArray.indexOf(item) === -1);
            return topCols;
        }
        else {
            return this.columnList.toArray();
        }
    }
    onColumnsChanged() {
        Promise.resolve().then(() => {
            this.updateColumnList();
        });
    }
    _shouldAutoSize(renderedHeight) {
        if (this.isPercentHeight && this.parent) {
            return true;
        }
        return super._shouldAutoSize(renderedHeight);
    }
    updateColumnList(recalcColSizes = true) {
        const childLayouts = this.parent ? this.childLayoutList : this.allLayoutList;
        const nestedColumns = childLayouts.map((layout) => layout.columnList.toArray());
        const colsArray = [].concat.apply([], nestedColumns);
        const colLength = this.columns.length;
        const topCols = this.columnList.filter((item) => colsArray.indexOf(item) === -1);
        if (topCols.length > 0) {
            this.updateColumns(topCols);
            if (recalcColSizes && this.columns.length !== colLength) {
                this.calculateGridSizes(false);
            }
        }
    }
    _clearSeletionHighlights() {
        [this.rootGrid, ...this.rootGrid.getChildGrids(true)].forEach(grid => {
            grid.selectionService.clear();
            grid.selectionService.activeElement = null;
            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');
            grid.highlightedRowID = null;
            grid.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxHierarchicalGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxHierarchicalGridComponent, isStandalone: true, selector: "igx-hierarchical-grid", inputs: { id: "id", data: "data", totalItemCount: "totalItemCount", expandChildren: "expandChildren" }, host: { properties: { "attr.role": "this.role", "attr.id": "this.id" } }, providers: [
            IgxGridCRUDService,
            IgxGridValidationService,
            IgxGridSelectionService,
            { provide: IGX_GRID_SERVICE_BASE, useClass: IgxHierarchicalGridAPIService },
            { provide: IGX_GRID_BASE, useExisting: IgxHierarchicalGridComponent },
            IgxGridSummaryService,
            IgxFilteringService,
            IgxHierarchicalGridNavigationService,
            IgxColumnResizingService,
            IgxForOfSyncService,
            IgxForOfScrollSyncService,
            IgxRowIslandAPIService
        ], queries: [{ propertyName: "childLayoutList", predicate: IgxRowIslandComponent, read: IgxRowIslandComponent }, { propertyName: "allLayoutList", predicate: IgxRowIslandComponent, descendants: true, read: IgxRowIslandComponent }, { propertyName: "paginatorList", predicate: IgxPaginatorComponent, descendants: true }], viewQueries: [{ propertyName: "toolbarOutlet", first: true, predicate: ["toolbarOutlet"], descendants: true, read: ViewContainerRef }, { propertyName: "paginatorOutlet", first: true, predicate: ["paginatorOutlet"], descendants: true, read: ViewContainerRef }, { propertyName: "hierarchicalRecordTemplate", first: true, predicate: ["hierarchical_record_template"], descendants: true, read: TemplateRef, static: true }, { propertyName: "childTemplate", first: true, predicate: ["child_record_template"], descendants: true, read: TemplateRef, static: true }, { propertyName: "templateOutlets", predicate: IgxTemplateOutletDirective, descendants: true, read: IgxTemplateOutletDirective }, { propertyName: "hierarchicalRows", predicate: IgxChildGridRowComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"igx-grid-toolbar\"></ng-content>\r\n<ng-container #toolbarOutlet></ng-container>\r\n\r\n<igx-grid-header-row class=\"igx-grid-thead\" tabindex=\"0\"\r\n    [grid]=\"this\"\r\n    [hasMRL]=\"hasColumnLayouts\"\r\n    [activeDescendant]=\"activeDescendant\"\r\n    [width]=\"calcWidth\"\r\n    [pinnedColumnCollection]=\"pinnedColumns\"\r\n    [unpinnedColumnCollection]=\"unpinnedColumns\"\r\n    (keydown.meta.c)=\"copyHandler($event)\"\r\n    (keydown.control.c)=\"copyHandler($event)\"\r\n    (copy)=\"copyHandler($event)\"\r\n    (keydown)=\"navigation.headerNavigation($event)\"\r\n    (focus)=\"navigation.focusFirstCell()\"\r\n>\r\n</igx-grid-header-row>\r\n\r\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\" role=\"rowgroup\">\r\n    <div class=\"igx-grid__tbody-content\"  tabindex=\"0\" (focus)=\"navigation.focusTbody($event)\"\r\n     (keydown)=\"navigation.handleNavigation($event)\" (dragStop)=\"selectionService.dragMode = $event\"\r\n        (dragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\" [attr.aria-activedescendant]=\"activeDescendant\" [attr.role]=\"dataView.length ? null : 'row'\"\r\n        [style.height.px]=\"totalHeight\" [style.width.px]=\"calcWidth\" #tbody (scroll)=\"preventContainerScroll($event)\">\r\n        <span *ngIf=\"moving && columnInDrag && pinnedColumns.length <= 0\"\r\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\r\n            class=\"igx-grid__scroll-on-drag-left\"></span>\r\n        <span *ngIf=\"moving && columnInDrag && pinnedColumns.length > 0\"\r\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\r\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\r\n        <ng-template #pinnedRecordsTemplate>\r\n            <ng-container *ngIf=\"data\r\n            | gridTransaction:id:pipeTrigger\r\n            | visibleColumns:hasVisibleColumns\r\n            | gridAddRow:true:pipeTrigger\r\n            | gridRowPinning:id:true:pipeTrigger\r\n            | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger:true\r\n            | gridSort:sortingExpressions:[]:sortStrategy:id:pipeTrigger:true as pinnedData\">\r\n                <div #pinContainer *ngIf=\"pinnedData.length > 0\" class=\"igx-grid__tr--pinned\"\r\n                    [ngClass]=\"{ 'igx-grid__tr--pinned-bottom':  !isRowPinningToTop, 'igx-grid__tr--pinned-top': isRowPinningToTop }\"\r\n                    [style.width.px]=\"calcWidth\">\r\n                    <ng-container *ngFor=\"let rowData of pinnedData; let rowIndex = index\">\r\n                        <ng-container *ngTemplateOutlet=\"pinned_hierarchical_record_template; context: getContext(rowData, rowIndex, true)\">\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && isRowPinningToTop ? pinnedRecordsTemplate : null\">\r\n        </ng-container>\r\n        <ng-template igxGridFor let-rowData let-rowIndex=\"index\" [igxGridForOf]=\"data\r\n        | gridTransaction:id:pipeTrigger\r\n        | visibleColumns:hasVisibleColumns\r\n        | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger\r\n        | gridSort:sortingExpressions:[]:sortStrategy:id:pipeTrigger\r\n        | gridHierarchicalPaging:!!paginator:page:perPage:id:pipeTrigger\r\n        | gridHierarchical:expansionStates:id:primaryKey:childLayoutKeys:pipeTrigger\r\n        | gridAddRow:false:pipeTrigger\r\n        | gridRowPinning:id:false:pipeTrigger\"\r\n            [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]=\"verticalScroll\"\r\n            [igxForContainerSize]=\"calcHeight\" [igxForItemSize]=\"renderedRowHeight\" [igxForTrackBy]=\"trackChanges\"\r\n            #verticalScrollContainer (chunkPreload)=\"dataLoading($event)\" (dataChanging)=\"dataRebinding($event)\" (dataChanged)=\"dataRebound($event)\">\r\n            <ng-template\r\n                [igxTemplateOutlet]=\"(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) ? child_record_template : hierarchical_record_template))\"\r\n                [igxTemplateOutletContext]=\"getContext(rowData, rowIndex, false)\" (viewCreated)=\"viewCreatedHandler($event)\"\r\n                (viewMoved)=\"viewMovedHandler($event)\" (cachedViewLoaded)=\"cachedViewLoaded($event)\">\r\n            </ng-template>\r\n            <!-- <ng-container *igxTemplateOutlet=\"(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) && isExpanded(rowData) ? child_record_template : hierarchical_record_template)); context: getContext(rowData)\"></ng-container> -->\r\n        </ng-template>\r\n        <ng-template #hierarchical_record_template let-rowIndex=\"index\" let-disabledRow=\"disabled\" let-rowData>\r\n            <igx-hierarchical-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [disabled]=\"disabledRow\" [data]=\"rowData\"\r\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\r\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row>\r\n            </igx-hierarchical-grid-row>\r\n        </ng-template>\r\n\r\n        <ng-template #pinned_hierarchical_record_template let-rowIndex=\"index\" let-rowData>\r\n            <igx-hierarchical-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [data]=\"rowData\"\r\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\r\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row #pinnedRow>\r\n            </igx-hierarchical-grid-row>\r\n        </ng-template>\r\n        <ng-template #child_record_template let-rowIndex=\"index\" let-rowData>\r\n            <div style=\"overflow: auto; width: 100%;\" [attr.data-rowindex]=\"rowIndex\" (scroll)=\"onContainerScroll()\"\r\n                [ngClass]=\"{\r\n                'igx-grid__tr-container': true,\r\n                'igx-grid__tr--highlighted':isRowHighlighted(rowData)\r\n            }\">\r\n                <igx-child-grid-row *ngFor=\"let layout of childLayoutList\" [parentGridID]=\"id\" [index]=\"rowIndex\"\r\n                    [data]=\"rowData\" [layout]=\"layout\" #row>\r\n                </igx-child-grid-row>\r\n            </div>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && !isRowPinningToTop ? pinnedRecordsTemplate : null\">\r\n        </ng-container>\r\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\r\n        <span *ngIf=\"moving && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\r\n            id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\r\n        <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\r\n    </div>\r\n    <div igxToggle #loadingOverlay>\r\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf=\"shouldOverlayLoading\">\r\n        </igx-circular-bar>\r\n    </div>\r\n    <span *ngIf=\"moving && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\r\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\r\n    <div [hidden]=\"!hasVerticalScroll()\" class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\" (pointerdown)=\"$event.preventDefault()\">\r\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=\"isRowPinningToTop ? pinnedRowHeight : 0\"></div>\r\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]=\"calcHeight\">\r\n            <ng-template igxGridFor [igxGridForOf]=\"[]\" #verticalScrollHolder></ng-template>\r\n        </div>\r\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]=\"!isRowPinningToTop ? pinnedRowHeight : 0\"></div>\r\n    </div>\r\n    <div class=\"igx-grid__addrow-snackbar\">\r\n        <igx-snackbar #addRowSnackbar [outlet]=\"igxBodyOverlayOutlet\" [actionText]=\"resourceStrings.igx_grid_snackbar_addrow_actiontext\" [displayTime]=\"snackbarDisplayTime\">{{resourceStrings.igx_grid_snackbar_addrow_label}}</igx-snackbar>\r\n    </div>\r\n\r\n    <div igxOverlayOutlet #igxBodyOverlayOutlet=\"overlay-outlet\"></div>\r\n</div>\r\n\r\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.height.px]=\"summaryRowHeight\" #tfoot>\r\n    <div tabindex=\"0\" (focus)=\"navigation.focusFirstCell(false)\" [attr.aria-activedescendant]=\"activeDescendant\"\r\n     (keydown)=\"navigation.summaryNav($event)\">\r\n        <igx-grid-summary-row [style.width.px]=\"calcWidth\" [style.height.px]=\"summaryRowHeight\"\r\n            *ngIf=\"hasSummarizedColumns && rootSummariesEnabled\" [gridID]=\"id\" role=\"row\"\r\n            [summaries]=\"id | igxGridSummaryDataPipe:summaryService.retriggerRootPipe\" [index]=\"dataView.length\"\r\n            class=\"igx-grid__summaries\" #summaryRow>\r\n        </igx-grid-summary-row>\r\n        <div class=\"igx-grid__tfoot-thumb\" [hidden]=\"!hasVerticalScroll()\" [style.height.px]=\"summaryRowHeight\"\r\n            [style.width.px]=\"scrollSize\"></div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\r\n    <div class=\"igx-grid__scroll-start\" [style.width.px]=\"isPinningToStart ? pinnedWidth : headerFeaturesWidth\" [style.min-width.px]=\"isPinningToStart ? pinnedWidth : headerFeaturesWidth\"></div>\r\n    <div class=\"igx-grid__scroll-main\" [style.width.px]=\"unpinnedWidth\">\r\n        <ng-template igxGridFor [igxGridForOf]=\"[]\" #scrollContainer>\r\n        </ng-template>\r\n    </div>\r\n    <div class=\"igx-grid__scroll-end\" [style.float]=\"'right'\" [style.width.px]=\"pinnedWidth\" [style.min-width.px]=\"pinnedWidth\" [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\r\n</div>\r\n\r\n<div class=\"igx-grid__footer\" #footer>\r\n    <ng-content select=\"igx-grid-footer\"></ng-content>\r\n    <ng-content select=\"igx-paginator\"></ng-content>\r\n    <ng-container #paginatorOutlet></ng-container>\r\n</div>\r\n\r\n<ng-template #emptyFilteredGrid>\r\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\r\n        <span>{{emptyFilteredGridMessage}}</span>\r\n        <span *ngIf=\"showAddButton\">\r\n            <ng-container *ngTemplateOutlet=\"addRowEmptyTemplate || defaultAddRowEmptyTemplate\"></ng-container>\r\n        </span>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-template #defaultEmptyGrid>\r\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\r\n        <span>{{emptyGridMessage}}</span>\r\n        <span *ngIf=\"showAddButton\">\r\n            <ng-container *ngTemplateOutlet=\"addRowEmptyTemplate || defaultAddRowEmptyTemplate\"></ng-container>\r\n        </span>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-template #defaultAddRowEmptyTemplate>\r\n    <button igxButton=\"raised\" igxRipple (click)=\"this.crudService.enterAddRowMode(null, false, $event)\">\r\n        {{resourceStrings.igx_grid_add_row_label}}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #defaultLoadingGrid>\r\n    <div class=\"igx-grid__loading\">\r\n        <igx-circular-bar [indeterminate]=\"true\">\r\n        </igx-circular-bar>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #defaultCollapsedTemplate>\r\n    <igx-icon role=\"button\">unfold_more</igx-icon>\r\n</ng-template>\r\n\r\n<ng-template #defaultExpandedTemplate>\r\n    <igx-icon role=\"button\" [active]=\"hasExpandedRecords() && hasExpandableChildren\">unfold_less</igx-icon>\r\n</ng-template>\r\n\r\n<div *ngIf=\"rowEditable\" igxToggle #rowEditingOverlay>\r\n    <div [className]=\"bannerClass\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"resolveRowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: this.crudService.endEdit.bind(this) }\">\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<ng-template #defaultRowEditText>\r\n    You have {{ rowChangesCount }} changes in this row and {{ hiddenColumnsCount }} hidden columns\r\n</ng-template>\r\n<ng-template #defaultRowEditActions>\r\n    <button igxButton igxRowEditTabStop (click)=\"this.endRowEditTabStop(false, $event)\">{{ this.resourceStrings.igx_grid_row_edit_btn_cancel }}</button>\r\n    <button igxButton igxRowEditTabStop (click)=\"this.endRowEditTabStop(true, $event)\">{{ this.resourceStrings.igx_grid_row_edit_btn_done }}</button>\r\n</ng-template>\r\n<ng-template #defaultRowEditTemplate>\r\n    <div class=\"igx-banner__message\">\r\n        <span class=\"igx-banner__text\">\r\n            <ng-container\r\n                *ngTemplateOutlet=\"this.crudService.row?.getClassName() === 'IgxAddRow' ? rowAddTextTemplate : resolveRowEditText || defaultRowEditText;\r\n                context: { $implicit: this.crudService.row?.getClassName() !== 'IgxAddRow' ? rowChangesCount : null }\">\r\n            </ng-container>\r\n        </span>\r\n    </div>\r\n    <div class=\"igx-banner__actions\">\r\n        <div class=\"igx-banner__row\">\r\n            <ng-container\r\n                *ngTemplateOutlet=\"resolveRowEditActions || defaultRowEditActions; context: { $implicit: this.endEdit.bind(this) }\">\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #dragIndicatorIconBase>\r\n    <igx-icon>drag_indicator</igx-icon>\r\n</ng-template>\r\n\r\n<igx-grid-column-resizer *ngIf=\"colResizingService.showResizer\"></igx-grid-column-resizer>\r\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\r\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: IgxGridHeaderRowComponent, selector: "igx-grid-header-row", inputs: ["grid", "pinnedColumnCollection", "unpinnedColumnCollection", "activeDescendant", "hasMRL", "width", "density"] }, { kind: "directive", type: IgxGridBodyDirective, selector: "[igxGridBody]" }, { kind: "directive", type: IgxGridDragSelectDirective, selector: "[igxGridDragSelect]", inputs: ["igxGridDragSelect"], outputs: ["dragStop", "dragScroll"] }, { kind: "directive", type: IgxColumnMovingDropDirective, selector: "[igxColumnMovingDrop]", inputs: ["igxColumnMovingDrop"] }, { kind: "directive", type: IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "directive", type: IgxTemplateOutletDirective, selector: "[igxTemplateOutlet]", inputs: ["igxTemplateOutletContext", "igxTemplateOutlet"], outputs: ["viewCreated", "viewMoved", "cachedViewLoaded", "beforeViewDetach"] }, { kind: "component", type: IgxHierarchicalRowComponent, selector: "igx-hierarchical-grid-row" }, { kind: "directive", type: IgxOverlayOutletDirective, selector: "[igxOverlayOutlet]", exportAs: ["overlay-outlet"] }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "component", type: IgxCircularProgressBarComponent, selector: "igx-circular-bar", inputs: ["id", "isIndeterminate", "textVisibility", "text"] }, { kind: "component", type: IgxSnackbarComponent, selector: "igx-snackbar", inputs: ["id", "actionText", "positionSettings"], outputs: ["clicked", "animationStarted", "animationDone"] }, { kind: "component", type: IgxSummaryRowComponent, selector: "igx-grid-summary-row", inputs: ["summaries", "gridID", "index", "firstCellIndentation"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: IgxRowEditTabStopDirective, selector: "[igxRowEditTabStop]" }, { kind: "component", type: IgxGridColumnResizerComponent, selector: "igx-grid-column-resizer", inputs: ["restrictResizerTop"] }, { kind: "component", type: IgxChildGridRowComponent, selector: "igx-child-grid-row", inputs: ["layout", "parentGridID", "data", "index"] }, { kind: "pipe", type: IgxGridSortingPipe, name: "gridSort" }, { kind: "pipe", type: IgxGridFilteringPipe, name: "gridFiltering" }, { kind: "pipe", type: IgxGridTransactionPipe, name: "gridTransaction" }, { kind: "pipe", type: IgxHasVisibleColumnsPipe, name: "visibleColumns" }, { kind: "pipe", type: IgxGridRowPinningPipe, name: "gridRowPinning" }, { kind: "pipe", type: IgxGridAddRowPipe, name: "gridAddRow" }, { kind: "pipe", type: IgxGridRowClassesPipe, name: "igxGridRowClasses" }, { kind: "pipe", type: IgxGridRowStylesPipe, name: "igxGridRowStyles" }, { kind: "pipe", type: IgxSummaryDataPipe, name: "igxGridSummaryDataPipe" }, { kind: "pipe", type: IgxGridHierarchicalPipe, name: "gridHierarchical" }, { kind: "pipe", type: IgxGridHierarchicalPagingPipe, name: "gridHierarchicalPaging" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxHierarchicalGridComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-hierarchical-grid', providers: [
                        IgxGridCRUDService,
                        IgxGridValidationService,
                        IgxGridSelectionService,
                        { provide: IGX_GRID_SERVICE_BASE, useClass: IgxHierarchicalGridAPIService },
                        { provide: IGX_GRID_BASE, useExisting: IgxHierarchicalGridComponent },
                        IgxGridSummaryService,
                        IgxFilteringService,
                        IgxHierarchicalGridNavigationService,
                        IgxColumnResizingService,
                        IgxForOfSyncService,
                        IgxForOfScrollSyncService,
                        IgxRowIslandAPIService
                    ], standalone: true, imports: [
                        NgIf,
                        NgClass,
                        NgFor,
                        NgTemplateOutlet,
                        NgStyle,
                        IgxGridHeaderRowComponent,
                        IgxGridBodyDirective,
                        IgxGridDragSelectDirective,
                        IgxColumnMovingDropDirective,
                        IgxGridForOfDirective,
                        IgxTemplateOutletDirective,
                        IgxHierarchicalRowComponent,
                        IgxOverlayOutletDirective,
                        IgxToggleDirective,
                        IgxCircularProgressBarComponent,
                        IgxSnackbarComponent,
                        IgxSummaryRowComponent,
                        IgxButtonDirective,
                        IgxRippleDirective,
                        IgxIconComponent,
                        IgxRowEditTabStopDirective,
                        IgxGridColumnResizerComponent,
                        IgxChildGridRowComponent,
                        IgxGridSortingPipe,
                        IgxGridFilteringPipe,
                        IgxGridTransactionPipe,
                        IgxHasVisibleColumnsPipe,
                        IgxGridRowPinningPipe,
                        IgxGridAddRowPipe,
                        IgxGridRowClassesPipe,
                        IgxGridRowStylesPipe,
                        IgxSummaryDataPipe,
                        IgxGridHierarchicalPipe,
                        IgxGridHierarchicalPagingPipe
                    ], schemas: [CUSTOM_ELEMENTS_SCHEMA], template: "<ng-content select=\"igx-grid-toolbar\"></ng-content>\r\n<ng-container #toolbarOutlet></ng-container>\r\n\r\n<igx-grid-header-row class=\"igx-grid-thead\" tabindex=\"0\"\r\n    [grid]=\"this\"\r\n    [hasMRL]=\"hasColumnLayouts\"\r\n    [activeDescendant]=\"activeDescendant\"\r\n    [width]=\"calcWidth\"\r\n    [pinnedColumnCollection]=\"pinnedColumns\"\r\n    [unpinnedColumnCollection]=\"unpinnedColumns\"\r\n    (keydown.meta.c)=\"copyHandler($event)\"\r\n    (keydown.control.c)=\"copyHandler($event)\"\r\n    (copy)=\"copyHandler($event)\"\r\n    (keydown)=\"navigation.headerNavigation($event)\"\r\n    (focus)=\"navigation.focusFirstCell()\"\r\n>\r\n</igx-grid-header-row>\r\n\r\n<div igxGridBody (keydown.control.c)=\"copyHandler($event)\" (copy)=\"copyHandler($event)\" class=\"igx-grid__tbody\" role=\"rowgroup\">\r\n    <div class=\"igx-grid__tbody-content\"  tabindex=\"0\" (focus)=\"navigation.focusTbody($event)\"\r\n     (keydown)=\"navigation.handleNavigation($event)\" (dragStop)=\"selectionService.dragMode = $event\"\r\n        (dragScroll)=\"dragScroll($event)\" [igxGridDragSelect]=\"selectionService.dragMode\" [attr.aria-activedescendant]=\"activeDescendant\" [attr.role]=\"dataView.length ? null : 'row'\"\r\n        [style.height.px]=\"totalHeight\" [style.width.px]=\"calcWidth\" #tbody (scroll)=\"preventContainerScroll($event)\">\r\n        <span *ngIf=\"moving && columnInDrag && pinnedColumns.length <= 0\"\r\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\r\n            class=\"igx-grid__scroll-on-drag-left\"></span>\r\n        <span *ngIf=\"moving && columnInDrag && pinnedColumns.length > 0\"\r\n            [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\" id=\"left\"\r\n            class=\"igx-grid__scroll-on-drag-pinned\" [style.left.px]=\"pinnedWidth\"></span>\r\n        <ng-template #pinnedRecordsTemplate>\r\n            <ng-container *ngIf=\"data\r\n            | gridTransaction:id:pipeTrigger\r\n            | visibleColumns:hasVisibleColumns\r\n            | gridAddRow:true:pipeTrigger\r\n            | gridRowPinning:id:true:pipeTrigger\r\n            | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger:true\r\n            | gridSort:sortingExpressions:[]:sortStrategy:id:pipeTrigger:true as pinnedData\">\r\n                <div #pinContainer *ngIf=\"pinnedData.length > 0\" class=\"igx-grid__tr--pinned\"\r\n                    [ngClass]=\"{ 'igx-grid__tr--pinned-bottom':  !isRowPinningToTop, 'igx-grid__tr--pinned-top': isRowPinningToTop }\"\r\n                    [style.width.px]=\"calcWidth\">\r\n                    <ng-container *ngFor=\"let rowData of pinnedData; let rowIndex = index\">\r\n                        <ng-container *ngTemplateOutlet=\"pinned_hierarchical_record_template; context: getContext(rowData, rowIndex, true)\">\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </div>\r\n            </ng-container>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && isRowPinningToTop ? pinnedRecordsTemplate : null\">\r\n        </ng-container>\r\n        <ng-template igxGridFor let-rowData let-rowIndex=\"index\" [igxGridForOf]=\"data\r\n        | gridTransaction:id:pipeTrigger\r\n        | visibleColumns:hasVisibleColumns\r\n        | gridFiltering:filteringExpressionsTree:filterStrategy:advancedFilteringExpressionsTree:id:pipeTrigger:filteringPipeTrigger\r\n        | gridSort:sortingExpressions:[]:sortStrategy:id:pipeTrigger\r\n        | gridHierarchicalPaging:!!paginator:page:perPage:id:pipeTrigger\r\n        | gridHierarchical:expansionStates:id:primaryKey:childLayoutKeys:pipeTrigger\r\n        | gridAddRow:false:pipeTrigger\r\n        | gridRowPinning:id:false:pipeTrigger\"\r\n            [igxForScrollOrientation]=\"'vertical'\" [igxForScrollContainer]=\"verticalScroll\"\r\n            [igxForContainerSize]=\"calcHeight\" [igxForItemSize]=\"renderedRowHeight\" [igxForTrackBy]=\"trackChanges\"\r\n            #verticalScrollContainer (chunkPreload)=\"dataLoading($event)\" (dataChanging)=\"dataRebinding($event)\" (dataChanged)=\"dataRebound($event)\">\r\n            <ng-template\r\n                [igxTemplateOutlet]=\"(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) ? child_record_template : hierarchical_record_template))\"\r\n                [igxTemplateOutletContext]=\"getContext(rowData, rowIndex, false)\" (viewCreated)=\"viewCreatedHandler($event)\"\r\n                (viewMoved)=\"viewMovedHandler($event)\" (cachedViewLoaded)=\"cachedViewLoaded($event)\">\r\n            </ng-template>\r\n            <!-- <ng-container *igxTemplateOutlet=\"(isHierarchicalRecord(rowData) ? hierarchical_record_template : (isChildGridRecord(rowData) && isExpanded(rowData) ? child_record_template : hierarchical_record_template)); context: getContext(rowData)\"></ng-container> -->\r\n        </ng-template>\r\n        <ng-template #hierarchical_record_template let-rowIndex=\"index\" let-disabledRow=\"disabled\" let-rowData>\r\n            <igx-hierarchical-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [disabled]=\"disabledRow\" [data]=\"rowData\"\r\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\r\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row>\r\n            </igx-hierarchical-grid-row>\r\n        </ng-template>\r\n\r\n        <ng-template #pinned_hierarchical_record_template let-rowIndex=\"index\" let-rowData>\r\n            <igx-hierarchical-grid-row [gridID]=\"id\" [index]=\"rowIndex\" [data]=\"rowData\"\r\n                [ngClass]=\"rowClasses | igxGridRowClasses:row:row.inEditMode:row.selected:row.dirty:row.deleted:row.dragging:rowIndex:hasColumnLayouts:false:rowData:pipeTrigger\"\r\n                [ngStyle]=\"rowStyles | igxGridRowStyles:rowData:rowIndex:pipeTrigger\" #row #pinnedRow>\r\n            </igx-hierarchical-grid-row>\r\n        </ng-template>\r\n        <ng-template #child_record_template let-rowIndex=\"index\" let-rowData>\r\n            <div style=\"overflow: auto; width: 100%;\" [attr.data-rowindex]=\"rowIndex\" (scroll)=\"onContainerScroll()\"\r\n                [ngClass]=\"{\r\n                'igx-grid__tr-container': true,\r\n                'igx-grid__tr--highlighted':isRowHighlighted(rowData)\r\n            }\">\r\n                <igx-child-grid-row *ngFor=\"let layout of childLayoutList\" [parentGridID]=\"id\" [index]=\"rowIndex\"\r\n                    [data]=\"rowData\" [layout]=\"layout\" #row>\r\n                </igx-child-grid-row>\r\n            </div>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"hasPinnedRecords && !isRowPinningToTop ? pinnedRecordsTemplate : null\">\r\n        </ng-container>\r\n        <ng-container *ngTemplateOutlet=\"template\"></ng-container>\r\n        <span *ngIf=\"moving && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\r\n            id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\r\n        <div class=\"igx-grid__row-editing-outlet\" igxOverlayOutlet #igxRowEditingOverlayOutlet></div>\r\n    </div>\r\n    <div igxToggle #loadingOverlay>\r\n        <igx-circular-bar [indeterminate]=\"true\" *ngIf=\"shouldOverlayLoading\">\r\n        </igx-circular-bar>\r\n    </div>\r\n    <span *ngIf=\"moving && columnInDrag\" [igxColumnMovingDrop]=\"headerContainer\" [attr.droppable]=\"true\"\r\n        id=\"right\" class=\"igx-grid__scroll-on-drag-right\"></span>\r\n    <div [hidden]=\"!hasVerticalScroll()\" class=\"igx-grid__tbody-scrollbar\" [style.width.px]=\"scrollSize\" (pointerdown)=\"$event.preventDefault()\">\r\n        <div class=\"igx-grid__tbody-scrollbar-start\" [style.height.px]=\"isRowPinningToTop ? pinnedRowHeight : 0\"></div>\r\n        <div class=\"igx-grid__tbody-scrollbar-main\" [style.height.px]=\"calcHeight\">\r\n            <ng-template igxGridFor [igxGridForOf]=\"[]\" #verticalScrollHolder></ng-template>\r\n        </div>\r\n        <div class=\"igx-grid__tbody-scrollbar-end\" [style.height.px]=\"!isRowPinningToTop ? pinnedRowHeight : 0\"></div>\r\n    </div>\r\n    <div class=\"igx-grid__addrow-snackbar\">\r\n        <igx-snackbar #addRowSnackbar [outlet]=\"igxBodyOverlayOutlet\" [actionText]=\"resourceStrings.igx_grid_snackbar_addrow_actiontext\" [displayTime]=\"snackbarDisplayTime\">{{resourceStrings.igx_grid_snackbar_addrow_label}}</igx-snackbar>\r\n    </div>\r\n\r\n    <div igxOverlayOutlet #igxBodyOverlayOutlet=\"overlay-outlet\"></div>\r\n</div>\r\n\r\n<div class=\"igx-grid__tfoot\" role=\"rowgroup\" [style.height.px]=\"summaryRowHeight\" #tfoot>\r\n    <div tabindex=\"0\" (focus)=\"navigation.focusFirstCell(false)\" [attr.aria-activedescendant]=\"activeDescendant\"\r\n     (keydown)=\"navigation.summaryNav($event)\">\r\n        <igx-grid-summary-row [style.width.px]=\"calcWidth\" [style.height.px]=\"summaryRowHeight\"\r\n            *ngIf=\"hasSummarizedColumns && rootSummariesEnabled\" [gridID]=\"id\" role=\"row\"\r\n            [summaries]=\"id | igxGridSummaryDataPipe:summaryService.retriggerRootPipe\" [index]=\"dataView.length\"\r\n            class=\"igx-grid__summaries\" #summaryRow>\r\n        </igx-grid-summary-row>\r\n        <div class=\"igx-grid__tfoot-thumb\" [hidden]=\"!hasVerticalScroll()\" [style.height.px]=\"summaryRowHeight\"\r\n            [style.width.px]=\"scrollSize\"></div>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"igx-grid__scroll\" [style.height.px]=\"scrollSize\" #scr [hidden]=\"isHorizontalScrollHidden\" (pointerdown)=\"$event.preventDefault()\">\r\n    <div class=\"igx-grid__scroll-start\" [style.width.px]=\"isPinningToStart ? pinnedWidth : headerFeaturesWidth\" [style.min-width.px]=\"isPinningToStart ? pinnedWidth : headerFeaturesWidth\"></div>\r\n    <div class=\"igx-grid__scroll-main\" [style.width.px]=\"unpinnedWidth\">\r\n        <ng-template igxGridFor [igxGridForOf]=\"[]\" #scrollContainer>\r\n        </ng-template>\r\n    </div>\r\n    <div class=\"igx-grid__scroll-end\" [style.float]=\"'right'\" [style.width.px]=\"pinnedWidth\" [style.min-width.px]=\"pinnedWidth\" [hidden]=\"pinnedWidth === 0 || isPinningToStart\"></div>\r\n</div>\r\n\r\n<div class=\"igx-grid__footer\" #footer>\r\n    <ng-content select=\"igx-grid-footer\"></ng-content>\r\n    <ng-content select=\"igx-paginator\"></ng-content>\r\n    <ng-container #paginatorOutlet></ng-container>\r\n</div>\r\n\r\n<ng-template #emptyFilteredGrid>\r\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\r\n        <span>{{emptyFilteredGridMessage}}</span>\r\n        <span *ngIf=\"showAddButton\">\r\n            <ng-container *ngTemplateOutlet=\"addRowEmptyTemplate || defaultAddRowEmptyTemplate\"></ng-container>\r\n        </span>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-template #defaultEmptyGrid>\r\n    <span class=\"igx-grid__tbody-message\" role=\"cell\">\r\n        <span>{{emptyGridMessage}}</span>\r\n        <span *ngIf=\"showAddButton\">\r\n            <ng-container *ngTemplateOutlet=\"addRowEmptyTemplate || defaultAddRowEmptyTemplate\"></ng-container>\r\n        </span>\r\n    </span>\r\n</ng-template>\r\n\r\n<ng-template #defaultAddRowEmptyTemplate>\r\n    <button igxButton=\"raised\" igxRipple (click)=\"this.crudService.enterAddRowMode(null, false, $event)\">\r\n        {{resourceStrings.igx_grid_add_row_label}}\r\n    </button>\r\n</ng-template>\r\n\r\n<ng-template #defaultLoadingGrid>\r\n    <div class=\"igx-grid__loading\">\r\n        <igx-circular-bar [indeterminate]=\"true\">\r\n        </igx-circular-bar>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #defaultCollapsedTemplate>\r\n    <igx-icon role=\"button\">unfold_more</igx-icon>\r\n</ng-template>\r\n\r\n<ng-template #defaultExpandedTemplate>\r\n    <igx-icon role=\"button\" [active]=\"hasExpandedRecords() && hasExpandableChildren\">unfold_less</igx-icon>\r\n</ng-template>\r\n\r\n<div *ngIf=\"rowEditable\" igxToggle #rowEditingOverlay>\r\n    <div [className]=\"bannerClass\">\r\n        <ng-container\r\n            *ngTemplateOutlet=\"resolveRowEditContainer; context: { rowChangesCount: rowChangesCount, endEdit: this.crudService.endEdit.bind(this) }\">\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<ng-template #defaultRowEditText>\r\n    You have {{ rowChangesCount }} changes in this row and {{ hiddenColumnsCount }} hidden columns\r\n</ng-template>\r\n<ng-template #defaultRowEditActions>\r\n    <button igxButton igxRowEditTabStop (click)=\"this.endRowEditTabStop(false, $event)\">{{ this.resourceStrings.igx_grid_row_edit_btn_cancel }}</button>\r\n    <button igxButton igxRowEditTabStop (click)=\"this.endRowEditTabStop(true, $event)\">{{ this.resourceStrings.igx_grid_row_edit_btn_done }}</button>\r\n</ng-template>\r\n<ng-template #defaultRowEditTemplate>\r\n    <div class=\"igx-banner__message\">\r\n        <span class=\"igx-banner__text\">\r\n            <ng-container\r\n                *ngTemplateOutlet=\"this.crudService.row?.getClassName() === 'IgxAddRow' ? rowAddTextTemplate : resolveRowEditText || defaultRowEditText;\r\n                context: { $implicit: this.crudService.row?.getClassName() !== 'IgxAddRow' ? rowChangesCount : null }\">\r\n            </ng-container>\r\n        </span>\r\n    </div>\r\n    <div class=\"igx-banner__actions\">\r\n        <div class=\"igx-banner__row\">\r\n            <ng-container\r\n                *ngTemplateOutlet=\"resolveRowEditActions || defaultRowEditActions; context: { $implicit: this.endEdit.bind(this) }\">\r\n            </ng-container>\r\n        </div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #dragIndicatorIconBase>\r\n    <igx-icon>drag_indicator</igx-icon>\r\n</ng-template>\r\n\r\n<igx-grid-column-resizer *ngIf=\"colResizingService.showResizer\"></igx-grid-column-resizer>\r\n<div class=\"igx-grid__loading-outlet\" #igxLoadingOverlayOutlet igxOverlayOutlet></div>\r\n<div class=\"igx-grid__outlet\" #igxFilteringOverlayOutlet igxOverlayOutlet></div>\r\n" }]
        }], propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], childLayoutList: [{
                type: ContentChildren,
                args: [IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: false }]
            }], allLayoutList: [{
                type: ContentChildren,
                args: [IgxRowIslandComponent, { read: IgxRowIslandComponent, descendants: true }]
            }], paginatorList: [{
                type: ContentChildren,
                args: [IgxPaginatorComponent, { descendants: true }]
            }], toolbarOutlet: [{
                type: ViewChild,
                args: ['toolbarOutlet', { read: ViewContainerRef }]
            }], paginatorOutlet: [{
                type: ViewChild,
                args: ['paginatorOutlet', { read: ViewContainerRef }]
            }], templateOutlets: [{
                type: ViewChildren,
                args: [IgxTemplateOutletDirective, { read: IgxTemplateOutletDirective }]
            }], hierarchicalRows: [{
                type: ViewChildren,
                args: [IgxChildGridRowComponent]
            }], hierarchicalRecordTemplate: [{
                type: ViewChild,
                args: ['hierarchical_record_template', { read: TemplateRef, static: true }]
            }], childTemplate: [{
                type: ViewChild,
                args: ['child_record_template', { read: TemplateRef, static: true }]
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], data: [{
                type: Input
            }], totalItemCount: [{
                type: Input
            }], expandChildren: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,