import { IgxGridCellComponent } from '../cell.component';
import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { HammerGesturesManager } from '../../core/touch';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxOverlayService } from '../../services/public_api';
import { IgxGridCellImageAltPipe, IgxStringReplacePipe, IgxColumnFormatterPipe } from '../common/pipes';
import { IgxTooltipDirective } from '../../directives/tooltip/tooltip.directive';
import { IgxTooltipTargetDirective } from '../../directives/tooltip/tooltip-target.directive';
import { IgxSuffixDirective } from '../../directives/suffix/suffix.directive';
import { IgxPrefixDirective } from '../../directives/prefix/prefix.directive';
import { IgxDateTimeEditorDirective } from '../../directives/date-time-editor/date-time-editor.directive';
import { IgxTimePickerComponent } from '../../time-picker/time-picker.component';
import { IgxDatePickerComponent } from '../../date-picker/date-picker.component';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { IgxTextSelectionDirective } from '../../directives/text-selection/text-selection.directive';
import { IgxFocusDirective } from '../../directives/focus/focus.directive';
import { IgxInputDirective } from '../../directives/input/input.directive';
import { IgxInputGroupComponent } from '../../input-group/input-group.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { IgxIconComponent } from '../../icon/icon.component';
import { IgxTextHighlightDirective } from '../../directives/text-highlight/text-highlight.directive';
import { IgxChipComponent } from '../../chips/chip.component';
import { NgIf, NgClass, NgTemplateOutlet, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../selection/selection.service";
import * as i2 from "../../core/touch";
import * as i3 from "../../core/utils";
import * as i4 from "@angular/forms";
import * as i5 from "../../services/public_api";
export class IgxHierarchicalGridCellComponent extends IgxGridCellComponent {
    constructor(selectionService, grid, overlayService, cdr, helement, zone, touchManager, platformUtil) {
        super(selectionService, grid, overlayService, cdr, helement, zone, touchManager, platformUtil);
    }
    ngOnInit() {
        super.ngOnInit();
        this._rootGrid = this._getRootGrid();
    }
    /**
     * @hidden
     * @internal
     */
    activate(event) {
        this._clearAllHighlights();
        const currentElement = this.grid.nativeElement;
        let parentGrid = this.grid;
        let childGrid;
        // add highligh to the current grid
        if (this._rootGrid.id !== currentElement.id) {
            currentElement.classList.add('igx-grid__tr--highlighted');
        }
        // add highligh to the current grid
        while (this._rootGrid.id !== parentGrid.id) {
            childGrid = parentGrid;
            parentGrid = parentGrid.parent;
            const parentRowID = parentGrid.gridAPI.getParentRowId(childGrid);
            parentGrid.highlightedRowID = parentRowID;
        }
        this.grid.navigation.activeNode.gridID = this.gridID;
        super.activate(event);
    }
    _getRootGrid() {
        let currGrid = this.grid;
        while (currGrid.parent) {
            currGrid = currGrid.parent;
        }
        return currGrid;
    }
    // TODO: Extend the new selection service to avoid complete traversal
    _clearAllHighlights() {
        [this._rootGrid, ...this._rootGrid.getChildGrids(true)].forEach(grid => {
            if (grid !== this.grid && grid.navigation.activeNode) {
                grid.navigation.clearActivation();
                grid.selectionService.initKeyboardState();
                grid.selectionService.clear();
            }
            grid.selectionService.activeElement = null;
            grid.nativeElement.classList.remove('igx-grid__tr--highlighted');
            grid.highlightedRowID = null;
            grid.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxHierarchicalGridCellComponent, deps: [{ token: i1.IgxGridSelectionService }, { token: IGX_GRID_BASE }, { token: IgxOverlayService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i2.HammerGesturesManager }, { token: i3.PlatformUtil }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxHierarchicalGridCellComponent, isStandalone: true, selector: "igx-hierarchical-grid-cell", providers: [HammerGesturesManager], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultPinnedIndicator>\r\n    <igx-chip\r\n        *ngIf=\"displayPinnedChip\"\r\n        class=\"igx-grid__td--pinned-chip\"\r\n        [disabled]=\"true\"\r\n        [displayDensity]=\"'compact'\"\r\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\r\n    >\r\n</ng-template>\r\n<ng-template #defaultCell>\r\n    <div *ngIf=\"column.dataType !== 'boolean' && column.dataType !== 'image' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight\r\n        class=\"igx-grid__td-text\"\r\n        style=\"pointer-events: none;\"\r\n        [cssClass]=\"highlightClass\"\r\n        [activeCssClass]=\"activeHighlightClass\"\r\n        [groupName]=\"gridID\"\r\n        [value]=\"\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === 'number'\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        \"\r\n        [row]=\"rowData\"\r\n        [column]=\"this.column.field\"\r\n        [containerClass]=\"'igx-grid__td-text'\"\r\n        [metadata]=\"searchMetadata\"\r\n    >{{\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === \"number\"\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        }}</div>\r\n    <igx-icon\r\n        *ngIf=\"column.dataType === 'boolean' && !this.formatter\"\r\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\r\n        >{{ value ? \"check\" : \"close\" }}</igx-icon>\r\n    <img *ngIf=\"column.dataType === 'image'\" [src]=\"value\" [alt]=\"value | igxCellImageAlt\" />\r\n</ng-template>\r\n<ng-template #addRowCell let-cell=\"cell\">\r\n    <div *ngIf=\"column.dataType !== 'boolean' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\r\n    [cssClass]=\"highlightClass\"\r\n    [activeCssClass]=\"activeHighlightClass\"\r\n    [groupName]=\"gridID\"\r\n    [value]=\"formatter ? (value | columnFormatter:formatter:rowData) : column.dataType === 'number' ?\r\n        (value | number:column.pipeArgs.digitsInfo:grid.locale) : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime') ?\r\n        (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : column.dataType === 'currency' ?\r\n        (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'percent' ?\r\n        (value | percent:column.pipeArgs.digitsInfo:grid.locale) : value\"\r\n    [row]=\"rowData\"\r\n    [column]=\"this.column.field\"\r\n    [containerClass]=\"'igx-grid__td-text'\"\r\n    [metadata]=\"searchMetadata\">{{\r\n        !isEmptyAddRowCell ? value : (column.header || column.field)\r\n    }}</div>\r\n</ng-template>\r\n<ng-template #inlineEditor let-cell=\"cell\">\r\n    <ng-container *ngIf=\"column.dataType === 'string' || column.dataType === 'image'\" [formGroup]=\"formGroup\">\r\n        <igx-input-group displayDensity=\"compact\" >\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [formControl]=\"formControl\"\r\n                (compositionstart)=\"grid.crudService.isInCompositionMode = true\"\r\n                (compositionend)=\"grid.crudService.isInCompositionMode = false\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'number'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'boolean'\" [formGroup]=\"formGroup\">\r\n        <igx-checkbox\r\n            [checked]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [disableRipple]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-checkbox>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'date'\" [formGroup]=\"formGroup\">\r\n        <igx-date-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [weekStart]=\"column.pipeArgs.weekStart\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        >\r\n        </igx-date-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'time'\" [formGroup]=\"formGroup\">\r\n        <igx-time-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [inputFormat]=\"column.defaultTimeFormat\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-time-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'dateTime'\">\r\n        <igx-input-group [formGroup]=\"formGroup\">\r\n            <input\r\n                type=\"text\"\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [formControl]=\"formControl\"\r\n                igxInput\r\n                [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n                [igxFocus]=\"true\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'currency'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <igx-prefix *ngIf=\"grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-prefix>\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix *ngIf=\"!grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'percent'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix> {{ editValue | percent:column.pipeArgs.digitsInfo:grid.locale }} </igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\r\n\r\n<ng-container *ngIf=\"isInvalid\">\r\n    <igx-icon #errorIcon [igxTooltipTarget]=\"tooltipRef\"  [igxToggleOutlet]=\"grid.outlet\"\r\n    (mouseover)='errorShowing = true' (mouseout)='errorShowing = false'>error</igx-icon>\r\n    <div [id]=\"ariaErrorMessage\"\r\n    igxTooltip #error #tooltipRef=\"tooltip\">\r\n        <div [style.width]=\"'max-content'\">\r\n            <ng-container *ngTemplateOutlet=\"cellValidationErrorTemplate || defaultError; context: context\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #defaultError>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['required']\">\r\n        {{grid.resourceStrings.igx_grid_required_validation_error}}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['minlength']\">\r\n        {{grid.resourceStrings.igx_grid_min_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.minlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['maxlength']\">\r\n        {{grid.resourceStrings.igx_grid_max_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.maxlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['min']\">\r\n        {{grid.resourceStrings.igx_grid_min_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.min.min }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['max']\">\r\n        {{grid.resourceStrings.igx_grid_max_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.max.max }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['email']\">\r\n        {{grid.resourceStrings.igx_grid_email_validation_error }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['pattern']\">\r\n        {{grid.resourceStrings.igx_grid_pattern_validation_error}}\r\n    </div>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxChipComponent, selector: "igx-chip", inputs: ["variant", "id", "tabIndex", "data", "draggable", "animateOnRelease", "hideBaseOnDrag", "removable", "removeIcon", "selectable", "selectIcon", "class", "disabled", "selected", "color", "resourceStrings"], outputs: ["selectedChange", "moveStart", "moveEnd", "remove", "chipClick", "selectedChanging", "selectedChanged", "keyDown", "dragEnter", "dragLeave", "dragOver", "dragDrop"] }, { kind: "directive", type: IgxTextHighlightDirective, selector: "[igxTextHighlight]", inputs: ["cssClass", "activeCssClass", "containerClass", "groupName", "value", "row", "column", "metadata"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxFocusDirective, selector: "[igxFocus]", inputs: ["igxFocus"], exportAs: ["igxFocus"] }, { kind: "directive", type: IgxTextSelectionDirective, selector: "[igxTextSelection]", inputs: ["igxTextSelection"], exportAs: ["igxTextSelection"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "component", type: IgxDatePickerComponent, selector: "igx-date-picker", inputs: ["hideOutsideDays", "displayMonthsCount", "showWeekNumbers", "formatter", "headerOrientation", "todayButtonLabel", "cancelButtonLabel", "spinLoop", "spinDelta", "outlet", "id", "formatViews", "disabledDates", "specialDates", "calendarFormat", "value", "minValue", "maxValue", "resourceStrings", "readOnly"], outputs: ["valueChange", "validationFailed"] }, { kind: "component", type: IgxTimePickerComponent, selector: "igx-time-picker", inputs: ["id", "displayFormat", "inputFormat", "mode", "minValue", "maxValue", "spinLoop", "formatter", "headerOrientation", "readOnly", "value", "resourceStrings", "okButtonLabel", "cancelButtonLabel", "itemsDelta"], outputs: ["selected", "valueChange", "validationFailed"] }, { kind: "directive", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: ["locale", "minValue", "maxValue", "spinLoop", "displayFormat", "igxDateTimeEditor", "value", "spinDelta"], outputs: ["valueChange", "validationFailed"], exportAs: ["igxDateTimeEditor"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxTooltipTargetDirective, selector: "[igxTooltipTarget]", inputs: ["showDelay", "hideDelay", "tooltipDisabled", "igxTooltipTarget", "tooltip"], outputs: ["tooltipShow", "tooltipHide"], exportAs: ["tooltipTarget"] }, { kind: "directive", type: IgxTooltipDirective, selector: "[igxTooltip]", inputs: ["context", "id"], exportAs: ["tooltip"] }, { kind: "pipe", type: IgxGridCellImageAltPipe, name: "igxCellImageAlt" }, { kind: "pipe", type: IgxStringReplacePipe, name: "igxStringReplace" }, { kind: "pipe", type: IgxColumnFormatterPipe, name: "columnFormatter" }, { kind: "pipe", type: DecimalPipe, name: "number" }, { kind: "pipe", type: PercentPipe, name: "percent" }, { kind: "pipe", type: CurrencyPipe, name: "currency" }, { kind: "pipe", type: DatePipe, name: "date" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxHierarchicalGridCellComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-hierarchical-grid-cell', providers: [HammerGesturesManager], standalone: true, imports: [NgIf, IgxChipComponent, IgxTextHighlightDirective, IgxIconComponent, NgClass, FormsModule, ReactiveFormsModule, IgxInputGroupComponent, IgxInputDirective, IgxFocusDirective, IgxTextSelectionDirective, IgxCheckboxComponent, IgxDatePickerComponent, IgxTimePickerComponent, IgxDateTimeEditorDirective, IgxPrefixDirective, IgxSuffixDirective, NgTemplateOutlet, IgxTooltipTargetDirective, IgxTooltipDirective, IgxGridCellImageAltPipe, IgxStringReplacePipe, IgxColumnFormatterPipe, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe], template: "<ng-template #defaultPinnedIndicator>\r\n    <igx-chip\r\n        *ngIf=\"displayPinnedChip\"\r\n        class=\"igx-grid__td--pinned-chip\"\r\n        [disabled]=\"true\"\r\n        [displayDensity]=\"'compact'\"\r\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\r\n    >\r\n</ng-template>\r\n<ng-template #defaultCell>\r\n    <div *ngIf=\"column.dataType !== 'boolean' && column.dataType !== 'image' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight\r\n        class=\"igx-grid__td-text\"\r\n        style=\"pointer-events: none;\"\r\n        [cssClass]=\"highlightClass\"\r\n        [activeCssClass]=\"activeHighlightClass\"\r\n        [groupName]=\"gridID\"\r\n        [value]=\"\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === 'number'\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        \"\r\n        [row]=\"rowData\"\r\n        [column]=\"this.column.field\"\r\n        [containerClass]=\"'igx-grid__td-text'\"\r\n        [metadata]=\"searchMetadata\"\r\n    >{{\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === \"number\"\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        }}</div>\r\n    <igx-icon\r\n        *ngIf=\"column.dataType === 'boolean' && !this.formatter\"\r\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\r\n        >{{ value ? \"check\" : \"close\" }}</igx-icon>\r\n    <img *ngIf=\"column.dataType === 'image'\" [src]=\"value\" [alt]=\"value | igxCellImageAlt\" />\r\n</ng-template>\r\n<ng-template #addRowCell let-cell=\"cell\">\r\n    <div *ngIf=\"column.dataType !== 'boolean' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\r\n    [cssClass]=\"highlightClass\"\r\n    [activeCssClass]=\"activeHighlightClass\"\r\n    [groupName]=\"gridID\"\r\n    [value]=\"formatter ? (value | columnFormatter:formatter:rowData) : column.dataType === 'number' ?\r\n        (value | number:column.pipeArgs.digitsInfo:grid.locale) : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime') ?\r\n        (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : column.dataType === 'currency' ?\r\n        (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'percent' ?\r\n        (value | percent:column.pipeArgs.digitsInfo:grid.locale) : value\"\r\n    [row]=\"rowData\"\r\n    [column]=\"this.column.field\"\r\n    [containerClass]=\"'igx-grid__td-text'\"\r\n    [metadata]=\"searchMetadata\">{{\r\n        !isEmptyAddRowCell ? value : (column.header || column.field)\r\n    }}</div>\r\n</ng-template>\r\n<ng-template #inlineEditor let-cell=\"cell\">\r\n    <ng-container *ngIf=\"column.dataType === 'string' || column.dataType === 'image'\" [formGroup]=\"formGroup\">\r\n        <igx-input-group displayDensity=\"compact\" >\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [formControl]=\"formControl\"\r\n                (compositionstart)=\"grid.crudService.isInCompositionMode = true\"\r\n                (compositionend)=\"grid.crudService.isInCompositionMode = false\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'number'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'boolean'\" [formGroup]=\"formGroup\">\r\n        <igx-checkbox\r\n            [checked]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [disableRipple]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-checkbox>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'date'\" [formGroup]=\"formGroup\">\r\n        <igx-date-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [weekStart]=\"column.pipeArgs.weekStart\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        >\r\n        </igx-date-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'time'\" [formGroup]=\"formGroup\">\r\n        <igx-time-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [inputFormat]=\"column.defaultTimeFormat\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-time-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'dateTime'\">\r\n        <igx-input-group [formGroup]=\"formGroup\">\r\n            <input\r\n                type=\"text\"\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [formControl]=\"formControl\"\r\n                igxInput\r\n                [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n                [igxFocus]=\"true\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'currency'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <igx-prefix *ngIf=\"grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-prefix>\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix *ngIf=\"!grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'percent'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix> {{ editValue | percent:column.pipeArgs.digitsInfo:grid.locale }} </igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\r\n\r\n<ng-container *ngIf=\"isInvalid\">\r\n    <igx-icon #errorIcon [igxTooltipTarget]=\"tooltipRef\"  [igxToggleOutlet]=\"grid.outlet\"\r\n    (mouseover)='errorShowing = true' (mouseout)='errorShowing = false'>error</igx-icon>\r\n    <div [id]=\"ariaErrorMessage\"\r\n    igxTooltip #error #tooltipRef=\"tooltip\">\r\n        <div [style.width]=\"'max-content'\">\r\n            <ng-container *ngTemplateOutlet=\"cellValidationErrorTemplate || defaultError; context: context\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #defaultError>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['required']\">\r\n        {{grid.resourceStrings.igx_grid_required_validation_error}}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['minlength']\">\r\n        {{grid.resourceStrings.igx_grid_min_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.minlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['maxlength']\">\r\n        {{grid.resourceStrings.igx_grid_max_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.maxlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['min']\">\r\n        {{grid.resourceStrings.igx_grid_min_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.min.min }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['max']\">\r\n        {{grid.resourceStrings.igx_grid_max_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.max.max }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['email']\">\r\n        {{grid.resourceStrings.igx_grid_email_validation_error }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['pattern']\">\r\n        {{grid.resourceStrings.igx_grid_pattern_validation_error}}\r\n    </div>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.IgxGridSelectionService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i5.IgxOverlayService, decorators: [{
                    type: Inject,
                    args: [IgxOverlayService]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i2.HammerGesturesManager }, { type: i3.PlatformUtil }]; } });
//# sourceMappingURL=data:application/json;base64,