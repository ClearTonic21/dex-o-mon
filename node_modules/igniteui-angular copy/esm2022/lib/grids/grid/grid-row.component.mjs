import { Component, ChangeDetectionStrategy, forwardRef } from '@angular/core';
import { IgxRowDirective } from '../row.directive';
import { IgxGridNotGroupedPipe, IgxGridTopLevelColumns, IgxGridCellStylesPipe, IgxGridCellStyleClassesPipe, IgxGridDataMapperPipe, IgxGridTransactionStatePipe } from '../common/pipes';
import { IgxGridExpandableCellComponent } from './expandable-cell.component';
import { IgxGridCellComponent } from '../cell.component';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxRowDragDirective } from '../row-drag.directive';
import { NgTemplateOutlet, NgIf, NgFor, NgStyle, NgClass } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxGridRowComponent extends IgxRowDirective {
    getContext(col, row) {
        return {
            $implicit: col,
            row
        };
    }
    get mrlRightPinnedOffset() {
        return !this.grid.isPinningToStart ?
            -this.grid.pinnedWidth - this.grid.headerFeaturesWidth + 'px' :
            null;
    }
    getContextMRL(pinnedCols, row) {
        return {
            $implicit: pinnedCols,
            row
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxGridRowComponent, isStandalone: true, selector: "igx-grid-row", providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxGridRowComponent) }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngTemplateOutlet=\"addRowUI ? addTemp : defaultTemp\"></ng-container>\r\n\r\n<ng-template #addTemp>\r\n    <div class=\"igx-grid__tr--inner\" [class.igx-grid__tr--add-animate]=\"triggerAddAnimationClass\" (animationend)=\"animationEndHandler()\">\r\n        <ng-container *ngTemplateOutlet='defaultTemp'></ng-container>\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultTemp>\r\n    <ng-container *ngIf=\"rowDraggable\">\r\n        <div [class]=\"resolveDragIndicatorClasses\" [igxRowDrag]=\"this\" (click)=\"$event.stopPropagation()\" [ghostTemplate]=\"this.grid.getDragGhostCustomTemplate()\">\r\n            <ng-container *ngTemplateOutlet=\"this.grid.dragIndicatorIconTemplate ? this.grid.dragIndicatorIconTemplate : this.grid.dragIndicatorIconBase\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"this.showRowSelectors\">\r\n        <div class=\"igx-grid__cbx-selection igx-grid__tr-action\" (pointerdown)=\"$event.preventDefault()\" (click)=\"onRowSelectorClick($event)\">\r\n            <ng-template *ngTemplateOutlet=\"\r\n                this.grid.rowSelectorTemplate ? this.grid.rowSelectorTemplate : rowSelectorBaseTemplate;\r\n                context: { $implicit: { index: viewIndex, rowID: key, key, selected: selected }}\">\r\n            </ng-template>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\r\n        <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\" (pointerdown)=\"$event.preventDefault()\" (click)=\"$event.stopPropagation()\"></div>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container *ngIf=\"!grid.hasColumnLayouts\">\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n            <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n                    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]=\"grid.trackColumnChanges\" #igxDirRef>\r\n            <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n        </ng-template>\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n            <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n                    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"grid.hasColumnLayouts\">\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n            <ng-container *ngTemplateOutlet=\"mrlPinnedTemplate; context: getContextMRL(pinnedColumns, this)\"></ng-container>\r\n        </ng-container>\r\n        <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxTopLevel\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]=\"grid.trackColumnChanges\" #igxDirRef>\r\n            <div class=\"igx-grid__mrl-block\" [ngStyle]=\"{\r\n                'grid-template-rows':col.getGridTemplate(true),\r\n                'grid-template-columns':col.getGridTemplate(false)\r\n            }\">\r\n                <ng-template ngFor let-col [ngForOf]=\"col.children\">\r\n                        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? mrlExpandableCellTemplate : mrlCellTemplate; context: getContext(col, this)\"></ng-container>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n            <ng-container *ngTemplateOutlet=\"mrlPinnedTemplate; context: getContextMRL(pinnedColumns, this)\"></ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #mrlPinnedTemplate let-pinnedColumns>\r\n    <div *ngFor=\"let col of pinnedColumns | igxTopLevel\" class=\"igx-grid__mrl-block\"\r\n        [class.igx-grid__td--pinned-last]=\"col.hasLastPinnedChildColumn\"\r\n        [class.igx-grid__td--pinned-first]=\"col.hasFirstPinnedChildColumn\"\r\n        [style.left]=\"mrlRightPinnedOffset\"\r\n        [ngStyle]=\"{\r\n            'grid-template-rows':col.getGridTemplate(true),\r\n            'grid-template-columns':col.getGridTemplate(false),\r\n            'z-index': col.pinned ? 1 : null\r\n        }\">\r\n        <ng-template ngFor let-col [ngForOf]=\"col.children\">\r\n                <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails? mrlExpandableCellTemplate : mrlCellTemplate; context: getContext(col, this)\"></ng-container>\r\n        </ng-template>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #rowSelectorBaseTemplate>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [checked]=\"selected\"\r\n            [readonly]=\"true\"\r\n            [disabled]=\"deleted\"\r\n            [disableRipple]=\"true\"\r\n            [disableTransitions]=\"grid.disableTransitions\"\r\n            [aria-label]=\"rowCheckboxAriaLabel\">\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #cellTemplate let-col>\r\n    <igx-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n        [class.igx-grid__td--bool]=\"col.dataType === 'boolean'\"\r\n        [class.igx-grid__td--image]=\"col.dataType === 'image'\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [firstPinned]=\"col.columnLayoutChild ? null : col.isFirstPinned\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [style.min-width]=\"col.width\"\r\n        [style.max-width]=\"col.width\"\r\n        [style.flex-basis]=\"col.width\"\r\n        [style.left]=\"col.rightPinnedOffset\"\r\n        [width]=\"col.getCellWidth()\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #expandableCellTemplate let-col>\r\n    <igx-expandable-grid-cell\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n        [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [expanded]=\"expanded\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [style.min-width]=\"col.width\"\r\n        [style.max-width]=\"col.width\"\r\n        [style.flex-basis]=\"col.width\"\r\n        [width]=\"col.getCellWidth()\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-expandable-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #mrlCellTemplate let-col>\r\n    <igx-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [style.grid-row-end]=\"col.rowEnd\"\r\n        [style.grid-column-end]=\"col.colEnd\"\r\n        [style.grid-row-start]=\"col.rowStart\"\r\n        [style.grid-column-start]=\"col.colStart\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [firstPinned]=\"col.columnLayoutChild ? null : col.isFirstPinned\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #mrlExpandableCellTemplate let-col>\r\n    <igx-expandable-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [expanded]=\"expanded\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [style.grid-row-end]=\"col.rowEnd\"\r\n        [style.grid-column-end]=\"col.colEnd\"\r\n        [style.grid-row-start]=\"col.rowStart\"\r\n        [style.grid-column-start]=\"col.colStart\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-expandable-grid-cell>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxRowDragDirective, selector: "[igxRowDrag]", inputs: ["igxRowDrag"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "component", type: IgxGridCellComponent, selector: "igx-grid-cell", inputs: ["column", "intRow", "row", "rowData", "columnData", "cellTemplate", "cellValidationErrorTemplate", "pinnedIndicator", "value", "formatter", "visibleColumnIndex", "cellSelectionMode", "lastSearchInfo", "lastPinned", "firstPinned", "editMode", "width", "active", "displayPinnedChip"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: IgxGridExpandableCellComponent, selector: "igx-expandable-grid-cell", inputs: ["expanded"] }, { kind: "pipe", type: IgxGridNotGroupedPipe, name: "igxNotGrouped" }, { kind: "pipe", type: IgxGridTopLevelColumns, name: "igxTopLevel" }, { kind: "pipe", type: IgxGridCellStylesPipe, name: "igxCellStyles" }, { kind: "pipe", type: IgxGridCellStyleClassesPipe, name: "igxCellStyleClasses" }, { kind: "pipe", type: IgxGridDataMapperPipe, name: "dataMapper" }, { kind: "pipe", type: IgxGridTransactionStatePipe, name: "transactionState" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-grid-row', providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxGridRowComponent) }], standalone: true, imports: [NgTemplateOutlet, NgIf, IgxRowDragDirective, NgFor, IgxGridForOfDirective, NgStyle, IgxCheckboxComponent, IgxGridCellComponent, NgClass, IgxGridExpandableCellComponent, IgxGridNotGroupedPipe, IgxGridTopLevelColumns, IgxGridCellStylesPipe, IgxGridCellStyleClassesPipe, IgxGridDataMapperPipe, IgxGridTransactionStatePipe], template: "<ng-container *ngTemplateOutlet=\"addRowUI ? addTemp : defaultTemp\"></ng-container>\r\n\r\n<ng-template #addTemp>\r\n    <div class=\"igx-grid__tr--inner\" [class.igx-grid__tr--add-animate]=\"triggerAddAnimationClass\" (animationend)=\"animationEndHandler()\">\r\n        <ng-container *ngTemplateOutlet='defaultTemp'></ng-container>\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultTemp>\r\n    <ng-container *ngIf=\"rowDraggable\">\r\n        <div [class]=\"resolveDragIndicatorClasses\" [igxRowDrag]=\"this\" (click)=\"$event.stopPropagation()\" [ghostTemplate]=\"this.grid.getDragGhostCustomTemplate()\">\r\n            <ng-container *ngTemplateOutlet=\"this.grid.dragIndicatorIconTemplate ? this.grid.dragIndicatorIconTemplate : this.grid.dragIndicatorIconBase\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"this.showRowSelectors\">\r\n        <div class=\"igx-grid__cbx-selection igx-grid__tr-action\" (pointerdown)=\"$event.preventDefault()\" (click)=\"onRowSelectorClick($event)\">\r\n            <ng-template *ngTemplateOutlet=\"\r\n                this.grid.rowSelectorTemplate ? this.grid.rowSelectorTemplate : rowSelectorBaseTemplate;\r\n                context: { $implicit: { index: viewIndex, rowID: key, key, selected: selected }}\">\r\n            </ng-template>\r\n        </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"grid.groupingExpressions.length > 0\">\r\n        <div class=\"igx-grid__row-indentation igx-grid__row-indentation--level-{{grid.groupingExpressions.length}}\" (pointerdown)=\"$event.preventDefault()\" (click)=\"$event.stopPropagation()\"></div>\r\n    </ng-container>\r\n\r\n\r\n    <ng-container *ngIf=\"!grid.hasColumnLayouts\">\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n            <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n                    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n        <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]=\"grid.trackColumnChanges\" #igxDirRef>\r\n            <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n        </ng-template>\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n            <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n                    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? expandableCellTemplate : cellTemplate; context: getContext(col, this)\"></ng-container>\r\n            </ng-template>\r\n        </ng-container>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"grid.hasColumnLayouts\">\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n            <ng-container *ngTemplateOutlet=\"mrlPinnedTemplate; context: getContextMRL(pinnedColumns, this)\"></ng-container>\r\n        </ng-container>\r\n        <ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxTopLevel\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]=\"grid.unpinnedWidth\" [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]=\"grid.trackColumnChanges\" #igxDirRef>\r\n            <div class=\"igx-grid__mrl-block\" [ngStyle]=\"{\r\n                'grid-template-rows':col.getGridTemplate(true),\r\n                'grid-template-columns':col.getGridTemplate(false)\r\n            }\">\r\n                <ng-template ngFor let-col [ngForOf]=\"col.children\">\r\n                        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails ? mrlExpandableCellTemplate : mrlCellTemplate; context: getContext(col, this)\"></ng-container>\r\n                </ng-template>\r\n            </div>\r\n        </ng-template>\r\n\r\n        <ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n            <ng-container *ngTemplateOutlet=\"mrlPinnedTemplate; context: getContextMRL(pinnedColumns, this)\"></ng-container>\r\n        </ng-container>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #mrlPinnedTemplate let-pinnedColumns>\r\n    <div *ngFor=\"let col of pinnedColumns | igxTopLevel\" class=\"igx-grid__mrl-block\"\r\n        [class.igx-grid__td--pinned-last]=\"col.hasLastPinnedChildColumn\"\r\n        [class.igx-grid__td--pinned-first]=\"col.hasFirstPinnedChildColumn\"\r\n        [style.left]=\"mrlRightPinnedOffset\"\r\n        [ngStyle]=\"{\r\n            'grid-template-rows':col.getGridTemplate(true),\r\n            'grid-template-columns':col.getGridTemplate(false),\r\n            'z-index': col.pinned ? 1 : null\r\n        }\">\r\n        <ng-template ngFor let-col [ngForOf]=\"col.children\">\r\n                <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 && grid.hasDetails? mrlExpandableCellTemplate : mrlCellTemplate; context: getContext(col, this)\"></ng-container>\r\n        </ng-template>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #rowSelectorBaseTemplate>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [checked]=\"selected\"\r\n            [readonly]=\"true\"\r\n            [disabled]=\"deleted\"\r\n            [disableRipple]=\"true\"\r\n            [disableTransitions]=\"grid.disableTransitions\"\r\n            [aria-label]=\"rowCheckboxAriaLabel\">\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #cellTemplate let-col>\r\n    <igx-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n        [class.igx-grid__td--bool]=\"col.dataType === 'boolean'\"\r\n        [class.igx-grid__td--image]=\"col.dataType === 'image'\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [firstPinned]=\"col.columnLayoutChild ? null : col.isFirstPinned\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [style.min-width]=\"col.width\"\r\n        [style.max-width]=\"col.width\"\r\n        [style.flex-basis]=\"col.width\"\r\n        [style.left]=\"col.rightPinnedOffset\"\r\n        [width]=\"col.getCellWidth()\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #expandableCellTemplate let-col>\r\n    <igx-expandable-grid-cell\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n        [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [expanded]=\"expanded\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [style.min-width]=\"col.width\"\r\n        [style.max-width]=\"col.width\"\r\n        [style.flex-basis]=\"col.width\"\r\n        [width]=\"col.getCellWidth()\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-expandable-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #mrlCellTemplate let-col>\r\n    <igx-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [style.grid-row-end]=\"col.rowEnd\"\r\n        [style.grid-column-end]=\"col.colEnd\"\r\n        [style.grid-row-start]=\"col.rowStart\"\r\n        [style.grid-column-start]=\"col.colStart\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [firstPinned]=\"col.columnLayoutChild ? null : col.isFirstPinned\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-grid-cell>\r\n</ng-template>\r\n\r\n<ng-template #mrlExpandableCellTemplate let-col>\r\n    <igx-expandable-grid-cell\r\n        class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n        [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n\r\n        [class.igx-grid__td--pinned]=\"col.pinned\"\r\n        [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n        [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n        [expanded]=\"expanded\"\r\n        [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n        [column]=\"col\"\r\n        [style.grid-row-end]=\"col.rowEnd\"\r\n        [style.grid-column-end]=\"col.colEnd\"\r\n        [style.grid-row-start]=\"col.rowStart\"\r\n        [style.grid-column-start]=\"col.colStart\"\r\n        [lastPinned]=\"col.columnLayoutChild ? null : col.isLastPinned\"\r\n        [formatter]=\"col.formatter\"\r\n        [intRow]=\"this\"\r\n        [style.min-height.px]=\"cellHeight\"\r\n        [rowData]=\"data\"\r\n        [visibleColumnIndex]=\"col.visibleIndex\"\r\n        [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n        [cellTemplate]=\"col.bodyTemplate\"\r\n        [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n        [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n        [active]=\"isCellActive(col.visibleIndex)\"\r\n        [cellSelectionMode]=\"grid.cellSelection\"\r\n        [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n        #cell>\r\n    </igx-expandable-grid-cell>\r\n</ng-template>\r\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,