import { Component, ContentChild, Input, Output, EventEmitter, Inject } from '@angular/core';
import { first } from 'rxjs/operators';
import { BaseToolbarDirective } from './grid-toolbar.base';
import { IgxExcelTextDirective, IgxCSVTextDirective } from './common';
import { CsvFileTypes, IgxCsvExporterOptions, IgxExcelExporterOptions } from '../../services/public_api';
import { IgxToggleDirective } from '../../directives/toggle/toggle.directive';
import { IgxToolbarToken } from './token';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import { IgxIconComponent } from '../../icon/icon.component';
import { IgxRippleDirective } from '../../directives/ripple/ripple.directive';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../services/public_api";
import * as i2 from "./token";
/**
 * Provides a pre-configured exporter component for the grid.
 *
 * @remarks
 * This component still needs the actual exporter service(s) provided in the DI chain
 * in order to export something.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 */
export class IgxGridToolbarExporterComponent extends BaseToolbarDirective {
    constructor(toolbar, excelExporter, csvExporter) {
        super(toolbar);
        this.excelExporter = excelExporter;
        this.csvExporter = csvExporter;
        /**
         * Show entry for CSV export.
         */
        this.exportCSV = true;
        /**
         * Show entry for Excel export.
         */
        this.exportExcel = true;
        /**
         * The name for the exported file.
         */
        this.filename = 'ExportedData';
        /**
         * Emitted when starting an export operation. Re-emitted additionally
         * by the grid itself.
         */
        this.exportStarted = new EventEmitter();
        /**
         * Emitted on successful ending of an export operation.
         */
        this.exportEnded = new EventEmitter();
        /**
         * Indicates whether there is an export in progress.
         */
        this.isExporting = false;
    }
    export(type, toggleRef) {
        let options;
        let exporter;
        toggleRef?.close();
        switch (type) {
            case 'csv':
                options = new IgxCsvExporterOptions(this.filename, CsvFileTypes.CSV);
                exporter = this.csvExporter;
                break;
            case 'excel':
                options = new IgxExcelExporterOptions(this.filename);
                exporter = this.excelExporter;
        }
        const args = { exporter, options, grid: this.grid, cancel: false };
        this.exportStarted.emit(args);
        this.grid.toolbarExporting.emit(args);
        this.isExporting = true;
        this.toolbar.showProgress = true;
        if (args.cancel) {
            return;
        }
        exporter.exportEnded.pipe(first()).subscribe(() => {
            this.exportEnded.emit();
            this.isExporting = false;
            this.toolbar.showProgress = false;
        });
        exporter.export(this.grid, options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridToolbarExporterComponent, deps: [{ token: IgxToolbarToken }, { token: i1.IgxExcelExporterService }, { token: i1.IgxCsvExporterService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxGridToolbarExporterComponent, isStandalone: true, selector: "igx-grid-toolbar-exporter", inputs: { exportCSV: "exportCSV", exportExcel: "exportExcel", filename: "filename" }, outputs: { exportStarted: "exportStarted", exportEnded: "exportEnded" }, queries: [{ propertyName: "hasExcelAttr", first: true, predicate: IgxExcelTextDirective, descendants: true }, { propertyName: "hasCSVAttr", first: true, predicate: IgxCSVTextDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<button [title]=\"grid?.resourceStrings.igx_grid_toolbar_exporter_button_tooltip\" [disabled]=\"isExporting\"\r\n    igxButton=\"outlined\" type=\"button\" [displayDensity]=\"grid.displayDensity\" igxRipple #btn (click)=\"toggle(btn, toggleRef)\">\r\n\r\n    <igx-icon>import_export</igx-icon>\r\n    <span #ref>\r\n        <ng-content></ng-content>\r\n    </span>\r\n    <span *ngIf=\"!ref.childNodes.length\">\r\n        {{ grid?.resourceStrings.igx_grid_toolbar_exporter_button_label }}\r\n    </span>\r\n    <igx-icon>arrow_drop_down</igx-icon>\r\n</button>\r\n\r\n<div class=\"igx-grid-toolbar__dropdown\" id=\"btnExport\">\r\n    <ul class=\"igx-grid-toolbar__dd-list\" igxToggle #toggleRef=\"toggle\">\r\n        <li *ngIf=\"exportExcel\" #btnExportExcel id=\"btnExportExcel\"\r\n            class=\"igx-grid-toolbar__dd-list-items\" igxRipple (click)=\"export('excel', toggleRef)\">\r\n            <ng-template #excel>\r\n                <ng-content select=[excelText],excel-text></ng-content>\r\n            </ng-template>\r\n            <excel-text *ngIf=\"!hasExcelAttr\">\r\n                {{ grid?.resourceStrings.igx_grid_toolbar_exporter_excel_entry_text}}\r\n            </excel-text>\r\n            <ng-container *ngTemplateOutlet=\"excel\"></ng-container>\r\n        </li>\r\n\r\n        <li *ngIf=\"exportCSV\" #btnExportCsv id=\"btnExportCsv\" class=\"igx-grid-toolbar__dd-list-items\"\r\n            igxRipple (click)=\"export('csv', toggleRef)\">\r\n            <ng-template #csv>\r\n                <ng-content select=[csvText],csv-text></ng-content>\r\n            </ng-template>\r\n            <csv-text *ngIf=\"!hasCSVAttr\">\r\n                {{ grid?.resourceStrings.igx_grid_toolbar_exporter_csv_entry_text }}</csv-text>\r\n            <ng-container *ngTemplateOutlet=\"csv\"></ng-container>\r\n        </li>\r\n    </ul>\r\n</div>\r\n", dependencies: [{ kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "directive", type: IgxExcelTextDirective, selector: "[excelText],excel-text" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxCSVTextDirective, selector: "[csvText],csv-text" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridToolbarExporterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-exporter', standalone: true, imports: [IgxButtonDirective, IgxRippleDirective, IgxIconComponent, NgIf, IgxToggleDirective, IgxExcelTextDirective, NgTemplateOutlet, IgxCSVTextDirective], template: "<button [title]=\"grid?.resourceStrings.igx_grid_toolbar_exporter_button_tooltip\" [disabled]=\"isExporting\"\r\n    igxButton=\"outlined\" type=\"button\" [displayDensity]=\"grid.displayDensity\" igxRipple #btn (click)=\"toggle(btn, toggleRef)\">\r\n\r\n    <igx-icon>import_export</igx-icon>\r\n    <span #ref>\r\n        <ng-content></ng-content>\r\n    </span>\r\n    <span *ngIf=\"!ref.childNodes.length\">\r\n        {{ grid?.resourceStrings.igx_grid_toolbar_exporter_button_label }}\r\n    </span>\r\n    <igx-icon>arrow_drop_down</igx-icon>\r\n</button>\r\n\r\n<div class=\"igx-grid-toolbar__dropdown\" id=\"btnExport\">\r\n    <ul class=\"igx-grid-toolbar__dd-list\" igxToggle #toggleRef=\"toggle\">\r\n        <li *ngIf=\"exportExcel\" #btnExportExcel id=\"btnExportExcel\"\r\n            class=\"igx-grid-toolbar__dd-list-items\" igxRipple (click)=\"export('excel', toggleRef)\">\r\n            <ng-template #excel>\r\n                <ng-content select=[excelText],excel-text></ng-content>\r\n            </ng-template>\r\n            <excel-text *ngIf=\"!hasExcelAttr\">\r\n                {{ grid?.resourceStrings.igx_grid_toolbar_exporter_excel_entry_text}}\r\n            </excel-text>\r\n            <ng-container *ngTemplateOutlet=\"excel\"></ng-container>\r\n        </li>\r\n\r\n        <li *ngIf=\"exportCSV\" #btnExportCsv id=\"btnExportCsv\" class=\"igx-grid-toolbar__dd-list-items\"\r\n            igxRipple (click)=\"export('csv', toggleRef)\">\r\n            <ng-template #csv>\r\n                <ng-content select=[csvText],csv-text></ng-content>\r\n            </ng-template>\r\n            <csv-text *ngIf=\"!hasCSVAttr\">\r\n                {{ grid?.resourceStrings.igx_grid_toolbar_exporter_csv_entry_text }}</csv-text>\r\n            <ng-container *ngTemplateOutlet=\"csv\"></ng-container>\r\n        </li>\r\n    </ul>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i2.IgxToolbarToken, decorators: [{
                    type: Inject,
                    args: [IgxToolbarToken]
                }] }, { type: i1.IgxExcelExporterService }, { type: i1.IgxCsvExporterService }]; }, propDecorators: { hasExcelAttr: [{
                type: ContentChild,
                args: [IgxExcelTextDirective]
            }], hasCSVAttr: [{
                type: ContentChild,
                args: [IgxCSVTextDirective]
            }], exportCSV: [{
                type: Input
            }], exportExcel: [{
                type: Input
            }], filename: [{
                type: Input
            }], exportStarted: [{
                type: Output
            }], exportEnded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,