import { Component, ViewChild } from '@angular/core';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
import { IgxColumnPinningDirective } from '../column-actions/column-pinning.directive';
import { BaseToolbarColumnActionsDirective } from './grid-toolbar.base';
import { IgxToggleDirective } from '../../directives/toggle/toggle.directive';
import { IgxIconComponent } from '../../icon/icon.component';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { NgIf, AsyncPipe } from '@angular/common';
import * as i0 from "@angular/core";
/**
 * Provides a pre-configured column pinning component for the grid.
 *
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 *  <igx-grid-toolbar-pinning></igx-grid-toolbar-pinning>
 * ```
 */
export class IgxGridToolbarPinningComponent extends BaseToolbarColumnActionsDirective {
    set content(content) {
        this.columnActionsUI = content;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridToolbarPinningComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxGridToolbarPinningComponent, isStandalone: true, selector: "igx-grid-toolbar-pinning", viewQueries: [{ propertyName: "content", first: true, predicate: IgxColumnPinningDirective, descendants: true, read: IgxColumnActionsComponent }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"grid.rendered$ | async\">\r\n    <button [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\" #btn igxButton=\"outlined\" type=\"button\"\r\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\" [displayDensity]=\"grid.displayDensity\">\r\n        <igx-icon family=\"imx-icons\" [name]=\"!grid.pinnedColumnsCount ? 'unpin-left' : 'pin-left'\"></igx-icon>\r\n        <span>{{ grid.pinnedColumnsCount }}</span>\r\n        <span>{{ buttonText }}</span>\r\n    </button>\r\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\r\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\r\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\r\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\r\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\r\n    </igx-column-actions>\r\n</ng-container>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "component", type: IgxColumnActionsComponent, selector: "igx-column-actions", inputs: ["grid", "indentation", "columnsAreaMaxHeight", "hideFilter", "title", "filterColumnsPrompt", "filterCriteria", "columnDisplayOrder", "uncheckAllText", "checkAllText", "id"], outputs: ["columnToggled"] }, { kind: "directive", type: IgxColumnPinningDirective, selector: "[igxColumnPinning]" }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "pipe", type: AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridToolbarPinningComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-pinning', standalone: true, imports: [NgIf, IgxButtonDirective, IgxIconComponent, IgxColumnActionsComponent, IgxColumnPinningDirective, IgxToggleDirective, AsyncPipe], template: "<ng-container *ngIf=\"grid.rendered$ | async\">\r\n    <button [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\" #btn igxButton=\"outlined\" type=\"button\"\r\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\" [displayDensity]=\"grid.displayDensity\">\r\n        <igx-icon family=\"imx-icons\" [name]=\"!grid.pinnedColumnsCount ? 'unpin-left' : 'pin-left'\"></igx-icon>\r\n        <span>{{ grid.pinnedColumnsCount }}</span>\r\n        <span>{{ buttonText }}</span>\r\n    </button>\r\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\r\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\r\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\r\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\r\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\r\n    </igx-column-actions>\r\n</ng-container>\r\n" }]
        }], propDecorators: { content: [{
                type: ViewChild,
                args: [IgxColumnPinningDirective, { read: IgxColumnActionsComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFbEQ7Ozs7Ozs7Ozs7O0dBV0c7QUFPSCxNQUFNLE9BQU8sOEJBQStCLFNBQVEsaUNBQWlDO0lBRWpGLElBQ1ksT0FBTyxDQUFDLE9BQWtDO1FBQ2xELElBQUksQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDO0lBQ25DLENBQUM7OEdBTFEsOEJBQThCO2tHQUE5Qiw4QkFBOEIsNkhBRTVCLHlCQUF5QiwyQkFBUyx5QkFBeUIsb0RDN0IxRSxncUNBY0EsNENEV2MsSUFBSSw2RkFBRSxrQkFBa0Isd01BQUUsZ0JBQWdCLDJGQUFFLHlCQUF5QixrUkFBRSx5QkFBeUIsK0RBQUUsa0JBQWtCLDBKQUFFLFNBQVM7OzJGQUVoSSw4QkFBOEI7a0JBTjFDLFNBQVM7K0JBQ0ksMEJBQTBCLGNBRXhCLElBQUksV0FDUCxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSx5QkFBeUIsRUFBRSx5QkFBeUIsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLENBQUM7OEJBSzlILE9BQU87c0JBRGxCLFNBQVM7dUJBQUMseUJBQXlCLEVBQUUsRUFBQyxJQUFJLEVBQUUseUJBQXlCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbi1hY3Rpb25zL2NvbHVtbi1hY3Rpb25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5QaW5uaW5nRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29sdW1uLWFjdGlvbnMvY29sdW1uLXBpbm5pbmcuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJhc2VUb29sYmFyQ29sdW1uQWN0aW9uc0RpcmVjdGl2ZSB9IGZyb20gJy4vZ3JpZC10b29sYmFyLmJhc2UnO1xuaW1wb3J0IHsgSWd4VG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hCdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nSWYsIEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qKlxuICogUHJvdmlkZXMgYSBwcmUtY29uZmlndXJlZCBjb2x1bW4gcGlubmluZyBjb21wb25lbnQgZm9yIHRoZSBncmlkLlxuICpcbiAqXG4gKiBAaWd4TW9kdWxlIElneEdyaWRUb29sYmFyTW9kdWxlXG4gKiBAaWd4UGFyZW50IElneEdyaWRUb29sYmFyQ29tcG9uZW50XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqICA8aWd4LWdyaWQtdG9vbGJhci1waW5uaW5nPjwvaWd4LWdyaWQtdG9vbGJhci1waW5uaW5nPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhci1waW5uaW5nJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW05nSWYsIElneEJ1dHRvbkRpcmVjdGl2ZSwgSWd4SWNvbkNvbXBvbmVudCwgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCwgSWd4Q29sdW1uUGlubmluZ0RpcmVjdGl2ZSwgSWd4VG9nZ2xlRGlyZWN0aXZlLCBBc3luY1BpcGVdXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRUb29sYmFyUGlubmluZ0NvbXBvbmVudCBleHRlbmRzIEJhc2VUb29sYmFyQ29sdW1uQWN0aW9uc0RpcmVjdGl2ZSB7XG5cbiAgICBAVmlld0NoaWxkKElneENvbHVtblBpbm5pbmdEaXJlY3RpdmUsIHtyZWFkOiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50fSlcbiAgICBwcml2YXRlIHNldCBjb250ZW50KGNvbnRlbnQ6IElneENvbHVtbkFjdGlvbnNDb21wb25lbnQpIHtcbiAgICAgICAgdGhpcy5jb2x1bW5BY3Rpb25zVUkgPSBjb250ZW50O1xuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJncmlkLnJlbmRlcmVkJCB8IGFzeW5jXCI+XHJcbiAgICA8YnV0dG9uIFt0aXRsZV09XCJncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfdG9vbGJhcl9waW5uaW5nX2J1dHRvbl90b29sdGlwXCIgI2J0biBpZ3hCdXR0b249XCJvdXRsaW5lZFwiIHR5cGU9XCJidXR0b25cIlxyXG4gICAgICAgIG5hbWU9XCJidG5Db2x1bW5QaW5uaW5nXCIgKGNsaWNrKT1cInRvZ2dsZShidG4sIHJlZiwgYWN0aW9ucylcIiBbZGlzcGxheURlbnNpdHldPVwiZ3JpZC5kaXNwbGF5RGVuc2l0eVwiPlxyXG4gICAgICAgIDxpZ3gtaWNvbiBmYW1pbHk9XCJpbXgtaWNvbnNcIiBbbmFtZV09XCIhZ3JpZC5waW5uZWRDb2x1bW5zQ291bnQgPyAndW5waW4tbGVmdCcgOiAncGluLWxlZnQnXCI+PC9pZ3gtaWNvbj5cclxuICAgICAgICA8c3Bhbj57eyBncmlkLnBpbm5lZENvbHVtbnNDb3VudCB9fTwvc3Bhbj5cclxuICAgICAgICA8c3Bhbj57eyBidXR0b25UZXh0IH19PC9zcGFuPlxyXG4gICAgPC9idXR0b24+XHJcbiAgICA8aWd4LWNvbHVtbi1hY3Rpb25zICNhY3Rpb25zIGlneENvbHVtblBpbm5pbmcgaWd4VG9nZ2xlIChvcGVuZWQpPVwiZm9jdXNTZWFyY2gocmVmLmVsZW1lbnQpXCIgI3JlZj1cInRvZ2dsZVwiXHJcbiAgICAgICAgW2dyaWRdPVwiZ3JpZFwiIFt0aXRsZV09XCJ0aXRsZSB8fCBncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfdG9vbGJhcl9waW5uaW5nX3RpdGxlXCJcclxuICAgICAgICBbZmlsdGVyQ29sdW1uc1Byb21wdF09XCJwcm9tcHQgfHwgZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Rvb2xiYXJfYWN0aW9uc19maWx0ZXJfcHJvbXB0XCJcclxuICAgICAgICBbaGlkZUZpbHRlcl09XCJoaWRlRmlsdGVyXCIgW2ZpbHRlckNyaXRlcmlhXT1cImZpbHRlckNyaXRlcmlhXCIgW2NvbHVtbkRpc3BsYXlPcmRlcl09XCJjb2x1bW5EaXNwbGF5T3JkZXJcIiBbY29sdW1uc0FyZWFNYXhIZWlnaHRdPVwiY29sdW1uc0FyZWFNYXhIZWlnaHRcIlxyXG4gICAgICAgIFt1bmNoZWNrQWxsVGV4dF09XCJ1bmNoZWNrQWxsVGV4dFwiIFtjaGVja0FsbFRleHRdPVwiY2hlY2tBbGxUZXh0XCIgW2luZGVudGF0aW9uXT1cImluZGVudGV0aW9uXCI+XHJcbiAgICA8L2lneC1jb2x1bW4tYWN0aW9ucz5cclxuPC9uZy1jb250YWluZXI+XHJcbiJdfQ==