import { Component, forwardRef, Input, ViewChildren, HostBinding, ChangeDetectionStrategy } from '@angular/core';
import { IgxRowDirective } from '../row.directive';
import { IgxGridNotGroupedPipe, IgxGridCellStylesPipe, IgxGridCellStyleClassesPipe, IgxGridDataMapperPipe, IgxGridTransactionStatePipe } from '../common/pipes';
import { IgxCheckboxComponent } from '../../checkbox/checkbox.component';
import { IgxTreeGridCellComponent } from './tree-cell.component';
import { IgxGridCellComponent } from '../cell.component';
import { IgxGridForOfDirective } from '../../directives/for-of/for_of.directive';
import { IgxRowDragDirective } from '../row-drag.directive';
import { NgTemplateOutlet, NgIf, NgClass, NgStyle, NgFor } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxTreeGridRowComponent extends IgxRowDirective {
    /**
     * The `ITreeGridRecord` passed to the row component.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * const treeRow = row.treeRow;
     * ```
     */
    get treeRow() {
        return this._treeRow;
    }
    set treeRow(value) {
        if (this._treeRow !== value) {
            this._treeRow = value;
            this.data = this._treeRow.data;
        }
    }
    /**
     * Sets whether the row is pinned.
     * Default value is `false`.
     * ```typescript
     * this.grid.selectedRows[0].pinned = true;
     * ```
     */
    set pinned(value) {
        if (value) {
            this.grid.pinRow(this.key);
        }
        else {
            this.grid.unpinRow(this.key);
        }
    }
    /**
     * Gets whether the row is pinned.
     * ```typescript
     * let isPinned = row.pinned;
     * ```
     */
    get pinned() {
        return this.grid.isRecordPinned(this._treeRow);
    }
    /**
     * @hidden
     */
    get isRoot() {
        let treeRec = this.treeRow;
        const isPinnedArea = this.pinned && !this.disabled;
        if (isPinnedArea) {
            treeRec = this.grid.unpinnedRecords.find(x => x.data === this.data);
        }
        return treeRec?.level === 0;
    }
    /**
     * @hidden
     */
    get hasChildren() {
        return true;
    }
    /**
     * Returns a value indicating whether the row component is expanded.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * const expanded = row.expanded;
     * ```
     */
    get expanded() {
        return this._treeRow.expanded;
    }
    /**
     * Sets a value indicating whether the row component is expanded.
     *
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * row.expanded = true;
     * ```
     */
    set expanded(value) {
        this.grid.gridAPI.set_row_expansion_state(this._treeRow.key, value);
    }
    /**
     * @hidden
     * @internal
     */
    get viewIndex() {
        return this.index + this.grid.page * this.grid.perPage;
    }
    /**
     * @hidden
     */
    get showIndicator() {
        return this.grid.loadChildrenOnDemand ?
            this.grid.expansionStates.has(this.key) ?
                this.treeRow.children && this.treeRow.children.length :
                this.grid.hasChildrenKey ?
                    this.data[this.grid.hasChildrenKey] :
                    true :
            this.treeRow.children && this.treeRow.children.length;
    }
    /**
     * @hidden
     */
    get indeterminate() {
        return this.selectionService.isRowInIndeterminateState(this.key);
    }
    /**
     * @hidden
     */
    ngDoCheck() {
        this.isLoading = this.grid.loadChildrenOnDemand ? this.grid.loadingRows.has(this.key) : false;
        super.ngDoCheck();
    }
    /**
     * Spawns the add child row UI for the specific row.
     *
     * @example
     * ```typescript
     * const row = this.grid.getRowByKey(1) as IgxTreeGridRowComponent;
     * row.beginAddChild();
     * ```
     * @param rowID
     */
    beginAddChild() {
        this.grid.crudService.enterAddRowMode(this, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTreeGridRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxTreeGridRowComponent, isStandalone: true, selector: "igx-tree-grid-row", inputs: { treeRow: "treeRow" }, host: { properties: { "attr.aria-expanded": "this.expanded" } }, providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }], viewQueries: [{ propertyName: "_cells", predicate: ["treeCell"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngTemplateOutlet='addRowUI ? addTemp : defaultTemp'></ng-container>\r\n\r\n<ng-template #addTemp>\r\n    <div class='igx-grid__tr--inner' [class.igx-grid__tr--add-animate]='triggerAddAnimationClass' (animationend)='animationEndHandler()'>\r\n        <ng-container *ngTemplateOutlet='defaultTemp'></ng-container>\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultTemp>\r\n<ng-container *ngIf=\"rowDraggable\">\r\n    <div [class]=\"resolveDragIndicatorClasses\" [igxRowDrag]=\"this\" (click)=\"$event.stopPropagation()\" [ghostTemplate]=\"this.grid.getDragGhostCustomTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"this.grid.dragIndicatorIconTemplate ? this.grid.dragIndicatorIconTemplate : this.grid.dragIndicatorIconBase\"></ng-container>\r\n    </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"showRowSelectors\">\r\n    <div class=\"igx-grid__cbx-selection igx-grid__tr-action\" (click)=\"onRowSelectorClick($event)\" (pointerdown)=\"$event.preventDefault()\">\r\n        <ng-template *ngTemplateOutlet=\"\r\n            this.grid.rowSelectorTemplate ? this.grid.rowSelectorTemplate : rowSelectorBaseTemplate;\r\n            context: { $implicit: { index: viewIndex, rowID: key, key, selected: selected }}\">\r\n        </ng-template>\r\n    </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\r\n</ng-container>\r\n<ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\r\n    <ng-template #cellTemplate>\r\n        <igx-grid-cell\r\n            class=\"igx-grid__td igx-grid__td--fw\"\r\n            [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n            [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n            [class.igx-grid__td--bool]=\"col.dataType === 'boolean'\"\r\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n            [column]=\"col\"\r\n            [formatter]=\"col.formatter\"\r\n            [intRow]=\"this\"\r\n            [style.min-height.px]=\"cellHeight\"\r\n            [rowData]=\"data\"\r\n            [style.min-width]=\"col.width\"\r\n            [style.max-width]=\"col.width\"\r\n            [style.flex-basis]=\"col.width\"\r\n            [width]=\"col.getCellWidth()\"\r\n            [visibleColumnIndex]=\"col.visibleIndex\"\r\n            [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n            [cellTemplate]=\"col.bodyTemplate\"\r\n            [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [cellSelectionMode]=\"grid.cellSelection\"\r\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n            #treeCell>\r\n        </igx-grid-cell>\r\n    </ng-template>\r\n    <ng-template #treeCellTemplate>\r\n        <igx-tree-grid-cell\r\n            class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n            [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n            [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [level]=\"treeRow.level\"\r\n            [expanded]=\"expanded\"\r\n            [showIndicator]=\"showIndicator\"\r\n            [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n            [column]=\"col\"\r\n            [formatter]=\"col.formatter\"\r\n            [intRow]=\"this\"\r\n            [style.min-height.px]=\"cellHeight\"\r\n            [rowData]=\"data\"\r\n            [style.min-width]=\"col.width\"\r\n            [style.max-width]=\"col.width\"\r\n            [style.flex-basis]=\"col.width\"\r\n            [width]=\"col.getCellWidth()\"\r\n            [visibleColumnIndex]=\"col.visibleIndex\"\r\n            [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n            [isLoading]=\"isLoading\"\r\n            [cellTemplate]=\"col.bodyTemplate\"\r\n            [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [cellSelectionMode]=\"grid.cellSelection\"\r\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n            #treeCell>\r\n        </igx-tree-grid-cell>\r\n    </ng-template>\r\n    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\r\n</ng-template>\r\n<ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\r\n</ng-container>\r\n<ng-template #rowSelectorBaseTemplate>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [readonly]=\"true\"\r\n            [checked]=\"selected\"\r\n            [indeterminate]=\"indeterminate\"\r\n            [disabled]=\"deleted\"\r\n            [disableRipple]=\"true\"\r\n            [disableTransitions]=\"grid.disableTransitions\"\r\n            [aria-label]=\"rowCheckboxAriaLabel\">\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #pinnedCellsTemplate let-col>\r\n    <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n        <ng-template #cellTemplate>\r\n            <igx-grid-cell\r\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--pinned\"\r\n                [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n                [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n                [column]=\"col\"\r\n                [formatter]=\"col.formatter\"\r\n                [intRow]=\"this\"\r\n                [firstPinned]=\"col.isFirstPinned\"\r\n                [lastPinned]=\"col.isLastPinned\"\r\n                [style.min-height.px]=\"cellHeight\"\r\n                [rowData]=\"data\"\r\n                [style.min-width]=\"col.width\"\r\n                [style.max-width]=\"col.width\"\r\n                [style.flex-basis]=\"col.width\"\r\n                [style.left]=\"col.rightPinnedOffset\"\r\n                [width]=\"col.getCellWidth()\"\r\n                [visibleColumnIndex]=\"col.visibleIndex\"\r\n                [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n                [cellTemplate]=\"col.bodyTemplate\"\r\n                [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n                [active]=\"isCellActive(col.visibleIndex)\"\r\n                [cellSelectionMode]=\"grid.cellSelection\"\r\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n                #treeCell>\r\n            </igx-grid-cell>\r\n            </ng-template>\r\n        <ng-template #treeCellTemplate>\r\n            <igx-tree-grid-cell\r\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell igx-grid__td--pinned\"\r\n                [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n                [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [level]=\"treeRow.level\"\r\n                [expanded]=\"expanded\"\r\n                [showIndicator]=\"showIndicator\"\r\n                [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n                [column]=\"col\"\r\n                [formatter]=\"col.formatter\"\r\n                [intRow]=\"this\"\r\n                [lastPinned]=\"col.isLastPinned\"\r\n                [style.min-height.px]=\"cellHeight\"\r\n                [rowData]=\"data\"\r\n                [style.min-width]=\"col.width\"\r\n                [style.max-width]=\"col.width\"\r\n                [style.flex-basis]=\"col.width\"\r\n                [style.left]=\"col.rightPinnedOffset\"\r\n                [width]=\"col.getCellWidth()\"\r\n                [visibleColumnIndex]=\"col.visibleIndex\"\r\n                [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n                [isLoading]=\"isLoading\"\r\n                [cellTemplate]=\"col.bodyTemplate\"\r\n                [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n                [active]=\"isCellActive(col.visibleIndex)\"\r\n                [cellSelectionMode]=\"grid.cellSelection\"\r\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n                #treeCell>\r\n            </igx-tree-grid-cell>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\r\n    </ng-template>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxRowDragDirective, selector: "[igxRowDrag]", inputs: ["igxRowDrag"] }, { kind: "directive", type: IgxGridForOfDirective, selector: "[igxGridFor][igxGridForOf]", inputs: ["igxGridForOf", "igxGridForOfUniqueSizeCache", "igxGridForOfVariableSizes"], outputs: ["dataChanging"] }, { kind: "component", type: IgxGridCellComponent, selector: "igx-grid-cell", inputs: ["column", "intRow", "row", "rowData", "columnData", "cellTemplate", "cellValidationErrorTemplate", "pinnedIndicator", "value", "formatter", "visibleColumnIndex", "cellSelectionMode", "lastSearchInfo", "lastPinned", "firstPinned", "editMode", "width", "active", "displayPinnedChip"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: IgxTreeGridCellComponent, selector: "igx-tree-grid-cell", inputs: ["level", "showIndicator", "isLoading", "row"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "pipe", type: IgxGridNotGroupedPipe, name: "igxNotGrouped" }, { kind: "pipe", type: IgxGridCellStylesPipe, name: "igxCellStyles" }, { kind: "pipe", type: IgxGridCellStyleClassesPipe, name: "igxCellStyleClasses" }, { kind: "pipe", type: IgxGridDataMapperPipe, name: "dataMapper" }, { kind: "pipe", type: IgxGridTransactionStatePipe, name: "transactionState" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTreeGridRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-tree-grid-row', providers: [{ provide: IgxRowDirective, useExisting: forwardRef(() => IgxTreeGridRowComponent) }], standalone: true, imports: [NgTemplateOutlet, NgIf, IgxRowDragDirective, IgxGridForOfDirective, IgxGridCellComponent, NgClass, NgStyle, IgxTreeGridCellComponent, IgxCheckboxComponent, NgFor, IgxGridNotGroupedPipe, IgxGridCellStylesPipe, IgxGridCellStyleClassesPipe, IgxGridDataMapperPipe, IgxGridTransactionStatePipe], template: "<ng-container *ngTemplateOutlet='addRowUI ? addTemp : defaultTemp'></ng-container>\r\n\r\n<ng-template #addTemp>\r\n    <div class='igx-grid__tr--inner' [class.igx-grid__tr--add-animate]='triggerAddAnimationClass' (animationend)='animationEndHandler()'>\r\n        <ng-container *ngTemplateOutlet='defaultTemp'></ng-container>\r\n    </div>\r\n</ng-template>\r\n<ng-template #defaultTemp>\r\n<ng-container *ngIf=\"rowDraggable\">\r\n    <div [class]=\"resolveDragIndicatorClasses\" [igxRowDrag]=\"this\" (click)=\"$event.stopPropagation()\" [ghostTemplate]=\"this.grid.getDragGhostCustomTemplate()\">\r\n        <ng-container *ngTemplateOutlet=\"this.grid.dragIndicatorIconTemplate ? this.grid.dragIndicatorIconTemplate : this.grid.dragIndicatorIconBase\"></ng-container>\r\n    </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"showRowSelectors\">\r\n    <div class=\"igx-grid__cbx-selection igx-grid__tr-action\" (click)=\"onRowSelectorClick($event)\" (pointerdown)=\"$event.preventDefault()\">\r\n        <ng-template *ngTemplateOutlet=\"\r\n            this.grid.rowSelectorTemplate ? this.grid.rowSelectorTemplate : rowSelectorBaseTemplate;\r\n            context: { $implicit: { index: viewIndex, rowID: key, key, selected: selected }}\">\r\n        </ng-template>\r\n    </div>\r\n</ng-container>\r\n<ng-container *ngIf=\"pinnedColumns.length > 0 && grid.isPinningToStart\">\r\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\r\n</ng-container>\r\n<ng-template igxGridFor let-col [igxGridForOf]=\"unpinnedColumns | igxNotGrouped\" [igxForScrollContainer]=\"grid.parentVirtDir\" let-colIndex=\"index\" [igxForScrollOrientation]=\"'horizontal'\" [igxForContainerSize]='grid.unpinnedWidth' [igxForSizePropName]=\"'calcPixelWidth'\" [igxForTrackBy]='grid.trackColumnChanges' #igxDirRef>\r\n    <ng-template #cellTemplate>\r\n        <igx-grid-cell\r\n            class=\"igx-grid__td igx-grid__td--fw\"\r\n            [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n            [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n            [class.igx-grid__td--bool]=\"col.dataType === 'boolean'\"\r\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n            [column]=\"col\"\r\n            [formatter]=\"col.formatter\"\r\n            [intRow]=\"this\"\r\n            [style.min-height.px]=\"cellHeight\"\r\n            [rowData]=\"data\"\r\n            [style.min-width]=\"col.width\"\r\n            [style.max-width]=\"col.width\"\r\n            [style.flex-basis]=\"col.width\"\r\n            [width]=\"col.getCellWidth()\"\r\n            [visibleColumnIndex]=\"col.visibleIndex\"\r\n            [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n            [cellTemplate]=\"col.bodyTemplate\"\r\n            [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [cellSelectionMode]=\"grid.cellSelection\"\r\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n            #treeCell>\r\n        </igx-grid-cell>\r\n    </ng-template>\r\n    <ng-template #treeCellTemplate>\r\n        <igx-tree-grid-cell\r\n            class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell\"\r\n            [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n            [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n            [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n            [level]=\"treeRow.level\"\r\n            [expanded]=\"expanded\"\r\n            [showIndicator]=\"showIndicator\"\r\n            [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n            [column]=\"col\"\r\n            [formatter]=\"col.formatter\"\r\n            [intRow]=\"this\"\r\n            [style.min-height.px]=\"cellHeight\"\r\n            [rowData]=\"data\"\r\n            [style.min-width]=\"col.width\"\r\n            [style.max-width]=\"col.width\"\r\n            [style.flex-basis]=\"col.width\"\r\n            [width]=\"col.getCellWidth()\"\r\n            [visibleColumnIndex]=\"col.visibleIndex\"\r\n            [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n            [isLoading]=\"isLoading\"\r\n            [cellTemplate]=\"col.bodyTemplate\"\r\n            [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n            [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n            [active]=\"isCellActive(col.visibleIndex)\"\r\n            [cellSelectionMode]=\"grid.cellSelection\"\r\n            [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n            #treeCell>\r\n        </igx-tree-grid-cell>\r\n    </ng-template>\r\n    <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\r\n</ng-template>\r\n<ng-container *ngIf=\"pinnedColumns.length > 0 && !grid.isPinningToStart\">\r\n    <ng-container *ngTemplateOutlet=\"pinnedCellsTemplate; context: this\"></ng-container>\r\n</ng-container>\r\n<ng-template #rowSelectorBaseTemplate>\r\n    <div class=\"igx-grid__cbx-padding\">\r\n        <igx-checkbox\r\n            [tabindex]=\"-1\"\r\n            [readonly]=\"true\"\r\n            [checked]=\"selected\"\r\n            [indeterminate]=\"indeterminate\"\r\n            [disabled]=\"deleted\"\r\n            [disableRipple]=\"true\"\r\n            [disableTransitions]=\"grid.disableTransitions\"\r\n            [aria-label]=\"rowCheckboxAriaLabel\">\r\n        </igx-checkbox>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #pinnedCellsTemplate let-col>\r\n    <ng-template ngFor let-col [ngForOf]=\"pinnedColumns | igxNotGrouped\">\r\n        <ng-template #cellTemplate>\r\n            <igx-grid-cell\r\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--pinned\"\r\n                [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n                [class.igx-grid__td--number]=\"col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency'\"\r\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n                [column]=\"col\"\r\n                [formatter]=\"col.formatter\"\r\n                [intRow]=\"this\"\r\n                [firstPinned]=\"col.isFirstPinned\"\r\n                [lastPinned]=\"col.isLastPinned\"\r\n                [style.min-height.px]=\"cellHeight\"\r\n                [rowData]=\"data\"\r\n                [style.min-width]=\"col.width\"\r\n                [style.max-width]=\"col.width\"\r\n                [style.flex-basis]=\"col.width\"\r\n                [style.left]=\"col.rightPinnedOffset\"\r\n                [width]=\"col.getCellWidth()\"\r\n                [visibleColumnIndex]=\"col.visibleIndex\"\r\n                [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n                [cellTemplate]=\"col.bodyTemplate\"\r\n                [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n                [active]=\"isCellActive(col.visibleIndex)\"\r\n                [cellSelectionMode]=\"grid.cellSelection\"\r\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n                #treeCell>\r\n            </igx-grid-cell>\r\n            </ng-template>\r\n        <ng-template #treeCellTemplate>\r\n            <igx-tree-grid-cell\r\n                class=\"igx-grid__td igx-grid__td--fw igx-grid__td--tree-cell igx-grid__td--pinned\"\r\n                [class.igx-grid__td--edited]=\"key | transactionState:col.field:grid.rowEditable:grid.transactions:grid.pipeTrigger:grid.gridAPI.crudService.cell:grid.gridAPI.crudService.row\"\r\n                [class.igx-grid__td--number]=\"(col.dataType === 'number' || col.dataType === 'percent' || col.dataType === 'currency') && col.visibleIndex !== 0\"\r\n                [ngClass]=\"col.cellClasses | igxCellStyleClasses:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [ngStyle]=\"col.cellStyles | igxCellStyles:data[col.field]:data:col.field:viewIndex:grid.pipeTrigger\"\r\n                [level]=\"treeRow.level\"\r\n                [expanded]=\"expanded\"\r\n                [showIndicator]=\"showIndicator\"\r\n                [editMode]=\"col.editable && this.grid.crudService.targetInEdit(index, col.index)\"\r\n                [column]=\"col\"\r\n                [formatter]=\"col.formatter\"\r\n                [intRow]=\"this\"\r\n                [lastPinned]=\"col.isLastPinned\"\r\n                [style.min-height.px]=\"cellHeight\"\r\n                [rowData]=\"data\"\r\n                [style.min-width]=\"col.width\"\r\n                [style.max-width]=\"col.width\"\r\n                [style.flex-basis]=\"col.width\"\r\n                [style.left]=\"col.rightPinnedOffset\"\r\n                [width]=\"col.getCellWidth()\"\r\n                [visibleColumnIndex]=\"col.visibleIndex\"\r\n                [value]=\"data | dataMapper:col.field:grid.pipeTrigger:data[col.field]:col.hasNestedPath\"\r\n                [isLoading]=\"isLoading\"\r\n                [cellTemplate]=\"col.bodyTemplate\"\r\n                [cellValidationErrorTemplate]=\"col.errorTemplate\"\r\n                [lastSearchInfo]=\"grid.lastSearchInfo\"\r\n                [active]=\"isCellActive(col.visibleIndex)\"\r\n                [cellSelectionMode]=\"grid.cellSelection\"\r\n                [displayPinnedChip]=\"shouldDisplayPinnedChip(col.visibleIndex)\"\r\n                #treeCell>\r\n            </igx-tree-grid-cell>\r\n        </ng-template>\r\n        <ng-container *ngTemplateOutlet=\"col.visibleIndex === 0 ? treeCellTemplate : cellTemplate\"></ng-container>\r\n    </ng-template>\r\n</ng-template>\r\n" }]
        }], propDecorators: { _cells: [{
                type: ViewChildren,
                args: ['treeCell']
            }], treeRow: [{
                type: Input
            }], expanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }] } });
//# sourceMappingURL=data:application/json;base64,