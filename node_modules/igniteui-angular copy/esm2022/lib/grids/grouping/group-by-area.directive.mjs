import { Directive, EventEmitter, HostBinding, Input, Output, Pipe, ViewChildren } from '@angular/core';
import { IgxChipComponent } from '../../chips/public_api';
import { DisplayDensity } from '../../core/density';
import { SortingDirection } from '../../data-operations/sorting-strategy';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
/**
 * An internal component representing a base group-by drop area.
 *
 * @hidden @internal
 */
export class IgxGroupByAreaDirective {
    get cosyStyle() {
        return this.density === 'cosy';
    }
    get compactStyle() {
        return this.density === 'compact';
    }
    /**
     * The group-by expressions provided by the parent grid.
     */
    get expressions() {
        return this._expressions;
    }
    set expressions(value) {
        this._expressions = value;
        this.chipExpressions = this._expressions;
        this.expressionsChanged();
        this.expressionsChange.emit(this._expressions);
    }
    /**
     * The default message for the default drop area template.
     * Obviously, if another template is provided, this is ignored.
     */
    get dropAreaMessage() {
        return this._dropAreaMessage ?? this.grid.resourceStrings.igx_grid_groupByArea_message;
    }
    set dropAreaMessage(value) {
        this._dropAreaMessage = value;
    }
    /** The native DOM element. Used in sizing calculations. */
    get nativeElement() {
        return this.ref.nativeElement;
    }
    constructor(ref, platform) {
        this.ref = ref;
        this.platform = platform;
        this.density = DisplayDensity.comfortable;
        this.defaultClass = true;
        this.expressionsChange = new EventEmitter();
        this._expressions = [];
    }
    get dropAreaVisible() {
        return (this.grid.columnInDrag && this.grid.columnInDrag.groupable) ||
            !this.expressions.length;
    }
    handleKeyDown(id, event) {
        if (this.platform.isActivationKey(event)) {
            this.updateGroupSorting(id);
        }
    }
    handleClick(id) {
        if (!this.grid.getColumnByName(id).groupable) {
            return;
        }
        this.updateGroupSorting(id);
    }
    onDragDrop(event) {
        const drag = event.detail.owner;
        if (drag instanceof IgxColumnMovingDragDirective) {
            const column = drag.column;
            if (!this.grid.columns.find(c => c === column)) {
                return;
            }
            const isGrouped = this.expressions.findIndex((item) => item.fieldName === column.field) !== -1;
            if (column.groupable && !isGrouped && !column.columnGroup && !!column.field) {
                const groupingExpression = {
                    fieldName: column.field,
                    dir: this.grid.sortingExpressions.find(expr => expr.fieldName === column.field)?.dir || SortingDirection.Asc,
                    ignoreCase: column.sortingIgnoreCase,
                    strategy: column.sortStrategy,
                    groupingComparer: column.groupingComparer
                };
                this.groupBy(groupingExpression);
            }
        }
    }
    getReorderedExpressions(chipsArray) {
        const newExpressions = [];
        chipsArray.forEach(chip => {
            const expr = this.expressions.find(item => item.fieldName === chip.id);
            // disallow changing order if there are columns with groupable: false
            if (!this.grid.getColumnByName(expr.fieldName)?.groupable) {
                return;
            }
            newExpressions.push(expr);
        });
        return newExpressions;
    }
    updateGroupSorting(id) {
        const expr = this.expressions.find(e => e.fieldName === id);
        expr.dir = 3 - expr.dir;
        const expressionsChangeEvent = this.grid.groupingExpressionsChange || this.expressionsChange;
        expressionsChangeEvent.emit(this.expressions);
        this.grid.pipeTrigger++;
        this.grid.notifyChanges();
    }
    expressionsChanged() {
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGroupByAreaDirective, deps: [{ token: i0.ElementRef }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxGroupByAreaDirective, inputs: { dropAreaTemplate: "dropAreaTemplate", density: "density", grid: "grid", expressions: "expressions", dropAreaMessage: "dropAreaMessage" }, outputs: { expressionsChange: "expressionsChange" }, host: { properties: { "class.igx-grid-grouparea": "this.defaultClass", "class.igx-grid-grouparea--cosy": "this.cosyStyle", "class.igx-grid-grouparea--compact": "this.compactStyle" } }, viewQueries: [{ propertyName: "chips", predicate: IgxChipComponent, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGroupByAreaDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.PlatformUtil }]; }, propDecorators: { dropAreaTemplate: [{
                type: Input
            }], density: [{
                type: Input
            }], defaultClass: [{
                type: HostBinding,
                args: ['class.igx-grid-grouparea']
            }], cosyStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-grouparea--cosy']
            }], compactStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-grouparea--compact']
            }], grid: [{
                type: Input
            }], expressions: [{
                type: Input
            }], dropAreaMessage: [{
                type: Input
            }], expressionsChange: [{
                type: Output
            }], chips: [{
                type: ViewChildren,
                args: [IgxChipComponent]
            }] } });
/**
 * A pipe to circumvent the use of getters/methods just to get some additional
 * information from the grouping expression and pass it to the chip representing
 * that expression.
 *
 * @hidden @internal
 */
export class IgxGroupByMetaPipe {
    transform(key, grid) {
        const column = grid.getColumnByName(key);
        return { groupable: !!column?.groupable, title: column?.header || key };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGroupByMetaPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.1.2", ngImport: i0, type: IgxGroupByMetaPipe, isStandalone: true, name: "igxGroupByMeta" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGroupByMetaPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'igxGroupByMeta',
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,