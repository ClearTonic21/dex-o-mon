import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Input, TemplateRef, ViewChild, Inject, ViewChildren } from '@angular/core';
import { formatPercent, NgIf, NgClass, NgTemplateOutlet, DecimalPipe, PercentPipe, CurrencyPipe, DatePipe, getLocaleCurrencyCode, getCurrencySymbol } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { first, takeUntil, takeWhile } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { IgxTextHighlightDirective } from '../directives/text-highlight/text-highlight.directive';
import { formatCurrency, formatDate } from '../core/utils';
import { HammerGesturesManager } from '../core/touch';
import { GridSelectionMode } from './common/enums';
import { IGX_GRID_BASE } from './common/grid.interface';
import { GridColumnDataType } from '../data-operations/data-util';
import { IgxGridCell } from './grid-public-cell';
import { AutoPositionStrategy, HorizontalAlignment, IgxOverlayService } from '../services/public_api';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxGridCellImageAltPipe, IgxStringReplacePipe, IgxColumnFormatterPipe } from './common/pipes';
import { IgxTooltipDirective } from '../directives/tooltip/tooltip.directive';
import { IgxTooltipTargetDirective } from '../directives/tooltip/tooltip-target.directive';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxPrefixDirective } from '../directives/prefix/prefix.directive';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/date-time-editor.directive';
import { IgxTimePickerComponent } from '../time-picker/time-picker.component';
import { IgxDatePickerComponent } from '../date-picker/date-picker.component';
import { IgxCheckboxComponent } from '../checkbox/checkbox.component';
import { IgxTextSelectionDirective } from '../directives/text-selection/text-selection.directive';
import { IgxFocusDirective } from '../directives/focus/focus.directive';
import { IgxInputDirective } from '../directives/input/input.directive';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxChipComponent } from '../chips/chip.component';
import * as i0 from "@angular/core";
import * as i1 from "./selection/selection.service";
import * as i2 from "../core/touch";
import * as i3 from "../core/utils";
import * as i4 from "@angular/forms";
import * as i5 from "../services/public_api";
/**
 * Providing reference to `IgxGridCellComponent`:
 * ```typescript
 * @ViewChild('grid', { read: IgxGridComponent })
 *  public grid: IgxGridComponent;
 * ```
 * ```typescript
 *  let column = this.grid.columnList.first;
 * ```
 * ```typescript
 *  let cell = column.cells[0];
 * ```
 */
export class IgxGridCellComponent {
    /**
     * @hidden
     * @internal
     */
    get isEmptyAddRowCell() {
        return this.intRow.addRowUI && (this.value === undefined || this.value === null);
    }
    /**
     * @hidden
     * @internal
     */
    get formGroup() {
        return this.grid.validation.getFormGroup(this.intRow.key);
    }
    /**
     * Gets the row of the cell.
     * ```typescript
     * let cellRow = this.cell.row;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get row() {
        return this.grid.createRow(this.intRow.index);
    }
    /**
     * Gets the cell template context object.
     * ```typescript
     *  let context = this.cell.context();
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get context() {
        const getCellType = () => this.getCellType(true);
        const ctx = {
            $implicit: this.value,
            additionalTemplateContext: this.column.additionalTemplateContext,
            get cell() {
                /* Turns the `cell` property from the template context object into lazy-evaluated one.
                 * Otherwise on each detection cycle the cell template is recreating N cell instances where
                 * N = number of visible cells in the grid, leading to massive performance degradation in large grids.
                 */
                return getCellType();
            }
        };
        if (this.editMode) {
            ctx.formControl = this.formControl;
        }
        if (this.isInvalid) {
            ctx.defaultErrorTemplate = this.defaultErrorTemplate;
        }
        return ctx;
    }
    /**
     * Gets the cell template.
     * ```typescript
     * let template = this.cell.template;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get template() {
        if (this.editMode && this.formGroup) {
            const inlineEditorTemplate = this.column.inlineEditorTemplate;
            return inlineEditorTemplate ? inlineEditorTemplate : this.inlineEditorTemplate;
        }
        if (this.cellTemplate) {
            return this.cellTemplate;
        }
        if (this.grid.rowEditable && this.intRow.addRowUI) {
            return this.addRowCellTemplate;
        }
        return this.defaultCellTemplate;
    }
    /**
     * Gets the pinned indicator template.
     * ```typescript
     * let template = this.cell.pinnedIndicatorTemplate;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get pinnedIndicatorTemplate() {
        if (this.pinnedIndicator) {
            return this.pinnedIndicator;
        }
        return this.defaultPinnedIndicator;
    }
    /**
     * Gets the `id` of the grid in which the cell is stored.
     * ```typescript
     * let gridId = this.cell.gridID;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get gridID() {
        return this.intRow.gridID;
    }
    /**
     * Gets the `index` of the row where the cell is stored.
     * ```typescript
     * let rowIndex = this.cell.rowIndex;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get rowIndex() {
        return this.intRow.index;
    }
    /**
     * Gets the `index` of the cell column.
     * ```typescript
     * let columnIndex = this.cell.columnIndex;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get columnIndex() {
        return this.column.index;
    }
    /**
     * Returns the column visible index.
     * ```typescript
     * let visibleColumnIndex = this.cell.visibleColumnIndex;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get visibleColumnIndex() {
        return this.column.columnLayoutChild ? this.column.visibleIndex : this._vIndex;
    }
    set visibleColumnIndex(val) {
        this._vIndex = val;
    }
    /**
     * Gets the ID of the cell.
     * ```typescript
     * let cellID = this.cell.cellID;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get cellID() {
        const primaryKey = this.grid.primaryKey;
        const rowID = primaryKey ? this.rowData[primaryKey] : this.rowData;
        return { rowID, columnID: this.columnIndex, rowIndex: this.rowIndex };
    }
    get attrCellID() {
        return `${this.intRow.gridID}_${this.rowIndex}_${this.visibleColumnIndex}`;
    }
    get title() {
        if (this.editMode || this.cellTemplate || this.errorShowing) {
            return '';
        }
        if (this.formatter) {
            return this.formatter(this.value, this.rowData, this.columnData);
        }
        const args = this.column.pipeArgs;
        const locale = this.grid.locale;
        switch (this.column.dataType) {
            case GridColumnDataType.Percent:
                return formatPercent(this.value, locale, args.digitsInfo);
            case GridColumnDataType.Currency:
                return formatCurrency(this.value, this.currencyCode, args.display, args.digitsInfo, locale);
            case GridColumnDataType.Date:
            case GridColumnDataType.DateTime:
            case GridColumnDataType.Time:
                return formatDate(this.value, args.format, locale, args.timezone);
        }
        return this.value;
    }
    get booleanClass() {
        return this.column.dataType === 'boolean' && this.value;
    }
    /**
     * Returns a reference to the nativeElement of the cell.
     * ```typescript
     * let cellNativeElement = this.cell.nativeElement;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get cellSelectionMode() {
        return this._cellSelection;
    }
    set cellSelectionMode(value) {
        if (this._cellSelection === value) {
            return;
        }
        this.zone.runOutsideAngular(() => {
            if (value === GridSelectionMode.multiple) {
                this.addPointerListeners(value);
            }
            else {
                this.removePointerListeners(this._cellSelection);
            }
        });
        this._cellSelection = value;
    }
    /**
     * @hidden
     * @internal
     */
    set lastSearchInfo(value) {
        this._lastSearchInfo = value;
        this.highlightText(this._lastSearchInfo.searchText, this._lastSearchInfo.caseSensitive, this._lastSearchInfo.exactMatch);
    }
    /**
     * Gets whether the cell is editable.
     * ```typescript
     * let isCellReadonly = this.cell.readonly;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get readonly() {
        return !this.editable;
    }
    /** @hidden @internal */
    get ariaDescribeBy() {
        let describeBy = (this.gridID + '_' + this.column.field).replace('.', '_');
        if (this.isInvalid) {
            describeBy += ' ' + this.ariaErrorMessage;
        }
        return describeBy;
    }
    /** @hidden @internal */
    get ariaErrorMessage() {
        return this.grid.id + '_' + this.column.field + '_' + this.intRow.index + '_error';
    }
    /**
     * @hidden
     * @internal
     */
    get isInvalid() {
        const isInvalid = this.formGroup?.get(this.column?.field)?.invalid && this.formGroup?.get(this.column?.field)?.touched;
        return !this.intRow.deleted && isInvalid;
    }
    /**
     * @hidden
     * @internal
     */
    get isValidAfterEdit() {
        const formControl = this.formGroup?.get(this.column?.field);
        return this.editMode && formControl && !formControl.invalid && formControl.dirty;
    }
    /**
     * Gets the formControl responsible for value changes and validation for this cell.
     */
    get formControl() {
        return this.grid.validation.getFormControl(this.intRow.key, this.column.field);
    }
    get gridRowSpan() {
        return this.column.gridRowSpan;
    }
    get gridColumnSpan() {
        return this.column.gridColumnSpan;
    }
    get rowEnd() {
        return this.column.rowEnd;
    }
    get colEnd() {
        return this.column.colEnd;
    }
    get rowStart() {
        return this.column.rowStart;
    }
    get colStart() {
        return this.column.colStart;
    }
    get ariaSelected() {
        return this.selected || this.column.selected || this.intRow.selected;
    }
    /**
     * Gets whether the cell is selected.
     * ```typescript
     * let isSelected = this.cell.selected;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get selected() {
        return this.selectionService.selected(this.selectionNode);
    }
    /**
     * Selects/deselects the cell.
     * ```typescript
     * this.cell.selected = true.
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    set selected(val) {
        const node = this.selectionNode;
        if (val) {
            this.selectionService.add(node);
        }
        else {
            this.selectionService.remove(node);
        }
        this.grid.notifyChanges();
    }
    /**
     * Gets whether the cell column is selected.
     * ```typescript
     * let isCellColumnSelected = this.cell.columnSelected;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get columnSelected() {
        return this.selectionService.isColumnSelected(this.column.field);
    }
    /**
     * Sets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * this.cell.editValue = value;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    set editValue(value) {
        if (this.grid.crudService.cellInEditMode) {
            this.grid.crudService.cell.editValue = value;
        }
    }
    /**
     * Gets the current edit value while a cell is in edit mode.
     * Only for cell editing mode.
     * ```typescript
     * let editValue = this.cell.editValue;
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    get editValue() {
        if (this.grid.crudService.cellInEditMode) {
            return this.grid.crudService.cell.editValue;
        }
    }
    /**
     * Returns whether the cell is editable.
     */
    get editable() {
        return this.column.editable && !this.intRow.disabled;
    }
    set highlight(value) {
        this._highlight = value;
        if (this._highlight && this.grid.lastSearchInfo.searchText) {
            this._highlight.highlight(this.grid.lastSearchInfo.searchText, this.grid.lastSearchInfo.caseSensitive, this.grid.lastSearchInfo.exactMatch);
            this._highlight.activateIfNecessary();
        }
    }
    get highlight() {
        return this._highlight;
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            layout: this.column.columnLayoutChild ? {
                rowStart: this.column.rowStart,
                colStart: this.column.colStart,
                rowEnd: this.column.rowEnd,
                colEnd: this.column.colEnd,
                columnVisibleIndex: this.visibleColumnIndex
            } : null
        };
    }
    /** @hidden @internal */
    get step() {
        const digitsInfo = this.column.pipeArgs.digitsInfo;
        if (!digitsInfo) {
            return 1;
        }
        const step = +digitsInfo.substr(digitsInfo.indexOf('.') + 1, 1);
        return 1 / (Math.pow(10, step));
    }
    /** @hidden @internal */
    get currencyCode() {
        return this.column.pipeArgs.currencyCode ?
            this.column.pipeArgs.currencyCode : getLocaleCurrencyCode(this.grid.locale);
    }
    /** @hidden @internal */
    get currencyCodeSymbol() {
        return getCurrencySymbol(this.currencyCode, 'wide', this.grid.locale);
    }
    constructor(selectionService, grid, overlayService, cdr, element, zone, touchManager, platformUtil) {
        this.selectionService = selectionService;
        this.grid = grid;
        this.overlayService = overlayService;
        this.cdr = cdr;
        this.element = element;
        this.zone = zone;
        this.touchManager = touchManager;
        this.platformUtil = platformUtil;
        this._destroy$ = new Subject();
        /**
         * @hidden
         * @internal
         */
        this.lastPinned = false;
        /**
         * @hidden
         * @internal
         */
        this.firstPinned = false;
        /**
         * Returns whether the cell is in edit mode.
         */
        this.editMode = false;
        /**
         * Sets/get the `role` property of the cell.
         * Default value is `"gridcell"`.
         * ```typescript
         * this.cell.role = 'grid-cell';
         * ```
         * ```typescript
         * let cellRole = this.cell.role;
         * ```
         *
         * @memberof IgxGridCellComponent
         */
        this.role = 'gridcell';
        /**
         * Gets the width of the cell.
         * ```typescript
         * let cellWidth = this.cell.width;
         * ```
         *
         * @memberof IgxGridCellComponent
         */
        this.width = '';
        /**
         * @hidden
         */
        this.active = false;
        /**
         * @hidden
         */
        this.displayPinnedChip = false;
        /**
         * Sets/gets the highlight class of the cell.
         * Default value is `"igx-highlight"`.
         * ```typescript
         * let highlightClass = this.cell.highlightClass;
         * ```
         * ```typescript
         * this.cell.highlightClass = 'igx-cell-highlight';
         * ```
         *
         * @memberof IgxGridCellComponent
         */
        this.highlightClass = 'igx-highlight';
        /**
         * Sets/gets the active highlight class class of the cell.
         * Default value is `"igx-highlight__active"`.
         * ```typescript
         * let activeHighlightClass = this.cell.activeHighlightClass;
         * ```
         * ```typescript
         * this.cell.activeHighlightClass = 'igx-cell-highlight_active';
         * ```
         *
         * @memberof IgxGridCellComponent
         */
        this.activeHighlightClass = 'igx-highlight__active';
        this._cellSelection = GridSelectionMode.multiple;
        this._vIndex = -1;
        /**
         * @hidden
         * @internal
         */
        this.onDoubleClick = (event) => {
            if (event.type === 'doubletap') {
                // prevent double-tap to zoom on iOS
                event.preventDefault();
            }
            if (this.editable && !this.editMode && !this.intRow.deleted && !this.grid.crudService.rowEditingBlocked) {
                this.grid.crudService.enterEditMode(this, event);
            }
            this.grid.doubleClick.emit({
                cell: this.getCellType(),
                event
            });
        };
        /**
         * @hidden
         * @internal
         */
        this.errorShowing = false;
        /**
         *
         * @hidden
         * @internal
         */
        this.pointerdown = (event) => {
            if (this.cellSelectionMode !== GridSelectionMode.multiple) {
                this.activate(event);
                return;
            }
            if (!this.platformUtil.isLeftClick(event)) {
                event.preventDefault();
                this.grid.navigation.setActiveNode({ rowIndex: this.rowIndex, colIndex: this.visibleColumnIndex });
                this.selectionService.addKeyboardRange();
                this.selectionService.initKeyboardState();
                this.selectionService.primaryButton = false;
                // Ensure RMB Click on edited cell does not end cell editing
                if (!this.selected) {
                    this.grid.crudService.updateCell(true, event);
                }
                return;
            }
            else {
                this.selectionService.primaryButton = true;
            }
            this.selectionService.pointerDown(this.selectionNode, event.shiftKey, event.ctrlKey);
            this.activate(event);
        };
        /**
         *
         * @hidden
         * @internal
         */
        this.pointerenter = (event) => {
            const isHierarchicalGrid = this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
            if (isHierarchicalGrid && (!this.grid.navigation?.activeNode?.gridID || this.grid.navigation.activeNode.gridID !== this.gridID)) {
                return;
            }
            const dragMode = this.selectionService.pointerEnter(this.selectionNode, event);
            if (dragMode) {
                this.grid.cdr.detectChanges();
            }
        };
        /**
         * @hidden
         * @internal
         */
        this.focusout = () => {
            this.closeErrorTooltip();
        };
        /**
         * @hidden
         * @internal
         */
        this.pointerup = (event) => {
            const isHierarchicalGrid = this.grid.nativeElement.tagName.toLowerCase() === 'igx-hierarchical-grid';
            if (!this.platformUtil.isLeftClick(event) || (isHierarchicalGrid && (!this.grid.navigation?.activeNode?.gridID ||
                this.grid.navigation.activeNode.gridID !== this.gridID))) {
                return;
            }
            if (this.selectionService.pointerUp(this.selectionNode, this.grid.rangeSelected)) {
                this.grid.cdr.detectChanges();
            }
        };
    }
    /**
     * @hidden
     * @internal
     */
    onClick(event) {
        this.grid.cellClick.emit({
            cell: this.getCellType(),
            event
        });
    }
    /**
     * @hidden
     * @internal
     */
    onContextMenu(event) {
        this.grid.contextMenu.emit({
            cell: this.getCellType(),
            event
        });
    }
    /**
     * @hidden
     * @internal
     */
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.addEventListener('pointerdown', this.pointerdown);
            this.addPointerListeners(this.cellSelectionMode);
        });
        if (this.platformUtil.isIOS) {
            this.touchManager.addEventListener(this.nativeElement, 'doubletap', this.onDoubleClick, {
                cssProps: {} /* don't disable user-select, etc */
            });
        }
    }
    ngAfterViewInit() {
        this.errorTooltip.changes.pipe(takeUntil(this._destroy$)).subscribe(() => {
            if (this.errorTooltip.length > 0 && this.active) {
                // error ocurred
                this.cdr.detectChanges();
                this.openErrorTooltip();
            }
        });
    }
    openErrorTooltip() {
        const tooltip = this.errorTooltip.first;
        tooltip.open({
            target: this.errorIcon.el.nativeElement,
            closeOnOutsideClick: true,
            excludeFromOutsideClick: [this.nativeElement],
            closeOnEscape: false,
            outlet: this.grid.outlet,
            modal: false,
            positionStrategy: new AutoPositionStrategy({
                horizontalStartPoint: HorizontalAlignment.Center,
                horizontalDirection: HorizontalAlignment.Center
            })
        });
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.zone.runOutsideAngular(() => {
            this.nativeElement.removeEventListener('pointerdown', this.pointerdown);
            this.removePointerListeners(this.cellSelectionMode);
        });
        this.touchManager.destroy();
        this._destroy$.next();
        this._destroy$.complete();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnChanges(changes) {
        if (changes.editMode && changes.editMode.currentValue && this.formControl) {
            // ensure when values change, form control is forced to be marked as touche.
            this.formControl.valueChanges.pipe(takeWhile(() => this.editMode)).subscribe(() => this.formControl.markAsTouched());
            // while in edit mode subscribe to value changes on the current form control and set to editValue
            this.formControl.statusChanges.pipe(takeWhile(() => this.editMode)).subscribe(status => {
                if (status === 'INVALID' && this.errorTooltip.length > 0) {
                    this.cdr.detectChanges();
                    const tooltip = this.errorTooltip.first;
                    this.resizeAndRepositionOverlayById(tooltip.overlayId, this.errorTooltip.first.element.offsetWidth);
                }
            });
        }
        if (changes.value && !changes.value.firstChange) {
            if (this.highlight) {
                this.highlight.lastSearchInfo.searchedText = this.grid.lastSearchInfo.searchText;
                this.highlight.lastSearchInfo.caseSensitive = this.grid.lastSearchInfo.caseSensitive;
                this.highlight.lastSearchInfo.exactMatch = this.grid.lastSearchInfo.exactMatch;
            }
        }
    }
    /**
     * @hidden @internal
     */
    resizeAndRepositionOverlayById(overlayId, newSize) {
        const overlay = this.overlayService.getOverlayById(overlayId);
        if (!overlay)
            return;
        overlay.initialSize.width = newSize;
        overlay.elementRef.nativeElement.parentElement.style.width = newSize + 'px';
        this.overlayService.reposition(overlayId);
    }
    /**
     * Starts/ends edit mode for the cell.
     *
     * ```typescript
     * cell.setEditMode(true);
     * ```
     */
    setEditMode(value) {
        if (this.intRow.deleted) {
            return;
        }
        if (this.editable && value) {
            if (this.grid.crudService.cellInEditMode) {
                this.grid.gridAPI.update_cell(this.grid.crudService.cell);
                this.grid.crudService.endCellEdit();
            }
            this.grid.crudService.enterEditMode(this);
        }
        else {
            this.grid.crudService.endCellEdit();
        }
        this.grid.notifyChanges();
    }
    /**
     * Sets new value to the cell.
     * ```typescript
     * this.cell.update('New Value');
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    // TODO: Refactor
    update(val) {
        if (this.intRow.deleted) {
            return;
        }
        let cell = this.grid.crudService.cell;
        if (!cell) {
            cell = this.grid.crudService.createCell(this);
        }
        cell.editValue = val;
        this.grid.gridAPI.update_cell(cell);
        this.grid.crudService.endCellEdit();
        this.cdr.markForCheck();
    }
    closeErrorTooltip() {
        const tooltip = this.errorTooltip.first;
        if (tooltip) {
            tooltip.close();
        }
    }
    /**
     * @hidden
     * @internal
     */
    activate(event) {
        const node = this.selectionNode;
        let shouldEmitSelection = !this.selectionService.isActiveNode(node);
        if (this.selectionService.primaryButton) {
            const currentActive = this.selectionService.activeElement;
            if (this.cellSelectionMode === GridSelectionMode.single && event?.ctrlKey && this.selected) {
                this.selectionService.activeElement = null;
                shouldEmitSelection = true;
            }
            else {
                this.selectionService.activeElement = node;
            }
            const cancel = this._updateCRUDStatus(event);
            if (cancel) {
                this.selectionService.activeElement = currentActive;
                return;
            }
            const activeElement = this.selectionService.activeElement;
            const row = activeElement ? this.grid.gridAPI.get_row_by_index(activeElement.row) : null;
            if (this.grid.crudService.rowEditingBlocked && row && this.intRow.key !== row.key) {
                return;
            }
        }
        else {
            this.selectionService.activeElement = null;
            if (this.grid.crudService.cellInEditMode && !this.editMode) {
                this.grid.crudService.updateCell(true, event);
            }
        }
        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex });
        const isTargetErrorIcon = event && event.target && event.target === this.errorIcon?.el.nativeElement;
        if (this.isInvalid && !isTargetErrorIcon) {
            this.cdr.detectChanges();
            this.openErrorTooltip();
            this.grid.activeNodeChange.pipe(first()).subscribe(() => {
                this.closeErrorTooltip();
            });
        }
        this.selectionService.primaryButton = true;
        if (this.cellSelectionMode === GridSelectionMode.multiple && this.selectionService.activeElement) {
            if (this.selectionService.isInMap(this.selectionService.activeElement) && event?.ctrlKey && !event?.shiftKey) {
                this.selectionService.remove(this.selectionService.activeElement);
                shouldEmitSelection = true;
            }
            else {
                this.selectionService.add(this.selectionService.activeElement, false); // pointer events handle range generation
                this.selectionService.keyboardStateOnFocus(node, this.grid.rangeSelected, this.nativeElement);
            }
        }
        if (this.grid.isCellSelectable && shouldEmitSelection) {
            this.zone.run(() => this.grid.selected.emit({ cell: this.getCellType(), event }));
        }
    }
    /**
     * If the provided string matches the text in the cell, the text gets highlighted.
     * ```typescript
     * this.cell.highlightText('Cell Value', true);
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    highlightText(text, caseSensitive, exactMatch) {
        return this.highlight && this.column.searchable ? this.highlight.highlight(text, caseSensitive, exactMatch) : 0;
    }
    /**
     * Clears the highlight of the text in the cell.
     * ```typescript
     * this.cell.clearHighLight();
     * ```
     *
     * @memberof IgxGridCellComponent
     */
    clearHighlight() {
        if (this.highlight && this.column.searchable) {
            this.highlight.clearHighlight();
        }
    }
    /**
     * @hidden
     * @internal
     */
    calculateSizeToFit(range) {
        return this.platformUtil.getNodeSizeViaRange(range, this.nativeElement);
    }
    /**
     * @hidden
     * @internal
     */
    get searchMetadata() {
        const meta = new Map();
        meta.set('pinned', this.grid.isRecordPinnedByViewIndex(this.intRow.index));
        return meta;
    }
    /**
     * @hidden
     * @internal
     */
    _updateCRUDStatus(event) {
        if (this.editMode) {
            return;
        }
        let editableArgs;
        const crud = this.grid.crudService;
        const editableCell = this.grid.crudService.cell;
        const editMode = !!(crud.row || crud.cell);
        if (this.editable && editMode && !this.intRow.deleted) {
            if (editableCell) {
                editableArgs = this.grid.crudService.updateCell(false, event);
                /* This check is related with the following issue #6517:
                 * when edit cell that belongs to a column which is sorted and press tab,
                 * the next cell in edit mode is with wrong value /its context is not updated/;
                 * So we reapply sorting before the next cell enters edit mode.
                 * Also we need to keep the notifyChanges below, because of the current
                 * change detection cycle when we have editing with enabled transactions
                 */
                if (this.grid.sortingExpressions.length && this.grid.sortingExpressions.indexOf(editableCell.column.field)) {
                    this.grid.cdr.detectChanges();
                }
                if (editableArgs && editableArgs.cancel) {
                    return true;
                }
                crud.exitCellEdit(event);
            }
            this.grid.tbody.nativeElement.focus({ preventScroll: true });
            this.grid.notifyChanges();
            crud.enterEditMode(this, event);
            return false;
        }
        if (editableCell && crud.sameRow(this.cellID.rowID)) {
            this.grid.crudService.updateCell(true, event);
        }
        else if (editMode && !crud.sameRow(this.cellID.rowID)) {
            this.grid.crudService.endEdit(true, event);
        }
    }
    addPointerListeners(selection) {
        if (selection !== GridSelectionMode.multiple) {
            return;
        }
        this.nativeElement.addEventListener('pointerenter', this.pointerenter);
        this.nativeElement.addEventListener('pointerup', this.pointerup);
        this.nativeElement.addEventListener('focusout', this.focusout);
    }
    removePointerListeners(selection) {
        if (selection !== GridSelectionMode.multiple) {
            return;
        }
        this.nativeElement.removeEventListener('pointerenter', this.pointerenter);
        this.nativeElement.removeEventListener('pointerup', this.pointerup);
        this.nativeElement.removeEventListener('focusout', this.focusout);
    }
    getCellType(useRow) {
        const rowID = useRow ? this.grid.createRow(this.intRow.index, this.intRow.data) : this.intRow.index;
        return new IgxGridCell(this.grid, rowID, this.column.field);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridCellComponent, deps: [{ token: i1.IgxGridSelectionService }, { token: IGX_GRID_BASE }, { token: IgxOverlayService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i2.HammerGesturesManager }, { token: i3.PlatformUtil }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxGridCellComponent, isStandalone: true, selector: "igx-grid-cell", inputs: { column: "column", intRow: "intRow", row: "row", rowData: "rowData", columnData: "columnData", cellTemplate: "cellTemplate", cellValidationErrorTemplate: "cellValidationErrorTemplate", pinnedIndicator: "pinnedIndicator", value: "value", formatter: "formatter", visibleColumnIndex: "visibleColumnIndex", cellSelectionMode: "cellSelectionMode", lastSearchInfo: "lastSearchInfo", lastPinned: "lastPinned", firstPinned: "firstPinned", editMode: "editMode", width: "width", active: "active", displayPinnedChip: "displayPinnedChip" }, host: { listeners: { "dblclick": "onDoubleClick($event)", "click": "onClick($event)", "contextmenu": "onContextMenu($event)" }, properties: { "class.igx-grid__td--new": "this.isEmptyAddRowCell", "attr.data-rowIndex": "this.rowIndex", "attr.data-visibleIndex": "this.visibleColumnIndex", "attr.id": "this.attrCellID", "attr.title": "this.title", "class.igx-grid__td--bool-true": "this.booleanClass", "class.igx-grid__td--pinned-last": "this.lastPinned", "class.igx-grid__td--pinned-first": "this.firstPinned", "class.igx-grid__td--editing": "this.editMode", "attr.role": "this.role", "attr.aria-readonly": "this.readonly", "attr.aria-describedby": "this.ariaDescribeBy", "class.igx-grid__td--invalid": "this.isInvalid", "attr.aria-invalid": "this.isInvalid", "class.igx-grid__td--valid": "this.isValidAfterEdit", "class.igx-grid__td--active": "this.active", "attr.aria-selected": "this.ariaSelected", "class.igx-grid__td--selected": "this.selected", "class.igx-grid__td--column-selected": "this.columnSelected", "class.igx-grid__td--row-pinned-first": "this.displayPinnedChip" } }, providers: [HammerGesturesManager], viewQueries: [{ propertyName: "errorIcon", first: true, predicate: ["errorIcon"], descendants: true, read: IgxIconComponent }, { propertyName: "defaultErrorTemplate", first: true, predicate: ["defaultError"], descendants: true, read: TemplateRef, static: true }, { propertyName: "defaultCellTemplate", first: true, predicate: ["defaultCell"], descendants: true, read: TemplateRef, static: true }, { propertyName: "defaultPinnedIndicator", first: true, predicate: ["defaultPinnedIndicator"], descendants: true, read: TemplateRef, static: true }, { propertyName: "inlineEditorTemplate", first: true, predicate: ["inlineEditor"], descendants: true, read: TemplateRef, static: true }, { propertyName: "addRowCellTemplate", first: true, predicate: ["addRowCell"], descendants: true, read: TemplateRef, static: true }, { propertyName: "highlight", first: true, predicate: IgxTextHighlightDirective, descendants: true, read: IgxTextHighlightDirective }, { propertyName: "errorTooltip", predicate: ["error"], descendants: true, read: IgxTooltipDirective }], usesOnChanges: true, ngImport: i0, template: "<ng-template #defaultPinnedIndicator>\r\n    <igx-chip\r\n        *ngIf=\"displayPinnedChip\"\r\n        class=\"igx-grid__td--pinned-chip\"\r\n        [disabled]=\"true\"\r\n        [displayDensity]=\"'compact'\"\r\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\r\n    >\r\n</ng-template>\r\n<ng-template #defaultCell>\r\n    <div *ngIf=\"column.dataType !== 'boolean' && column.dataType !== 'image' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight\r\n        class=\"igx-grid__td-text\"\r\n        style=\"pointer-events: none;\"\r\n        [cssClass]=\"highlightClass\"\r\n        [activeCssClass]=\"activeHighlightClass\"\r\n        [groupName]=\"gridID\"\r\n        [value]=\"\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === 'number'\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        \"\r\n        [row]=\"rowData\"\r\n        [column]=\"this.column.field\"\r\n        [containerClass]=\"'igx-grid__td-text'\"\r\n        [metadata]=\"searchMetadata\"\r\n    >{{\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === \"number\"\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        }}</div>\r\n    <igx-icon\r\n        *ngIf=\"column.dataType === 'boolean' && !this.formatter\"\r\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\r\n        >{{ value ? \"check\" : \"close\" }}</igx-icon>\r\n    <img *ngIf=\"column.dataType === 'image'\" [src]=\"value\" [alt]=\"value | igxCellImageAlt\" />\r\n</ng-template>\r\n<ng-template #addRowCell let-cell=\"cell\">\r\n    <div *ngIf=\"column.dataType !== 'boolean' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\r\n    [cssClass]=\"highlightClass\"\r\n    [activeCssClass]=\"activeHighlightClass\"\r\n    [groupName]=\"gridID\"\r\n    [value]=\"formatter ? (value | columnFormatter:formatter:rowData) : column.dataType === 'number' ?\r\n        (value | number:column.pipeArgs.digitsInfo:grid.locale) : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime') ?\r\n        (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : column.dataType === 'currency' ?\r\n        (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'percent' ?\r\n        (value | percent:column.pipeArgs.digitsInfo:grid.locale) : value\"\r\n    [row]=\"rowData\"\r\n    [column]=\"this.column.field\"\r\n    [containerClass]=\"'igx-grid__td-text'\"\r\n    [metadata]=\"searchMetadata\">{{\r\n        !isEmptyAddRowCell ? value : (column.header || column.field)\r\n    }}</div>\r\n</ng-template>\r\n<ng-template #inlineEditor let-cell=\"cell\">\r\n    <ng-container *ngIf=\"column.dataType === 'string' || column.dataType === 'image'\" [formGroup]=\"formGroup\">\r\n        <igx-input-group displayDensity=\"compact\" >\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [formControl]=\"formControl\"\r\n                (compositionstart)=\"grid.crudService.isInCompositionMode = true\"\r\n                (compositionend)=\"grid.crudService.isInCompositionMode = false\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'number'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'boolean'\" [formGroup]=\"formGroup\">\r\n        <igx-checkbox\r\n            [checked]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [disableRipple]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-checkbox>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'date'\" [formGroup]=\"formGroup\">\r\n        <igx-date-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [weekStart]=\"column.pipeArgs.weekStart\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        >\r\n        </igx-date-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'time'\" [formGroup]=\"formGroup\">\r\n        <igx-time-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [inputFormat]=\"column.defaultTimeFormat\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-time-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'dateTime'\">\r\n        <igx-input-group [formGroup]=\"formGroup\">\r\n            <input\r\n                type=\"text\"\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [formControl]=\"formControl\"\r\n                igxInput\r\n                [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n                [igxFocus]=\"true\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'currency'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <igx-prefix *ngIf=\"grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-prefix>\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix *ngIf=\"!grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'percent'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix> {{ editValue | percent:column.pipeArgs.digitsInfo:grid.locale }} </igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\r\n\r\n<ng-container *ngIf=\"isInvalid\">\r\n    <igx-icon #errorIcon [igxTooltipTarget]=\"tooltipRef\"  [igxToggleOutlet]=\"grid.outlet\"\r\n    (mouseover)='errorShowing = true' (mouseout)='errorShowing = false'>error</igx-icon>\r\n    <div [id]=\"ariaErrorMessage\"\r\n    igxTooltip #error #tooltipRef=\"tooltip\">\r\n        <div [style.width]=\"'max-content'\">\r\n            <ng-container *ngTemplateOutlet=\"cellValidationErrorTemplate || defaultError; context: context\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #defaultError>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['required']\">\r\n        {{grid.resourceStrings.igx_grid_required_validation_error}}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['minlength']\">\r\n        {{grid.resourceStrings.igx_grid_min_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.minlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['maxlength']\">\r\n        {{grid.resourceStrings.igx_grid_max_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.maxlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['min']\">\r\n        {{grid.resourceStrings.igx_grid_min_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.min.min }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['max']\">\r\n        {{grid.resourceStrings.igx_grid_max_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.max.max }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['email']\">\r\n        {{grid.resourceStrings.igx_grid_email_validation_error }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['pattern']\">\r\n        {{grid.resourceStrings.igx_grid_pattern_validation_error}}\r\n    </div>\r\n</ng-template>\r\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: DecimalPipe, name: "number" }, { kind: "pipe", type: PercentPipe, name: "percent" }, { kind: "pipe", type: CurrencyPipe, name: "currency" }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: IgxChipComponent, selector: "igx-chip", inputs: ["variant", "id", "tabIndex", "data", "draggable", "animateOnRelease", "hideBaseOnDrag", "removable", "removeIcon", "selectable", "selectIcon", "class", "disabled", "selected", "color", "resourceStrings"], outputs: ["selectedChange", "moveStart", "moveEnd", "remove", "chipClick", "selectedChanging", "selectedChanged", "keyDown", "dragEnter", "dragLeave", "dragOver", "dragDrop"] }, { kind: "directive", type: IgxTextHighlightDirective, selector: "[igxTextHighlight]", inputs: ["cssClass", "activeCssClass", "containerClass", "groupName", "value", "row", "column", "metadata"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxFocusDirective, selector: "[igxFocus]", inputs: ["igxFocus"], exportAs: ["igxFocus"] }, { kind: "directive", type: IgxTextSelectionDirective, selector: "[igxTextSelection]", inputs: ["igxTextSelection"], exportAs: ["igxTextSelection"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "component", type: IgxDatePickerComponent, selector: "igx-date-picker", inputs: ["hideOutsideDays", "displayMonthsCount", "showWeekNumbers", "formatter", "headerOrientation", "todayButtonLabel", "cancelButtonLabel", "spinLoop", "spinDelta", "outlet", "id", "formatViews", "disabledDates", "specialDates", "calendarFormat", "value", "minValue", "maxValue", "resourceStrings", "readOnly"], outputs: ["valueChange", "validationFailed"] }, { kind: "component", type: IgxTimePickerComponent, selector: "igx-time-picker", inputs: ["id", "displayFormat", "inputFormat", "mode", "minValue", "maxValue", "spinLoop", "formatter", "headerOrientation", "readOnly", "value", "resourceStrings", "okButtonLabel", "cancelButtonLabel", "itemsDelta"], outputs: ["selected", "valueChange", "validationFailed"] }, { kind: "directive", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: ["locale", "minValue", "maxValue", "spinLoop", "displayFormat", "igxDateTimeEditor", "value", "spinDelta"], outputs: ["valueChange", "validationFailed"], exportAs: ["igxDateTimeEditor"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "directive", type: IgxTooltipTargetDirective, selector: "[igxTooltipTarget]", inputs: ["showDelay", "hideDelay", "tooltipDisabled", "igxTooltipTarget", "tooltip"], outputs: ["tooltipShow", "tooltipHide"], exportAs: ["tooltipTarget"] }, { kind: "directive", type: IgxTooltipDirective, selector: "[igxTooltip]", inputs: ["context", "id"], exportAs: ["tooltip"] }, { kind: "pipe", type: IgxGridCellImageAltPipe, name: "igxCellImageAlt" }, { kind: "pipe", type: IgxStringReplacePipe, name: "igxStringReplace" }, { kind: "pipe", type: IgxColumnFormatterPipe, name: "columnFormatter" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridCellComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-grid-cell', providers: [HammerGesturesManager], standalone: true, imports: [
                        NgIf,
                        NgClass,
                        NgTemplateOutlet,
                        DecimalPipe,
                        PercentPipe,
                        CurrencyPipe,
                        DatePipe,
                        ReactiveFormsModule,
                        IgxChipComponent,
                        IgxTextHighlightDirective,
                        IgxIconComponent,
                        IgxInputGroupComponent,
                        IgxInputDirective,
                        IgxFocusDirective,
                        IgxTextSelectionDirective,
                        IgxCheckboxComponent,
                        IgxDatePickerComponent,
                        IgxTimePickerComponent,
                        IgxDateTimeEditorDirective,
                        IgxPrefixDirective,
                        IgxSuffixDirective,
                        IgxTooltipTargetDirective,
                        IgxTooltipDirective,
                        IgxGridCellImageAltPipe,
                        IgxStringReplacePipe,
                        IgxColumnFormatterPipe
                    ], template: "<ng-template #defaultPinnedIndicator>\r\n    <igx-chip\r\n        *ngIf=\"displayPinnedChip\"\r\n        class=\"igx-grid__td--pinned-chip\"\r\n        [disabled]=\"true\"\r\n        [displayDensity]=\"'compact'\"\r\n        >{{ grid.resourceStrings.igx_grid_pinned_row_indicator }}</igx-chip\r\n    >\r\n</ng-template>\r\n<ng-template #defaultCell>\r\n    <div *ngIf=\"column.dataType !== 'boolean' && column.dataType !== 'image' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight\r\n        class=\"igx-grid__td-text\"\r\n        style=\"pointer-events: none;\"\r\n        [cssClass]=\"highlightClass\"\r\n        [activeCssClass]=\"activeHighlightClass\"\r\n        [groupName]=\"gridID\"\r\n        [value]=\"\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === 'number'\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        \"\r\n        [row]=\"rowData\"\r\n        [column]=\"this.column.field\"\r\n        [containerClass]=\"'igx-grid__td-text'\"\r\n        [metadata]=\"searchMetadata\"\r\n    >{{\r\n            formatter\r\n                ? (value | columnFormatter:formatter:rowData:columnData)\r\n                : column.dataType === \"number\"\r\n                ? (value | number:column.pipeArgs.digitsInfo:grid.locale)\r\n                : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime')\r\n                ? (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale)\r\n                : column.dataType === 'currency'\r\n                ? (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale)\r\n                : column.dataType === 'percent'\r\n                ? (value | percent:column.pipeArgs.digitsInfo:grid.locale)\r\n                : value\r\n        }}</div>\r\n    <igx-icon\r\n        *ngIf=\"column.dataType === 'boolean' && !this.formatter\"\r\n        [ngClass]=\"{ 'igx-icon--success': value, 'igx-icon--error': !value }\"\r\n        >{{ value ? \"check\" : \"close\" }}</igx-icon>\r\n    <img *ngIf=\"column.dataType === 'image'\" [src]=\"value\" [alt]=\"value | igxCellImageAlt\" />\r\n</ng-template>\r\n<ng-template #addRowCell let-cell=\"cell\">\r\n    <div *ngIf=\"column.dataType !== 'boolean' || (column.dataType === 'boolean' && this.formatter)\"\r\n        igxTextHighlight class=\"igx-grid__td-text\" style=\"pointer-events: none\"\r\n    [cssClass]=\"highlightClass\"\r\n    [activeCssClass]=\"activeHighlightClass\"\r\n    [groupName]=\"gridID\"\r\n    [value]=\"formatter ? (value | columnFormatter:formatter:rowData) : column.dataType === 'number' ?\r\n        (value | number:column.pipeArgs.digitsInfo:grid.locale) : (column.dataType === 'date' || column.dataType === 'time' || column.dataType === 'dateTime') ?\r\n        (value | date:column.pipeArgs.format:column.pipeArgs.timezone:grid.locale) : column.dataType === 'currency' ?\r\n        (value | currency:currencyCode:column.pipeArgs.display:column.pipeArgs.digitsInfo:grid.locale) : column.dataType === 'percent' ?\r\n        (value | percent:column.pipeArgs.digitsInfo:grid.locale) : value\"\r\n    [row]=\"rowData\"\r\n    [column]=\"this.column.field\"\r\n    [containerClass]=\"'igx-grid__td-text'\"\r\n    [metadata]=\"searchMetadata\">{{\r\n        !isEmptyAddRowCell ? value : (column.header || column.field)\r\n    }}</div>\r\n</ng-template>\r\n<ng-template #inlineEditor let-cell=\"cell\">\r\n    <ng-container *ngIf=\"column.dataType === 'string' || column.dataType === 'image'\" [formGroup]=\"formGroup\">\r\n        <igx-input-group displayDensity=\"compact\" >\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [formControl]=\"formControl\"\r\n                (compositionstart)=\"grid.crudService.isInCompositionMode = true\"\r\n                (compositionend)=\"grid.crudService.isInCompositionMode = false\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'number'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'boolean'\" [formGroup]=\"formGroup\">\r\n        <igx-checkbox\r\n            [checked]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [disableRipple]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-checkbox>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'date'\" [formGroup]=\"formGroup\">\r\n        <igx-date-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [weekStart]=\"column.pipeArgs.weekStart\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        >\r\n        </igx-date-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'time'\" [formGroup]=\"formGroup\">\r\n        <igx-time-picker\r\n            [style.width.%]=\"100\"\r\n            [outlet]=\"grid.outlet\"\r\n            mode=\"dropdown\"\r\n            [locale]=\"grid.locale\"\r\n            [inputFormat]=\"column.defaultTimeFormat\"\r\n            [(value)]=\"editValue\"\r\n            [igxFocus]=\"true\"\r\n            [formControl]=\"formControl\"\r\n        ></igx-time-picker>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'dateTime'\">\r\n        <igx-input-group [formGroup]=\"formGroup\">\r\n            <input\r\n                type=\"text\"\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [formControl]=\"formControl\"\r\n                igxInput\r\n                [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n                [igxFocus]=\"true\"\r\n            />\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'currency'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <igx-prefix *ngIf=\"grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-prefix>\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix *ngIf=\"!grid.currencyPositionLeft\">{{ currencyCodeSymbol }}</igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"column.dataType === 'percent'\">\r\n        <igx-input-group displayDensity=\"compact\" [formGroup]=\"formGroup\">\r\n            <input\r\n                igxInput\r\n                [attr.aria-describedby]=\"ariaDescribeBy\"\r\n                [attr.aria-invalid]=\"isInvalid\"\r\n                [igxFocus]=\"true\"\r\n                [igxTextSelection]=\"true\"\r\n                [step]=\"step\"\r\n                type=\"number\"\r\n                [formControl]=\"formControl\"\r\n            />\r\n            <igx-suffix> {{ editValue | percent:column.pipeArgs.digitsInfo:grid.locale }} </igx-suffix>\r\n        </igx-input-group>\r\n    </ng-container>\r\n</ng-template>\r\n<ng-container *ngTemplateOutlet=\"pinnedIndicatorTemplate; context: context\">\r\n</ng-container>\r\n<ng-container *ngTemplateOutlet=\"template; context: context\"></ng-container>\r\n\r\n<ng-container *ngIf=\"isInvalid\">\r\n    <igx-icon #errorIcon [igxTooltipTarget]=\"tooltipRef\"  [igxToggleOutlet]=\"grid.outlet\"\r\n    (mouseover)='errorShowing = true' (mouseout)='errorShowing = false'>error</igx-icon>\r\n    <div [id]=\"ariaErrorMessage\"\r\n    igxTooltip #error #tooltipRef=\"tooltip\">\r\n        <div [style.width]=\"'max-content'\">\r\n            <ng-container *ngTemplateOutlet=\"cellValidationErrorTemplate || defaultError; context: context\"></ng-container>\r\n        </div>\r\n    </div>\r\n</ng-container>\r\n\r\n<ng-template #defaultError>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['required']\">\r\n        {{grid.resourceStrings.igx_grid_required_validation_error}}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['minlength']\">\r\n        {{grid.resourceStrings.igx_grid_min_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.minlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['maxlength']\">\r\n        {{grid.resourceStrings.igx_grid_max_length_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.maxlength.requiredLength }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['min']\">\r\n        {{grid.resourceStrings.igx_grid_min_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.min.min }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['max']\">\r\n        {{grid.resourceStrings.igx_grid_max_validation_error | igxStringReplace:'{0}':formGroup.get(column.field).errors.max.max }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['email']\">\r\n        {{grid.resourceStrings.igx_grid_email_validation_error }}\r\n    </div>\r\n    <div *ngIf=\"formGroup?.get(column?.field).errors?.['pattern']\">\r\n        {{grid.resourceStrings.igx_grid_pattern_validation_error}}\r\n    </div>\r\n</ng-template>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.IgxGridSelectionService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i5.IgxOverlayService, decorators: [{
                    type: Inject,
                    args: [IgxOverlayService]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i2.HammerGesturesManager }, { type: i3.PlatformUtil }]; }, propDecorators: { isEmptyAddRowCell: [{
                type: HostBinding,
                args: ['class.igx-grid__td--new']
            }], errorTooltip: [{
                type: ViewChildren,
                args: ['error', { read: IgxTooltipDirective }]
            }], errorIcon: [{
                type: ViewChild,
                args: ['errorIcon', { read: IgxIconComponent, static: false }]
            }], defaultErrorTemplate: [{
                type: ViewChild,
                args: ['defaultError', { read: TemplateRef, static: true }]
            }], column: [{
                type: Input
            }], intRow: [{
                type: Input
            }], row: [{
                type: Input
            }], rowData: [{
                type: Input
            }], columnData: [{
                type: Input
            }], cellTemplate: [{
                type: Input
            }], cellValidationErrorTemplate: [{
                type: Input
            }], pinnedIndicator: [{
                type: Input
            }], value: [{
                type: Input
            }], formatter: [{
                type: Input
            }], rowIndex: [{
                type: HostBinding,
                args: ['attr.data-rowIndex']
            }], visibleColumnIndex: [{
                type: HostBinding,
                args: ['attr.data-visibleIndex']
            }, {
                type: Input
            }], attrCellID: [{
                type: HostBinding,
                args: ['attr.id']
            }], title: [{
                type: HostBinding,
                args: ['attr.title']
            }], booleanClass: [{
                type: HostBinding,
                args: ['class.igx-grid__td--bool-true']
            }], cellSelectionMode: [{
                type: Input
            }], lastSearchInfo: [{
                type: Input
            }], lastPinned: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid__td--pinned-last']
            }], firstPinned: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid__td--pinned-first']
            }], editMode: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid__td--editing']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], readonly: [{
                type: HostBinding,
                args: ['attr.aria-readonly']
            }], ariaDescribeBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], isInvalid: [{
                type: HostBinding,
                args: ['class.igx-grid__td--invalid']
            }, {
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], isValidAfterEdit: [{
                type: HostBinding,
                args: ['class.igx-grid__td--valid']
            }], width: [{
                type: Input
            }], active: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid__td--active']
            }], ariaSelected: [{
                type: HostBinding,
                args: ['attr.aria-selected']
            }], selected: [{
                type: HostBinding,
                args: ['class.igx-grid__td--selected']
            }], columnSelected: [{
                type: HostBinding,
                args: ['class.igx-grid__td--column-selected']
            }], displayPinnedChip: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid__td--row-pinned-first']
            }], defaultCellTemplate: [{
                type: ViewChild,
                args: ['defaultCell', { read: TemplateRef, static: true }]
            }], defaultPinnedIndicator: [{
                type: ViewChild,
                args: ['defaultPinnedIndicator', { read: TemplateRef, static: true }]
            }], inlineEditorTemplate: [{
                type: ViewChild,
                args: ['inlineEditor', { read: TemplateRef, static: true }]
            }], addRowCellTemplate: [{
                type: ViewChild,
                args: ['addRowCell', { read: TemplateRef, static: true }]
            }], highlight: [{
                type: ViewChild,
                args: [IgxTextHighlightDirective, { read: IgxTextHighlightDirective }]
            }], onDoubleClick: [{
                type: HostListener,
                args: ['dblclick', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], onContextMenu: [{
                type: HostListener,
                args: ['contextmenu', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,