import { Component, ViewChild } from '@angular/core';
import { IgxExcelStyleDefaultExpressionComponent } from './excel-style-default-expression.component';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { IgxTimePickerComponent } from '../../../time-picker/time-picker.component';
import { getLocaleFirstDayOfWeek, NgIf, NgFor } from "@angular/common";
import { IgxOverlayOutletDirective } from '../../../directives/toggle/toggle.directive';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { IgxButtonDirective } from '../../../directives/button/button.directive';
import { IgxDateTimeEditorDirective } from '../../../directives/date-time-editor/date-time-editor.directive';
import { FormsModule } from '@angular/forms';
import { IgxInputGroupComponent } from '../../../input-group/input-group.component';
import { IgxPickerToggleComponent, IgxPickerClearComponent } from '../../../date-common/picker-icons.common';
import { IgxDatePickerComponent } from '../../../date-picker/date-picker.component';
import { IgxSelectItemComponent } from '../../../select/select-item.component';
import { IgxIconComponent } from '../../../icon/icon.component';
import { IgxPrefixDirective } from '../../../directives/prefix/prefix.directive';
import { IgxSelectComponent } from '../../../select/select.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/**
 * @hidden
 */
export class IgxExcelStyleDateExpressionComponent extends IgxExcelStyleDefaultExpressionComponent {
    get inputValuesElement() {
        return this.picker?.getEditElement() || this.input?.nativeElement;
    }
    get inputDatePlaceholder() {
        return this.grid.resourceStrings['igx_grid_filter_row_date_placeholder'];
    }
    get inputTimePlaceholder() {
        return this.grid.resourceStrings['igx_grid_filter_row_time_placeholder'];
    }
    get weekStart() {
        return getLocaleFirstDayOfWeek(this.grid.locale);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxExcelStyleDateExpressionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxExcelStyleDateExpressionComponent, isStandalone: true, selector: "igx-excel-style-date-expression", viewQueries: [{ propertyName: "input", first: true, predicate: ["input"], descendants: true, read: IgxInputDirective }, { propertyName: "picker", first: true, predicate: ["picker"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<igx-select #dropdownConditions\r\n        type=\"box\"\r\n        [displayDensity]=\"displayDensity\"\r\n        [placeholder]=\"conditionsPlaceholder\"\r\n        (selectionChanging)=\"onConditionsChanged($event)\"\r\n        [overlaySettings]=\"dropDownOverlaySettings\">\r\n    <igx-prefix>\r\n        <igx-icon *ngIf=\"expressionUI.expression.condition\" family=\"imx-icons\" [name]=\"getIconName()\"></igx-icon>\r\n        <igx-icon *ngIf=\"!expressionUI.expression.condition\">filter_list</igx-icon>\r\n    </igx-prefix>\r\n    <igx-select-item *ngFor=\"let condition of conditions\" [value]=\"condition\" [text]=\"getConditionFriendlyName(condition)\" [selected]=\"isConditionSelected(condition)\">\r\n        <igx-icon family=\"imx-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\r\n        <span>{{translateCondition(condition)}}</span>\r\n    </igx-select-item>\r\n</igx-select>\r\n\r\n<igx-date-picker #picker *ngIf=\"column.dataType === 'date'\"\r\n    [weekStart]=\"column.pipeArgs.weekStart ?? weekStart\"\r\n    [(value)]=\"expressionUI.expression.searchVal\"\r\n    [locale]=\"grid.locale\"\r\n    [outlet]=\"grid.outlet\"\r\n    [displayDensity]=\"displayDensity\"\r\n    (click)=\"picker.open()\"\r\n    [readOnly]=\"true\"\r\n    [placeholder]=\"inputDatePlaceholder\"\r\n    [displayFormat]=\"column.pipeArgs.format\"\r\n    [formatter]=\"column.formatter\"\r\n    [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\r\n    type=\"box\">\r\n     <!-- disable default icons -->\r\n     <igx-picker-toggle></igx-picker-toggle>\r\n     <igx-picker-clear></igx-picker-clear>\r\n</igx-date-picker>\r\n\r\n<igx-time-picker #picker *ngIf=\"column.dataType === 'time'\"\r\n    [inputFormat]=\"column.defaultTimeFormat\"\r\n    [(value)]=\"expressionUI.expression.searchVal\"\r\n    [locale]=\"grid.locale\"\r\n    [outlet]=\"grid.outlet\"\r\n    [displayDensity]=\"displayDensity\"\r\n    (click)=\"picker.open()\"\r\n    [readOnly]=\"true\"\r\n    [placeholder]=\"inputTimePlaceholder\"\r\n    [displayFormat]=\"column.pipeArgs.format\"\r\n    [formatter]=\"column.formatter\"\r\n    [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\r\n    type=\"box\">\r\n     <!-- disable default icons -->\r\n     <igx-picker-toggle></igx-picker-toggle>\r\n     <igx-picker-clear></igx-picker-clear>\r\n</igx-time-picker>\r\n\r\n<igx-input-group #dropDownTarget *ngIf=\"column.dataType === 'dateTime'\" #inputGroup type=\"box\" [displayDensity]=\"displayDensity\">\r\n    <input #input igxInput tabindex=\"0\"\r\n        [placeholder]=\"inputDatePlaceholder\"\r\n        [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n        [(ngModel)]=\"expressionUI.expression.searchVal\"\r\n        [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"/>\r\n</igx-input-group>\r\n\r\n<button (click)=\"onRemoveButtonClick()\" igxButton=\"icon\" [displayDensity]=\"displayDensity\" *ngIf=\"!isSingle\" >\r\n    <igx-icon>cancel</igx-icon>\r\n</button>\r\n\r\n<igx-buttongroup #logicOperatorButtonGroup\r\n    *ngIf=\"!isLast\"\r\n    [multiSelection]=\"false\">\r\n    <span igxButton [displayDensity]=\"displayDensity\"\r\n        #andButton\r\n        (keydown)=\"onLogicOperatorKeyDown($event, 0)\"\r\n        tabindex=\"0\"\r\n        [selected]=\"expressionUI.afterOperator === 0\"\r\n        type=\"button\"\r\n        (click)=\"onLogicOperatorButtonClicked($event, 0)\">\r\n        {{ grid.resourceStrings.igx_grid_filter_operator_and }}\r\n    </span>\r\n\r\n    <span igxButton [displayDensity]=\"displayDensity\"\r\n        #orButton\r\n        tabindex=\"0\"\r\n        (keydown)=\"onLogicOperatorKeyDown($event, 1)\"\r\n        [selected]=\"expressionUI.afterOperator === 1\"\r\n        type=\"button\"\r\n        (click)=\"onLogicOperatorButtonClicked($event, 1)\">\r\n        {{ grid.resourceStrings.igx_grid_filter_operator_or }}\r\n    </span>\r\n</igx-buttongroup>\r\n\r\n<div #overlayOutlet\r\n     igxOverlayOutlet\r\n     (pointerdown)=\"onOutletPointerDown($event)\">\r\n</div>\r\n", dependencies: [{ kind: "component", type: IgxSelectComponent, selector: "igx-select", inputs: ["placeholder", "disabled", "overlaySettings", "value", "type"], outputs: ["opening", "opened", "closing", "closed"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxSelectItemComponent, selector: "igx-select-item", inputs: ["text"] }, { kind: "component", type: IgxDatePickerComponent, selector: "igx-date-picker", inputs: ["hideOutsideDays", "displayMonthsCount", "showWeekNumbers", "formatter", "headerOrientation", "todayButtonLabel", "cancelButtonLabel", "spinLoop", "spinDelta", "outlet", "id", "formatViews", "disabledDates", "specialDates", "calendarFormat", "value", "minValue", "maxValue", "resourceStrings", "readOnly"], outputs: ["valueChange", "validationFailed"] }, { kind: "component", type: IgxPickerToggleComponent, selector: "igx-picker-toggle", outputs: ["clicked"] }, { kind: "component", type: IgxPickerClearComponent, selector: "igx-picker-clear" }, { kind: "component", type: IgxTimePickerComponent, selector: "igx-time-picker", inputs: ["id", "displayFormat", "inputFormat", "mode", "minValue", "maxValue", "spinLoop", "formatter", "headerOrientation", "readOnly", "value", "resourceStrings", "okButtonLabel", "cancelButtonLabel", "itemsDelta"], outputs: ["selected", "valueChange", "validationFailed"] }, { kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: ["locale", "minValue", "maxValue", "spinLoop", "displayFormat", "igxDateTimeEditor", "value", "spinDelta"], outputs: ["valueChange", "validationFailed"], exportAs: ["igxDateTimeEditor"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "component", type: IgxButtonGroupComponent, selector: "igx-buttongroup", inputs: ["id", "itemContentCssClass", "multiSelection", "values", "disabled", "alignment"], outputs: ["selected", "deselected"] }, { kind: "directive", type: IgxOverlayOutletDirective, selector: "[igxOverlayOutlet]", exportAs: ["overlay-outlet"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxExcelStyleDateExpressionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-excel-style-date-expression', standalone: true, imports: [IgxSelectComponent, IgxPrefixDirective, NgIf, IgxIconComponent, NgFor, IgxSelectItemComponent, IgxDatePickerComponent, IgxPickerToggleComponent, IgxPickerClearComponent, IgxTimePickerComponent, IgxInputGroupComponent, FormsModule, IgxInputDirective, IgxDateTimeEditorDirective, IgxButtonDirective, IgxButtonGroupComponent, IgxOverlayOutletDirective], template: "<igx-select #dropdownConditions\r\n        type=\"box\"\r\n        [displayDensity]=\"displayDensity\"\r\n        [placeholder]=\"conditionsPlaceholder\"\r\n        (selectionChanging)=\"onConditionsChanged($event)\"\r\n        [overlaySettings]=\"dropDownOverlaySettings\">\r\n    <igx-prefix>\r\n        <igx-icon *ngIf=\"expressionUI.expression.condition\" family=\"imx-icons\" [name]=\"getIconName()\"></igx-icon>\r\n        <igx-icon *ngIf=\"!expressionUI.expression.condition\">filter_list</igx-icon>\r\n    </igx-prefix>\r\n    <igx-select-item *ngFor=\"let condition of conditions\" [value]=\"condition\" [text]=\"getConditionFriendlyName(condition)\" [selected]=\"isConditionSelected(condition)\">\r\n        <igx-icon family=\"imx-icons\" [name]=\"getCondition(condition).iconName\"></igx-icon>\r\n        <span>{{translateCondition(condition)}}</span>\r\n    </igx-select-item>\r\n</igx-select>\r\n\r\n<igx-date-picker #picker *ngIf=\"column.dataType === 'date'\"\r\n    [weekStart]=\"column.pipeArgs.weekStart ?? weekStart\"\r\n    [(value)]=\"expressionUI.expression.searchVal\"\r\n    [locale]=\"grid.locale\"\r\n    [outlet]=\"grid.outlet\"\r\n    [displayDensity]=\"displayDensity\"\r\n    (click)=\"picker.open()\"\r\n    [readOnly]=\"true\"\r\n    [placeholder]=\"inputDatePlaceholder\"\r\n    [displayFormat]=\"column.pipeArgs.format\"\r\n    [formatter]=\"column.formatter\"\r\n    [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\r\n    type=\"box\">\r\n     <!-- disable default icons -->\r\n     <igx-picker-toggle></igx-picker-toggle>\r\n     <igx-picker-clear></igx-picker-clear>\r\n</igx-date-picker>\r\n\r\n<igx-time-picker #picker *ngIf=\"column.dataType === 'time'\"\r\n    [inputFormat]=\"column.defaultTimeFormat\"\r\n    [(value)]=\"expressionUI.expression.searchVal\"\r\n    [locale]=\"grid.locale\"\r\n    [outlet]=\"grid.outlet\"\r\n    [displayDensity]=\"displayDensity\"\r\n    (click)=\"picker.open()\"\r\n    [readOnly]=\"true\"\r\n    [placeholder]=\"inputTimePlaceholder\"\r\n    [displayFormat]=\"column.pipeArgs.format\"\r\n    [formatter]=\"column.formatter\"\r\n    [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"\r\n    type=\"box\">\r\n     <!-- disable default icons -->\r\n     <igx-picker-toggle></igx-picker-toggle>\r\n     <igx-picker-clear></igx-picker-clear>\r\n</igx-time-picker>\r\n\r\n<igx-input-group #dropDownTarget *ngIf=\"column.dataType === 'dateTime'\" #inputGroup type=\"box\" [displayDensity]=\"displayDensity\">\r\n    <input #input igxInput tabindex=\"0\"\r\n        [placeholder]=\"inputDatePlaceholder\"\r\n        [igxDateTimeEditor]=\"column.defaultDateTimeFormat\"\r\n        [(ngModel)]=\"expressionUI.expression.searchVal\"\r\n        [disabled]=\"expressionUI.expression.condition && expressionUI.expression.condition.isUnary\"/>\r\n</igx-input-group>\r\n\r\n<button (click)=\"onRemoveButtonClick()\" igxButton=\"icon\" [displayDensity]=\"displayDensity\" *ngIf=\"!isSingle\" >\r\n    <igx-icon>cancel</igx-icon>\r\n</button>\r\n\r\n<igx-buttongroup #logicOperatorButtonGroup\r\n    *ngIf=\"!isLast\"\r\n    [multiSelection]=\"false\">\r\n    <span igxButton [displayDensity]=\"displayDensity\"\r\n        #andButton\r\n        (keydown)=\"onLogicOperatorKeyDown($event, 0)\"\r\n        tabindex=\"0\"\r\n        [selected]=\"expressionUI.afterOperator === 0\"\r\n        type=\"button\"\r\n        (click)=\"onLogicOperatorButtonClicked($event, 0)\">\r\n        {{ grid.resourceStrings.igx_grid_filter_operator_and }}\r\n    </span>\r\n\r\n    <span igxButton [displayDensity]=\"displayDensity\"\r\n        #orButton\r\n        tabindex=\"0\"\r\n        (keydown)=\"onLogicOperatorKeyDown($event, 1)\"\r\n        [selected]=\"expressionUI.afterOperator === 1\"\r\n        type=\"button\"\r\n        (click)=\"onLogicOperatorButtonClicked($event, 1)\">\r\n        {{ grid.resourceStrings.igx_grid_filter_operator_or }}\r\n    </span>\r\n</igx-buttongroup>\r\n\r\n<div #overlayOutlet\r\n     igxOverlayOutlet\r\n     (pointerdown)=\"onOutletPointerDown($event)\">\r\n</div>\r\n" }]
        }], propDecorators: { input: [{
                type: ViewChild,
                args: ['input', { read: IgxInputDirective, static: false }]
            }], picker: [{
                type: ViewChild,
                args: ['picker']
            }] } });
//# sourceMappingURL=data:application/json;base64,