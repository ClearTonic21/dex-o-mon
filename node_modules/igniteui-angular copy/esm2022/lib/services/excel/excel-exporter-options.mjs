import { IgxExporterOptionsBase } from '../exporter-common/exporter-options-base';
/**
 * Objects of this class are used to configure the Excel exporting process.
 */
export class IgxExcelExporterOptions extends IgxExporterOptionsBase {
    constructor(fileName) {
        super(fileName, '.xlsx');
        /**
         * Specifies if column pinning should be ignored. If ignoreColumnsOrder is set to true,
         * this option will always be considered as set to true.
         * ```typescript
         * let ignorePinning = this.exportOptions.ignorePinning;
         * this.exportOptions.ignorePinning = true;
         * ```
         *
         * @memberof IgxExcelExporterOptions
         */
        this.ignorePinning = false;
        /**
         * Specifies whether the exported data should be formatted as Excel table. (True by default)
         * ```typescript
         * let exportAsTable = this.exportOptions.exportAsTable;
         * this.exportOptions.exportAsTable = false;
         * ```
         *
         * @memberof IgxExcelExporterOptions
         */
        this.exportAsTable = true;
    }
    /**
     * Gets the width of the columns in the exported excel file.
     * ```typescript
     * let width = this.exportOptions.columnWidth;
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    get columnWidth() {
        return this._columnWidth;
    }
    /**
     * Sets the width of the columns in the exported excel file. If left unspecified,
     * the width of the column or the default width of the excel columns will be used.
     * ```typescript
     * this.exportOptions.columnWidth = 55;
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    set columnWidth(value) {
        if (value < 0) {
            throw Error('Invalid value for column width!');
        }
        this._columnWidth = value;
    }
    /**
     * Gets the height of the rows in the exported excel file.
     * ```typescript
     * let height = this.exportOptions.rowHeight;
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    get rowHeight() {
        return this._rowHeight;
    }
    /**
     * Sets the height of the rows in the exported excel file. If left unspecified or 0,
     * the default height of the excel rows will be used.
     * ```typescript
     * this.exportOptions.rowHeight = 25;
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    set rowHeight(value) {
        if (value < 0) {
            throw Error('Invalid value for row height!');
        }
        this._rowHeight = value;
    }
    /**
     * Gets the name of the worksheet in the exported excel file.
     * ```typescript
     * let worksheetName = this.exportOptions.worksheetName;
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    get worksheetName() {
        if (this._worksheetName === undefined || this._worksheetName === null) {
            return 'Sheet1';
        }
        return this._worksheetName;
    }
    /**
     * Sets the name of the worksheet in the exported excel file.
     * ```typescript
     * this.exportOptions.worksheetName = "Worksheet";
     * ```
     *
     * @memberof IgxExcelExporterOptions
     */
    set worksheetName(value) {
        this._worksheetName = value;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtZXhwb3J0ZXItb3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy9leGNlbC9leGNlbC1leHBvcnRlci1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRWxGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLHNCQUFzQjtJQTRCL0QsWUFBWSxRQUFnQjtRQUN4QixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBNUI3Qjs7Ozs7Ozs7O1dBU0c7UUFDSSxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUU3Qjs7Ozs7Ozs7V0FRRztRQUNJLGtCQUFhLEdBQUcsSUFBSSxDQUFDO0lBUTVCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBVyxXQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxJQUFXLFdBQVcsQ0FBQyxLQUFhO1FBQ2hDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRTtZQUNYLE1BQU0sS0FBSyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsU0FBUztRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBVyxTQUFTLENBQUMsS0FBYTtRQUM5QixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDWCxNQUFNLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxJQUFXLGFBQWE7UUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLElBQUksRUFBRTtZQUNuRSxPQUFPLFFBQVEsQ0FBQztTQUNuQjtRQUVELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUMvQixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILElBQVcsYUFBYSxDQUFDLEtBQWE7UUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZSB9IGZyb20gJy4uL2V4cG9ydGVyLWNvbW1vbi9leHBvcnRlci1vcHRpb25zLWJhc2UnO1xyXG5cclxuLyoqXHJcbiAqIE9iamVjdHMgb2YgdGhpcyBjbGFzcyBhcmUgdXNlZCB0byBjb25maWd1cmUgdGhlIEV4Y2VsIGV4cG9ydGluZyBwcm9jZXNzLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zIGV4dGVuZHMgSWd4RXhwb3J0ZXJPcHRpb25zQmFzZSB7XHJcbiAgICAvKipcclxuICAgICAqIFNwZWNpZmllcyBpZiBjb2x1bW4gcGlubmluZyBzaG91bGQgYmUgaWdub3JlZC4gSWYgaWdub3JlQ29sdW1uc09yZGVyIGlzIHNldCB0byB0cnVlLFxyXG4gICAgICogdGhpcyBvcHRpb24gd2lsbCBhbHdheXMgYmUgY29uc2lkZXJlZCBhcyBzZXQgdG8gdHJ1ZS5cclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGxldCBpZ25vcmVQaW5uaW5nID0gdGhpcy5leHBvcnRPcHRpb25zLmlnbm9yZVBpbm5pbmc7XHJcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuaWdub3JlUGlubmluZyA9IHRydWU7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGlnbm9yZVBpbm5pbmcgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBleHBvcnRlZCBkYXRhIHNob3VsZCBiZSBmb3JtYXR0ZWQgYXMgRXhjZWwgdGFibGUuIChUcnVlIGJ5IGRlZmF1bHQpXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBsZXQgZXhwb3J0QXNUYWJsZSA9IHRoaXMuZXhwb3J0T3B0aW9ucy5leHBvcnRBc1RhYmxlO1xyXG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLmV4cG9ydEFzVGFibGUgPSBmYWxzZTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhwb3J0QXNUYWJsZSA9IHRydWU7XHJcblxyXG4gICAgcHJpdmF0ZSBfY29sdW1uV2lkdGg6IG51bWJlcjtcclxuICAgIHByaXZhdGUgX3Jvd0hlaWdodDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBfd29ya3NoZWV0TmFtZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZpbGVOYW1lOiBzdHJpbmcpIHtcclxuICAgICAgICBzdXBlcihmaWxlTmFtZSwgJy54bHN4Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSB3aWR0aCBvZiB0aGUgY29sdW1ucyBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIGxldCB3aWR0aCA9IHRoaXMuZXhwb3J0T3B0aW9ucy5jb2x1bW5XaWR0aDtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0IGNvbHVtbldpZHRoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbHVtbldpZHRoO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbnMgaW4gdGhlIGV4cG9ydGVkIGV4Y2VsIGZpbGUuIElmIGxlZnQgdW5zcGVjaWZpZWQsXHJcbiAgICAgKiB0aGUgd2lkdGggb2YgdGhlIGNvbHVtbiBvciB0aGUgZGVmYXVsdCB3aWR0aCBvZiB0aGUgZXhjZWwgY29sdW1ucyB3aWxsIGJlIHVzZWQuXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiB0aGlzLmV4cG9ydE9wdGlvbnMuY29sdW1uV2lkdGggPSA1NTtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IGNvbHVtbldpZHRoKHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBjb2x1bW4gd2lkdGghJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jb2x1bW5XaWR0aCA9IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSByb3dzIGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogbGV0IGhlaWdodCA9IHRoaXMuZXhwb3J0T3B0aW9ucy5yb3dIZWlnaHQ7XHJcbiAgICAgKiBgYGBcclxuICAgICAqXHJcbiAgICAgKiBAbWVtYmVyb2YgSWd4RXhjZWxFeHBvcnRlck9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldCByb3dIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcm93SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgaGVpZ2h0IG9mIHRoZSByb3dzIGluIHRoZSBleHBvcnRlZCBleGNlbCBmaWxlLiBJZiBsZWZ0IHVuc3BlY2lmaWVkIG9yIDAsXHJcbiAgICAgKiB0aGUgZGVmYXVsdCBoZWlnaHQgb2YgdGhlIGV4Y2VsIHJvd3Mgd2lsbCBiZSB1c2VkLlxyXG4gICAgICogYGBgdHlwZXNjcmlwdFxyXG4gICAgICogdGhpcy5leHBvcnRPcHRpb25zLnJvd0hlaWdodCA9IDI1O1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXQgcm93SGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodmFsdWUgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciByb3cgaGVpZ2h0IScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fcm93SGVpZ2h0ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSB3b3Jrc2hlZXQgaW4gdGhlIGV4cG9ydGVkIGV4Y2VsIGZpbGUuXHJcbiAgICAgKiBgYGB0eXBlc2NyaXB0XHJcbiAgICAgKiBsZXQgd29ya3NoZWV0TmFtZSA9IHRoaXMuZXhwb3J0T3B0aW9ucy53b3Jrc2hlZXROYW1lO1xyXG4gICAgICogYGBgXHJcbiAgICAgKlxyXG4gICAgICogQG1lbWJlcm9mIElneEV4Y2VsRXhwb3J0ZXJPcHRpb25zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQgd29ya3NoZWV0TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmICh0aGlzLl93b3Jrc2hlZXROYW1lID09PSB1bmRlZmluZWQgfHwgdGhpcy5fd29ya3NoZWV0TmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJ1NoZWV0MSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5fd29ya3NoZWV0TmFtZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIG5hbWUgb2YgdGhlIHdvcmtzaGVldCBpbiB0aGUgZXhwb3J0ZWQgZXhjZWwgZmlsZS5cclxuICAgICAqIGBgYHR5cGVzY3JpcHRcclxuICAgICAqIHRoaXMuZXhwb3J0T3B0aW9ucy53b3Jrc2hlZXROYW1lID0gXCJXb3Jrc2hlZXRcIjtcclxuICAgICAqIGBgYFxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2V0IHdvcmtzaGVldE5hbWUodmFsdWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuX3dvcmtzaGVldE5hbWUgPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=