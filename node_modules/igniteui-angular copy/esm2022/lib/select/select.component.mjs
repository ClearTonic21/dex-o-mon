import { Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, Inject, Input, Optional, Output, TemplateRef, ViewChild } from '@angular/core';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { noop } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DisplayDensityToken } from '../core/density';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { IGX_DROPDOWN_BASE } from '../drop-down/drop-down.common';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { AbsoluteScrollStrategy } from '../services/overlay/scroll/absolute-scroll-strategy';
import { IgxDropDownComponent } from './../drop-down/drop-down.component';
import { IgxSelectItemComponent } from './select-item.component';
import { SelectPositioningStrategy } from './select-positioning-strategy';
import { IgxHintDirective, IgxPrefixDirective, IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { IgxOverlayService } from '../services/overlay/overlay';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxSelectItemNavigationDirective } from './select-navigation.directive';
import { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';
import * as i0 from "@angular/core";
import * as i1 from "../core/selection";
import * as i2 from "../services/overlay/overlay";
/** @hidden @internal */
export class IgxSelectToggleIconDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxSelectToggleIconDirective, isStandalone: true, selector: "[igxSelectToggleIcon]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectToggleIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSelectToggleIcon]',
                    standalone: true
                }]
        }] });
/** @hidden @internal */
export class IgxSelectHeaderDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxSelectHeaderDirective, isStandalone: true, selector: "[igxSelectHeader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSelectHeader]',
                    standalone: true
                }]
        }] });
/** @hidden @internal */
export class IgxSelectFooterDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectFooterDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxSelectFooterDirective, isStandalone: true, selector: "[igxSelectFooter]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectFooterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxSelectFooter]',
                    standalone: true
                }]
        }] });
/**
 * **Ignite UI for Angular Select** -
 * [Documentation](https://www.infragistics.com/products/ignite-ui-angular/angular/components/select)
 *
 * The `igxSelect` provides an input with dropdown list allowing selection of a single item.
 *
 * Example:
 * ```html
 * <igx-select #select1 [placeholder]="'Pick One'">
 *   <label igxLabel>Select Label</label>
 *   <igx-select-item *ngFor="let item of items" [value]="item.field">
 *     {{ item.field }}
 *   </igx-select-item>
 * </igx-select>
 * ```
 */
export class IgxSelectComponent extends IgxDropDownComponent {
    /**
     * An @Input property that gets/sets the component value.
     *
     * ```typescript
     * // get
     * let selectValue = this.select.value;
     * ```
     *
     * ```typescript
     * // set
     * this.select.value = 'London';
     * ```
     * ```html
     * <igx-select [value]="value"></igx-select>
     * ```
     */
    get value() {
        return this._value;
    }
    set value(v) {
        if (this._value === v) {
            return;
        }
        this._value = v;
        this.setSelection(this.items.find(x => x.value === this.value));
    }
    /**
     * An @Input property that sets how the select will be styled.
     * The allowed values are `line`, `box` and `border`. The input-group default is `line`.
     * ```html
     * <igx-select [type]="'box'"></igx-select>
     * ```
     */
    get type() {
        return this._type || this._inputGroupType || 'line';
    }
    set type(val) {
        this._type = val;
    }
    /** @hidden @internal */
    get selectionValue() {
        const selectedItem = this.selectedItem;
        return selectedItem ? selectedItem.itemText : '';
    }
    /** @hidden @internal */
    get selectedItem() {
        return this.selection.first_item(this.id);
    }
    constructor(elementRef, cdr, selection, overlayService, _displayDensityOptions, _inputGroupType, _injector) {
        super(elementRef, cdr, selection, _displayDensityOptions);
        this.overlayService = overlayService;
        this._inputGroupType = _inputGroupType;
        this._injector = _injector;
        /**
         * An @Input property that disables the `IgxSelectComponent`.
         * ```html
         * <igx-select [disabled]="'true'"></igx-select>
         * ```
         */
        this.disabled = false;
        /** @hidden @internal */
        this.maxHeight = '256px';
        /**
         * Emitted before the dropdown is opened
         *
         * ```html
         * <igx-select opening='handleOpening($event)'></igx-select>
         * ```
         */
        this.opening = new EventEmitter();
        /**
         * Emitted after the dropdown is opened
         *
         * ```html
         * <igx-select (opened)='handleOpened($event)'></igx-select>
         * ```
         */
        this.opened = new EventEmitter();
        /**
         * Emitted before the dropdown is closed
         *
         * ```html
         * <igx-select (closing)='handleClosing($event)'></igx-select>
         * ```
         */
        this.closing = new EventEmitter();
        /**
         * Emitted after the dropdown is closed
         *
         * ```html
         * <igx-select (closed)='handleClosed($event)'></igx-select>
         * ```
         */
        this.closed = new EventEmitter();
        /**
         * The custom template, if any, that should be used when rendering the select TOGGLE(open/close) button
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.toggleIconTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectToggleIcon let-collapsed>
         *          <igx-icon>{{ collapsed ? 'remove_circle' : 'remove_circle_outline'}}</igx-icon>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        this.toggleIconTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the HEADER for the select items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.headerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectHeader>
         *          <div class="select__header">
         *              This is a custom header
         *          </div>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        this.headerTemplate = null;
        /**
         * The custom template, if any, that should be used when rendering the FOOTER for the select items list
         *
         * ```typescript
         * // Set in typescript
         * const myCustomTemplate: TemplateRef<any> = myComponent.customTemplate;
         * myComponent.select.footerTemplate = myCustomTemplate;
         * ```
         * ```html
         * <!-- Set in markup -->
         *  <igx-select #select>
         *      ...
         *      <ng-template igxSelectFooter>
         *          <div class="select__footer">
         *              This is a custom footer
         *          </div>
         *      </ng-template>
         *  </igx-select>
         * ```
         */
        this.footerTemplate = null;
        /** @hidden @internal do not use the drop-down container class */
        this.cssClass = false;
        /** @hidden @internal */
        this.allowItemsFocus = false;
        this.ngControl = null;
        this._type = null;
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        //#region ControlValueAccessor
        /** @hidden @internal */
        this.writeValue = (value) => {
            this.value = value;
        };
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    //#endregion
    /** @hidden @internal */
    getEditElement() {
        return this.input.nativeElement;
    }
    /** @hidden @internal */
    selectItem(newSelection, event) {
        const oldSelection = this.selectedItem ?? {};
        if (newSelection === null || newSelection.disabled || newSelection.isHeader) {
            return;
        }
        if (newSelection === oldSelection) {
            this.toggleDirective.close();
            return;
        }
        const args = { oldSelection, newSelection, cancel: false, owner: this };
        this.selectionChanging.emit(args);
        if (args.cancel) {
            return;
        }
        this.setSelection(newSelection);
        this._value = newSelection.value;
        if (event) {
            this.toggleDirective.close();
        }
        this.cdr.detectChanges();
        this._onChangeCallback(this.value);
    }
    /** @hidden @internal */
    getFirstItemElement() {
        return this.children.first.element.nativeElement;
    }
    /**
     * Opens the select
     *
     * ```typescript
     * this.select.open();
     * ```
     */
    open(overlaySettings) {
        if (this.disabled || this.items.length === 0) {
            return;
        }
        if (!this.selectedItem) {
            this.navigateFirst();
        }
        super.open(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));
    }
    inputGroupClick(event, overlaySettings) {
        const targetElement = event.target;
        if (this.hintElement && targetElement.contains(this.hintElement.nativeElement)) {
            return;
        }
        this.toggle(Object.assign({}, this._overlayDefaults, this.overlaySettings, overlaySettings));
    }
    /** @hidden @internal */
    ngAfterContentInit() {
        this._overlayDefaults = {
            target: this.getEditElement(),
            modal: false,
            positionStrategy: new SelectPositioningStrategy(this),
            scrollStrategy: new AbsoluteScrollStrategy(),
            excludeFromOutsideClick: [this.inputGroup.element.nativeElement]
        };
        const changes$ = this.children.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.setSelection(this.items.find(x => x.value === this.value));
            this.cdr.detectChanges();
        });
        Promise.resolve().then(() => {
            if (!changes$.closed) {
                this.children.notifyOnChanges();
            }
        });
    }
    /**
     * Event handlers
     *
     * @hidden @internal
     */
    handleOpening(e) {
        const args = { owner: this, event: e.event, cancel: e.cancel };
        this.opening.emit(args);
        e.cancel = args.cancel;
        if (args.cancel) {
            return;
        }
    }
    /** @hidden @internal */
    onToggleContentAppended(event) {
        const info = this.overlayService.getOverlayById(event.id);
        if (info?.settings?.positionStrategy instanceof SelectPositioningStrategy) {
            return;
        }
        super.onToggleContentAppended(event);
    }
    /** @hidden @internal */
    handleOpened() {
        this.updateItemFocus();
        this.opened.emit({ owner: this });
    }
    /** @hidden @internal */
    handleClosing(e) {
        const args = { owner: this, event: e.event, cancel: e.cancel };
        this.closing.emit(args);
        e.cancel = args.cancel;
    }
    /** @hidden @internal */
    handleClosed() {
        this.focusItem(false);
        this.closed.emit({ owner: this });
    }
    /** @hidden @internal */
    onBlur() {
        this._onTouchedCallback();
        if (this.ngControl && this.ngControl.invalid) {
            this.input.valid = IgxInputState.INVALID;
        }
        else {
            this.input.valid = IgxInputState.INITIAL;
        }
    }
    /** @hidden @internal */
    onFocus() {
        this._onTouchedCallback();
    }
    /**
     * @hidden @internal
     */
    ngOnInit() {
        this.ngControl = this._injector.get(NgControl, null);
        super.ngOnInit();
    }
    /**
     * @hidden @internal
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.onStatusChanged.bind(this));
            this.manageRequiredAsterisk();
        }
        this.cdr.detectChanges();
    }
    /** @hidden @internal */
    ngAfterContentChecked() {
        if (this.inputGroup && this.prefixes?.length > 0) {
            this.inputGroup.prefixes = this.prefixes;
        }
        if (this.inputGroup && this.suffixes?.length > 0) {
            this.inputGroup.suffixes = this.suffixes;
        }
    }
    /**
     * @hidden @internal
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.selection.clear(this.id);
    }
    /**
     * @hidden @internal
     * Prevent input blur - closing the items container on Header/Footer Template click.
     */
    mousedownHandler(event) {
        event.preventDefault();
    }
    onStatusChanged() {
        if ((this.ngControl.control.touched || this.ngControl.control.dirty) &&
            (this.ngControl.control.validator || this.ngControl.control.asyncValidator)) {
            if (this.inputGroup.isFocused) {
                this.input.valid = this.ngControl.invalid ? IgxInputState.INVALID : IgxInputState.VALID;
            }
            else {
                this.input.valid = this.ngControl.invalid ? IgxInputState.INVALID : IgxInputState.INITIAL;
            }
        }
        else {
            // B.P. 18 May 2021: IgxDatePicker does not reset its state upon resetForm #9526
            this.input.valid = IgxInputState.INITIAL;
        }
        this.manageRequiredAsterisk();
    }
    navigate(direction, currentIndex) {
        if (this.collapsed && this.selectedItem) {
            this.navigateItem(this.selectedItem.itemIndex);
        }
        super.navigate(direction, currentIndex);
    }
    manageRequiredAsterisk() {
        const hasRequiredHTMLAttribute = this.elementRef.nativeElement.hasAttribute('required');
        if (this.ngControl && this.ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this.ngControl.control.validator({});
            this.inputGroup.isRequired = error && error.required;
            this.cdr.markForCheck();
            // If validator is dynamically cleared and no required HTML attribute is set,
            // reset label's required class(asterisk) and IgxInputState #6896
        }
        else if (this.inputGroup.isRequired && this.ngControl && !this.ngControl.control.validator && !hasRequiredHTMLAttribute) {
            this.input.valid = IgxInputState.INITIAL;
            this.inputGroup.isRequired = false;
            this.cdr.markForCheck();
        }
    }
    setSelection(item) {
        if (item && item.value !== undefined && item.value !== null) {
            this.selection.set(this.id, new Set([item]));
        }
        else {
            this.selection.clear(this.id);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.IgxSelectionAPIService }, { token: IgxOverlayService }, { token: DisplayDensityToken, optional: true }, { token: IGX_INPUT_GROUP_TYPE, optional: true }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxSelectComponent, isStandalone: true, selector: "igx-select", inputs: { placeholder: "placeholder", disabled: "disabled", overlaySettings: "overlaySettings", value: "value", type: "type" }, outputs: { opening: "opening", opened: "opened", closing: "closing", closed: "closed" }, host: { properties: { "style.maxHeight": "this.maxHeight" } }, providers: [
            { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },
            { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }
        ], queries: [{ propertyName: "label", first: true, predicate: i0.forwardRef(function () { return IgxLabelDirective; }), descendants: true, static: true }, { propertyName: "toggleIconTemplate", first: true, predicate: IgxSelectToggleIconDirective, descendants: true, read: TemplateRef }, { propertyName: "headerTemplate", first: true, predicate: IgxSelectHeaderDirective, descendants: true, read: TemplateRef }, { propertyName: "footerTemplate", first: true, predicate: IgxSelectFooterDirective, descendants: true, read: TemplateRef }, { propertyName: "hintElement", first: true, predicate: IgxHintDirective, descendants: true, read: ElementRef }, { propertyName: "children", predicate: i0.forwardRef(function () { return IgxSelectItemComponent; }), descendants: true }, { propertyName: "prefixes", predicate: IgxPrefixDirective, descendants: true }, { propertyName: "suffixes", predicate: IgxSuffixDirective, descendants: true }], viewQueries: [{ propertyName: "inputGroup", first: true, predicate: ["inputGroup"], descendants: true, read: IgxInputGroupComponent, static: true }, { propertyName: "input", first: true, predicate: ["input"], descendants: true, read: IgxInputDirective, static: true }], usesInheritance: true, ngImport: i0, template: "<igx-input-group #inputGroup class=\"input-group\" (click)=\"inputGroupClick($event)\" [type]=\"type\" [displayDensity]=\"displayDensity\">\r\n    <ng-container ngProjectAs=\"[igxLabel]\">\r\n        <ng-content select=\"[igxLabel]\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-prefix\">\r\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\r\n    </ng-container>\r\n    <input #input class=\"input\" type=\"text\" igxInput [igxSelectItemNavigation]=\"this\"\r\n        [disabled]=\"disabled\"\r\n        readonly=\"true\"\r\n        [attr.placeholder]=\"this.placeholder\"\r\n        [value]=\"this.selectionValue\"\r\n        role=\"combobox\"\r\n        aria-haspopup=\"listbox\"\r\n        [attr.aria-labelledby]=\"this.label?.id\"\r\n        [attr.aria-expanded]=\"!this.collapsed\"\r\n        [attr.aria-owns]=\"this.listId\"\r\n        [attr.aria-activedescendant]=\"!this.collapsed ? this.focusedItem?.id : null\"\r\n        (blur)=\"onBlur()\"\r\n        (focus)=\"onFocus()\"\r\n    />\r\n    <ng-container ngProjectAs=\"igx-suffix\">\r\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\r\n    </ng-container>\r\n    <igx-suffix class=\"igx-select__toggle-button\">\r\n        <ng-container *ngIf=\"toggleIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!toggleIconTemplate\">\r\n            {{ inputGroup.theme === 'material' ? collapsed ? 'expand_more' : 'expand_less' : collapsed ? 'arrow_drop_down' : 'arrow_drop_up' }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\" >\r\n        <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\r\n    </ng-container>\r\n</igx-input-group>\r\n<div igxToggle class=\"igx-drop-down__list\" (mousedown)=\"mousedownHandler($event);\"\r\n    (appended)=\"onToggleContentAppended($event)\"\r\n    (opening)=\"handleOpening($event)\"\r\n    (opened)=\"handleOpened()\"\r\n    (closing)=\"handleClosing($event)\"\r\n    (closed)=\"handleClosed()\">\r\n\r\n    <div *ngIf=\"headerTemplate\" class=\"igx-drop-down__select-header\">\r\n        <ng-content *ngTemplateOutlet=\"headerTemplate\"></ng-content>\r\n    </div>\r\n\r\n    <!-- #7436 LMB scrolling closes items container - unselectable attribute is IE specific  -->\r\n    <div #scrollContainer class=\"igx-drop-down__list-scroll\" unselectable=\"on\" [style.maxHeight]=\"maxHeight\"\r\n        [attr.id]=\"this.listId\" role=\"listbox\" [attr.aria-labelledby]=\"this.label?.id\">\r\n        <ng-content select=\"igx-select-item, igx-select-item-group\"></ng-content>\r\n    </div>\r\n\r\n    <div *ngIf=\"footerTemplate\" class=\"igx-drop-down__select-footer\">\r\n        <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxSelectItemNavigationDirective, selector: "[igxSelectItemNavigation]", inputs: ["igxSelectItemNavigation"] }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-select', providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: IgxSelectComponent, multi: true },
                        { provide: IGX_DROPDOWN_BASE, useExisting: IgxSelectComponent }
                    ], standalone: true, imports: [IgxInputGroupComponent, IgxInputDirective, IgxSelectItemNavigationDirective, IgxSuffixDirective, NgIf, NgTemplateOutlet, IgxIconComponent, IgxToggleDirective], template: "<igx-input-group #inputGroup class=\"input-group\" (click)=\"inputGroupClick($event)\" [type]=\"type\" [displayDensity]=\"displayDensity\">\r\n    <ng-container ngProjectAs=\"[igxLabel]\">\r\n        <ng-content select=\"[igxLabel]\"></ng-content>\r\n    </ng-container>\r\n    <ng-container ngProjectAs=\"igx-prefix\">\r\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\r\n    </ng-container>\r\n    <input #input class=\"input\" type=\"text\" igxInput [igxSelectItemNavigation]=\"this\"\r\n        [disabled]=\"disabled\"\r\n        readonly=\"true\"\r\n        [attr.placeholder]=\"this.placeholder\"\r\n        [value]=\"this.selectionValue\"\r\n        role=\"combobox\"\r\n        aria-haspopup=\"listbox\"\r\n        [attr.aria-labelledby]=\"this.label?.id\"\r\n        [attr.aria-expanded]=\"!this.collapsed\"\r\n        [attr.aria-owns]=\"this.listId\"\r\n        [attr.aria-activedescendant]=\"!this.collapsed ? this.focusedItem?.id : null\"\r\n        (blur)=\"onBlur()\"\r\n        (focus)=\"onFocus()\"\r\n    />\r\n    <ng-container ngProjectAs=\"igx-suffix\">\r\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\r\n    </ng-container>\r\n    <igx-suffix class=\"igx-select__toggle-button\">\r\n        <ng-container *ngIf=\"toggleIconTemplate\">\r\n            <ng-container *ngTemplateOutlet=\"toggleIconTemplate; context: {$implicit: this.collapsed}\"></ng-container>\r\n        </ng-container>\r\n        <igx-icon *ngIf=\"!toggleIconTemplate\">\r\n            {{ inputGroup.theme === 'material' ? collapsed ? 'expand_more' : 'expand_less' : collapsed ? 'arrow_drop_down' : 'arrow_drop_up' }}\r\n        </igx-icon>\r\n    </igx-suffix>\r\n    <ng-container ngProjectAs=\"igx-hint, [igxHint]\" >\r\n        <ng-content select=\"igx-hint, [igxHint]\"></ng-content>\r\n    </ng-container>\r\n</igx-input-group>\r\n<div igxToggle class=\"igx-drop-down__list\" (mousedown)=\"mousedownHandler($event);\"\r\n    (appended)=\"onToggleContentAppended($event)\"\r\n    (opening)=\"handleOpening($event)\"\r\n    (opened)=\"handleOpened()\"\r\n    (closing)=\"handleClosing($event)\"\r\n    (closed)=\"handleClosed()\">\r\n\r\n    <div *ngIf=\"headerTemplate\" class=\"igx-drop-down__select-header\">\r\n        <ng-content *ngTemplateOutlet=\"headerTemplate\"></ng-content>\r\n    </div>\r\n\r\n    <!-- #7436 LMB scrolling closes items container - unselectable attribute is IE specific  -->\r\n    <div #scrollContainer class=\"igx-drop-down__list-scroll\" unselectable=\"on\" [style.maxHeight]=\"maxHeight\"\r\n        [attr.id]=\"this.listId\" role=\"listbox\" [attr.aria-labelledby]=\"this.label?.id\">\r\n        <ng-content select=\"igx-select-item, igx-select-item-group\"></ng-content>\r\n    </div>\r\n\r\n    <div *ngIf=\"footerTemplate\" class=\"igx-drop-down__select-footer\">\r\n        <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\r\n    </div>\r\n</div>\r\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.IgxSelectionAPIService }, { type: i2.IgxOverlayService, decorators: [{
                    type: Inject,
                    args: [IgxOverlayService]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_INPUT_GROUP_TYPE]
                }] }, { type: i0.Injector }]; }, propDecorators: { inputGroup: [{
                type: ViewChild,
                args: ['inputGroup', { read: IgxInputGroupComponent, static: true }]
            }], input: [{
                type: ViewChild,
                args: ['input', { read: IgxInputDirective, static: true }]
            }], children: [{
                type: ContentChildren,
                args: [forwardRef(() => IgxSelectItemComponent), { descendants: true }]
            }], prefixes: [{
                type: ContentChildren,
                args: [IgxPrefixDirective, { descendants: true }]
            }], suffixes: [{
                type: ContentChildren,
                args: [IgxSuffixDirective, { descendants: true }]
            }], label: [{
                type: ContentChild,
                args: [forwardRef(() => IgxLabelDirective), { static: true }]
            }], placeholder: [{
                type: Input
            }], disabled: [{
                type: Input
            }], overlaySettings: [{
                type: Input
            }], maxHeight: [{
                type: HostBinding,
                args: ['style.maxHeight']
            }], opening: [{
                type: Output
            }], opened: [{
                type: Output
            }], closing: [{
                type: Output
            }], closed: [{
                type: Output
            }], toggleIconTemplate: [{
                type: ContentChild,
                args: [IgxSelectToggleIconDirective, { read: TemplateRef }]
            }], headerTemplate: [{
                type: ContentChild,
                args: [IgxSelectHeaderDirective, { read: TemplateRef, static: false }]
            }], footerTemplate: [{
                type: ContentChild,
                args: [IgxSelectFooterDirective, { read: TemplateRef, static: false }]
            }], hintElement: [{
                type: ContentChild,
                args: [IgxHintDirective, { read: ElementRef }]
            }], value: [{
                type: Input
            }], type: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,