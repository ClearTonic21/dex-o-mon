import { Inject, Injectable, Input } from '@angular/core';
import { mkenum } from '../../core/utils';
import { Subject } from 'rxjs';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
const Theme = /*@__PURE__*/ mkenum({
    Material: 'material',
    Fluent: 'fluent',
    Bootstrap: 'bootstrap',
    IndigoDesign: 'indigo-design'
});
export class ThemeService {
    /**
     * Sets the theme of the component.
     * Allowed values of type IgxTheme.
     */
    set theme(value) {
        this._theme = value;
    }
    /**
     * Returns the theme of the component.
     * The returned value is of type IgxTheme.
     */
    get theme() {
        return this._theme;
    }
    constructor(document) {
        this.document = document;
        this._theme$ = new Subject();
        this._subscription = this._theme$.asObservable().subscribe(value => {
            this._theme = value;
        });
    }
    getCssProp(element) {
        if (!this._theme) {
            const cssProp = this.document.defaultView
                .getComputedStyle(element.nativeElement)
                .getPropertyValue('--theme')
                .trim();
            if (cssProp !== '') {
                Promise.resolve().then(() => {
                    this._theme$.next(cssProp);
                });
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ThemeService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }], propDecorators: { theme: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy90aGVtZS90aGVtZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxNQUFNLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDMUMsT0FBTyxFQUFFLE9BQU8sRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUUzQyxNQUFNLEtBQUssR0FBRyxhQUFhLENBQUEsTUFBTSxDQUFDO0lBQ2hDLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLFNBQVMsRUFBRSxXQUFXO0lBQ3RCLFlBQVksRUFBRSxlQUFlO0NBQzlCLENBQUMsQ0FBQztBQVVILE1BQU0sT0FBTyxZQUFZO0lBS3ZCOzs7T0FHRztJQUNILElBQ1csS0FBSyxDQUFDLEtBQWU7UUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILElBQVcsS0FBSztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFFVSxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQXRCZixZQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQXdCOUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNqRSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQWlCLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sVUFBVSxDQUFDLE9BQW1CO1FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXO2lCQUNwQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO2lCQUN2QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7aUJBQzNCLElBQUksRUFBRSxDQUFDO1lBRVosSUFBSSxPQUFPLEtBQUssRUFBRSxFQUFFLENBQUM7Z0JBQ2pCLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUN4QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDL0IsQ0FBQyxDQUFDLENBQUM7WUFDUCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7OEdBNUNVLFlBQVksa0JBdUJiLFFBQVE7a0hBdkJQLFlBQVksY0FGWCxNQUFNOzsyRkFFUCxZQUFZO2tCQUh4QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBd0JJLE1BQU07MkJBQUMsUUFBUTt5Q0FiUCxLQUFLO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBta2VudW0gfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5jb25zdCBUaGVtZSA9IC8qQF9fUFVSRV9fKi9ta2VudW0oe1xuICBNYXRlcmlhbDogJ21hdGVyaWFsJyxcbiAgRmx1ZW50OiAnZmx1ZW50JyxcbiAgQm9vdHN0cmFwOiAnYm9vdHN0cmFwJyxcbiAgSW5kaWdvRGVzaWduOiAnaW5kaWdvLWRlc2lnbidcbn0pO1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGNvbXBvbmVudCB0aGVtZS5cbiAqL1xuZXhwb3J0IHR5cGUgSWd4VGhlbWUgPSAodHlwZW9mIFRoZW1lKVtrZXlvZiB0eXBlb2YgVGhlbWVdO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUaGVtZVNlcnZpY2Uge1xuICBwdWJsaWMgX3RoZW1lOiBJZ3hUaGVtZTtcbiAgcHJpdmF0ZSBfdGhlbWUkID0gbmV3IFN1YmplY3QoKTtcbiAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHRoZW1lIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIEFsbG93ZWQgdmFsdWVzIG9mIHR5cGUgSWd4VGhlbWUuXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IHRoZW1lKHZhbHVlOiBJZ3hUaGVtZSkge1xuICAgIHRoaXMuX3RoZW1lID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdGhlbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICogVGhlIHJldHVybmVkIHZhbHVlIGlzIG9mIHR5cGUgSWd4VGhlbWUuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHRoZW1lKCk6IElneFRoZW1lIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbWU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBASW5qZWN0KERPQ1VNRU5UKVxuICAgIHByaXZhdGUgZG9jdW1lbnQ6IGFueVxuICApIHsgXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5fdGhlbWUkLmFzT2JzZXJ2YWJsZSgpLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICB0aGlzLl90aGVtZSA9IHZhbHVlIGFzIElneFRoZW1lO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldENzc1Byb3AoZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgIGlmICghdGhpcy5fdGhlbWUpIHtcbiAgICAgIGNvbnN0IGNzc1Byb3AgPSB0aGlzLmRvY3VtZW50LmRlZmF1bHRWaWV3XG4gICAgICAgICAgLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudC5uYXRpdmVFbGVtZW50KVxuICAgICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKCctLXRoZW1lJylcbiAgICAgICAgICAudHJpbSgpO1xuXG4gICAgICBpZiAoY3NzUHJvcCAhPT0gJycpIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5fdGhlbWUkLm5leHQoY3NzUHJvcCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=