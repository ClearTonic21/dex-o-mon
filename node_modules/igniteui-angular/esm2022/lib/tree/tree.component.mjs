import { Component, Input, Output, EventEmitter, ContentChild, Directive, TemplateRef, ContentChildren, HostBinding, booleanAttribute } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { IGX_TREE_COMPONENT, IgxTreeSelectionType } from './common';
import { IgxTreeNavigationService } from './tree-navigation.service';
import { IgxTreeNodeComponent } from './tree-node/tree-node.component';
import { IgxTreeSelectionService } from './tree-selection.service';
import { IgxTreeService } from './tree.service';
import { growVerIn, growVerOut } from 'igniteui-angular/animations';
import { resizeObservable } from '../core/utils';
import * as i0 from "@angular/core";
import * as i1 from "./tree-navigation.service";
import * as i2 from "./tree-selection.service";
import * as i3 from "./tree.service";
/**
 * @hidden @internal
 * Used for templating the select marker of the tree
 */
export class IgxTreeSelectMarkerDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeSelectMarkerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: IgxTreeSelectMarkerDirective, isStandalone: true, selector: "[igxTreeSelectMarker]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeSelectMarkerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxTreeSelectMarker]',
                    standalone: true
                }]
        }] });
/**
 * @hidden @internal
 * Used for templating the expand indicator of the tree
 */
export class IgxTreeExpandIndicatorDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeExpandIndicatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: IgxTreeExpandIndicatorDirective, isStandalone: true, selector: "[igxTreeExpandIndicator]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeExpandIndicatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxTreeExpandIndicator]',
                    standalone: true
                }]
        }] });
/**
 * IgxTreeComponent allows a developer to show a set of nodes in a hierarchical fashion.
 *
 * @igxModule IgxTreeModule
 * @igxKeywords tree
 * @igxTheme igx-tree-theme
 * @igxGroup Grids & Lists
 *
 * @remark
 * The Angular Tree Component allows users to represent hierarchical data in a tree-view structure,
 * maintaining parent-child relationships, as well as to define static tree-view structure without a corresponding data model.
 * Its primary purpose is to allow end-users to visualize and navigate within hierarchical data structures.
 * The Ignite UI for Angular Tree Component also provides load on demand capabilities, item activation,
 * bi-state and cascading selection of items through built-in checkboxes, built-in keyboard navigation and more.
 *
 * @example
 * ```html
 * <igx-tree>
 *   <igx-tree-node>
 *      I am a parent node 1
 *      <igx-tree-node>
 *          I am a child node 1
 *      </igx-tree-node>
 *      ...
 *   </igx-tree-node>
 *	 ...
 * </igx-tree>
 * ```
 */
export class IgxTreeComponent {
    /**
     * Gets/Sets tree selection mode
     *
     * @remarks
     * By default the tree selection mode is 'None'
     * @param selectionMode: IgxTreeSelectionType
     */
    get selection() {
        return this._selection;
    }
    set selection(selectionMode) {
        this._selection = selectionMode;
        this.selectionService.clearNodesSelection();
    }
    /**
     * Returns all **root level** nodes
     *
     * ```typescript
     * const tree: IgxTree = this.tree;
     * const rootNodes: IgxTreeNodeComponent<any>[] = tree.rootNodes;
     * ```
     */
    get rootNodes() {
        return this.nodes?.filter(node => node.level === 0);
    }
    constructor(navService, selectionService, treeService, element) {
        this.navService = navService;
        this.selectionService = selectionService;
        this.treeService = treeService;
        this.element = element;
        this.cssClass = 'igx-tree';
        /** Get/Set how the tree should handle branch expansion.
         * If set to `true`, only a single branch can be expanded at a time, collapsing all others
         *
         * ```html
         * <igx-tree [singleBranchExpand]="true">
         * ...
         * </igx-tree>
         * ```
         *
         * ```typescript
         * const tree: IgxTree = this.tree;
         * this.tree.singleBranchExpand = false;
         * ```
         */
        this.singleBranchExpand = false;
        /** Get/Set if nodes should be expanded/collapsed when clicking over them.
         *
         * ```html
         * <igx-tree [toggleNodeOnClick]="true">
         * ...
         * </igx-tree>
         * ```
         *
         * ```typescript
         * const tree: IgxTree = this.tree;
         * this.tree.toggleNodeOnClick = false;
         * ```
         */
        this.toggleNodeOnClick = false;
        /** Get/Set the animation settings that branches should use when expanding/collpasing.
         *
         * ```html
         * <igx-tree [animationSettings]="customAnimationSettings">
         * </igx-tree>
         * ```
         *
         * ```typescript
         * const animationSettings: ToggleAnimationSettings = {
         *      openAnimation: growVerIn,
         *      closeAnimation: growVerOut
         * };
         *
         * this.tree.animationSettings = animationSettings;
         * ```
         */
        this.animationSettings = {
            openAnimation: growVerIn,
            closeAnimation: growVerOut
        };
        /** Emitted when the node selection is changed through interaction
         *
         * ```html
         * <igx-tree (nodeSelection)="handleNodeSelection($event)">
         * </igx-tree>
         * ```
         *
         *```typescript
         * public handleNodeSelection(event: ITreeNodeSelectionEvent) {
         *  const newSelection: IgxTreeNode<any>[] = event.newSelection;
         *  const added: IgxTreeNode<any>[] = event.added;
         *  console.log("New selection will be: ", newSelection);
         *  console.log("Added nodes: ", event.added);
         * }
         *```
         */
        this.nodeSelection = new EventEmitter();
        /** Emitted when a node is expanding, before it finishes
         *
         * ```html
         * <igx-tree (nodeExpanding)="handleNodeExpanding($event)">
         * </igx-tree>
         * ```
         *
         *```typescript
         * public handleNodeExpanding(event: ITreeNodeTogglingEventArgs) {
         *  const expandedNode: IgxTreeNode<any> = event.node;
         *  if (expandedNode.disabled) {
         *      event.cancel = true;
         *  }
         * }
         *```
         */
        this.nodeExpanding = new EventEmitter();
        /** Emitted when a node is expanded, after it finishes
         *
         * ```html
         * <igx-tree (nodeExpanded)="handleNodeExpanded($event)">
         * </igx-tree>
         * ```
         *
         *```typescript
         * public handleNodeExpanded(event: ITreeNodeToggledEventArgs) {
         *  const expandedNode: IgxTreeNode<any> = event.node;
         *  console.log("Node is expanded: ", expandedNode.data);
         * }
         *```
         */
        this.nodeExpanded = new EventEmitter();
        /** Emitted when a node is collapsing, before it finishes
         *
         * ```html
         * <igx-tree (nodeCollapsing)="handleNodeCollapsing($event)">
         * </igx-tree>
         * ```
         *
         *```typescript
         * public handleNodeCollapsing(event: ITreeNodeTogglingEventArgs) {
         *  const collapsedNode: IgxTreeNode<any> = event.node;
         *  if (collapsedNode.alwaysOpen) {
         *      event.cancel = true;
         *  }
         * }
         *```
         */
        this.nodeCollapsing = new EventEmitter();
        /** Emitted when a node is collapsed, after it finishes
         *
         * @example
         * ```html
         * <igx-tree (nodeCollapsed)="handleNodeCollapsed($event)">
         * </igx-tree>
         * ```
         * ```typescript
         * public handleNodeCollapsed(event: ITreeNodeToggledEventArgs) {
         *  const collapsedNode: IgxTreeNode<any> = event.node;
         *  console.log("Node is collapsed: ", collapsedNode.data);
         * }
         * ```
         */
        this.nodeCollapsed = new EventEmitter();
        /**
         * Emitted when the active node is changed.
         *
         * @example
         * ```
         * <igx-tree (activeNodeChanged)="activeNodeChanged($event)"></igx-tree>
         * ```
         */
        this.activeNodeChanged = new EventEmitter();
        /** @hidden @internal */
        this.disabledChange = new EventEmitter();
        /**
         * Emitted when the active node is set through API
         *
         * @hidden @internal
         */
        this.activeNodeBindingChange = new EventEmitter();
        /** @hidden @internal */
        this.forceSelect = [];
        /** @hidden @internal */
        this.resizeNotify = new Subject();
        this._selection = IgxTreeSelectionType.None;
        this.destroy$ = new Subject();
        this.unsubChildren$ = new Subject();
        this._comparer = (data, node) => node.data === data;
        this.selectionService.register(this);
        this.treeService.register(this);
        this.navService.register(this);
    }
    /** @hidden @internal */
    get nativeElement() {
        return this.element.nativeElement;
    }
    /**
     * Expands all of the passed nodes.
     * If no nodes are passed, expands ALL nodes
     *
     * @param nodes nodes to be expanded
     *
     * ```typescript
     * const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.expandable);
     * tree.expandAll(nodes);
     * ```
     */
    expandAll(nodes) {
        nodes = nodes || this.nodes.toArray();
        nodes.forEach(e => e.expanded = true);
    }
    /**
     * Collapses all of the passed nodes.
     * If no nodes are passed, collapses ALL nodes
     *
     * @param nodes nodes to be collapsed
     *
     * ```typescript
     * const targetNodes: IgxTreeNode<any> = this.tree.findNodes(true, (_data: any, node: IgxTreeNode<any>) => node.data.collapsible);
     * tree.collapseAll(nodes);
     * ```
     */
    collapseAll(nodes) {
        nodes = nodes || this.nodes.toArray();
        nodes.forEach(e => e.expanded = false);
    }
    /**
     * Deselect all nodes if the nodes collection is empty. Otherwise, deselect the nodes in the nodes collection.
     *
     * @example
     * ```typescript
     *  const arr = [
     *      this.tree.nodes.toArray()[0],
     *      this.tree.nodes.toArray()[1]
     *  ];
     *  this.tree.deselectAll(arr);
     * ```
     * @param nodes: IgxTreeNodeComponent<any>[]
     */
    deselectAll(nodes) {
        this.selectionService.deselectNodesWithNoEvent(nodes);
    }
    /**
     * Returns all of the nodes that match the passed searchTerm.
     * Accepts a custom comparer function for evaluating the search term against the nodes.
     *
     * @remark
     * Default search compares the passed `searchTerm` against the node's `data` Input.
     * When using `findNodes` w/o a `comparer`, make sure all nodes have `data` passed.
     *
     * @param searchTerm The data of the searched node
     * @param comparer A custom comparer function that evaluates the passed `searchTerm` against all nodes.
     * @returns Array of nodes that match the search. `null` if no nodes are found.
     *
     * ```html
     * <igx-tree>
     *     <igx-tree-node *ngFor="let node of data" [data]="node">
     *          {{ node.label }}
     *     </igx-tree-node>
     * </igx-tree>
     * ```
     *
     * ```typescript
     * public data: DataEntry[] = FETCHED_DATA;
     * ...
     * const matchedNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(searchTerm: data[5]);
     * ```
     *
     * Using a custom comparer
     * ```typescript
     * public data: DataEntry[] = FETCHED_DATA;
     * ...
     * const comparer: IgxTreeSearchResolver = (data: any, node: IgxTreeNode<DataEntry>) {
     *      return node.data.index % 2 === 0;
     * }
     * const evenIndexNodes: IgxTreeNode<DataEntry>[] = this.tree.findNodes<DataEntry>(null, comparer);
     * ```
     */
    findNodes(searchTerm, comparer) {
        const compareFunc = comparer || this._comparer;
        const results = this.nodes.filter(node => compareFunc(searchTerm, node));
        return results?.length === 0 ? null : results;
    }
    /** @hidden @internal */
    handleKeydown(event) {
        this.navService.handleKeydown(event);
    }
    /** @hidden @internal */
    ngOnInit() {
        this.disabledChange.pipe(takeUntil(this.destroy$)).subscribe((e) => {
            this.navService.update_disabled_cache(e);
        });
        this.activeNodeBindingChange.pipe(takeUntil(this.destroy$)).subscribe((node) => {
            this.expandToNode(this.navService.activeNode);
            this.scrollNodeIntoView(node?.header?.nativeElement);
        });
        this.subToCollapsing();
        this.resizeNotify.pipe(throttleTime(40, null, { trailing: true }), takeUntil(this.destroy$))
            .subscribe(() => {
            requestAnimationFrame(() => {
                this.scrollNodeIntoView(this.navService.activeNode?.header.nativeElement);
            });
        });
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.nodes.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.subToChanges();
        });
        this.scrollNodeIntoView(this.navService.activeNode?.header?.nativeElement);
        this.subToChanges();
        resizeObservable(this.nativeElement).pipe(takeUntil(this.destroy$)).subscribe(() => this.resizeNotify.next());
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.unsubChildren$.next();
        this.unsubChildren$.complete();
        this.destroy$.next();
        this.destroy$.complete();
    }
    expandToNode(node) {
        if (node && node.parentNode) {
            node.path.forEach(n => {
                if (n !== node && !n.expanded) {
                    n.expanded = true;
                }
            });
        }
    }
    subToCollapsing() {
        this.nodeCollapsing.pipe(takeUntil(this.destroy$)).subscribe(event => {
            if (event.cancel) {
                return;
            }
            this.navService.update_visible_cache(event.node, false);
        });
        this.nodeExpanding.pipe(takeUntil(this.destroy$)).subscribe(event => {
            if (event.cancel) {
                return;
            }
            this.navService.update_visible_cache(event.node, true);
        });
    }
    subToChanges() {
        this.unsubChildren$.next();
        const toBeSelected = [...this.forceSelect];
        requestAnimationFrame(() => {
            this.selectionService.selectNodesWithNoEvent(toBeSelected);
        });
        this.forceSelect = [];
        this.nodes.forEach(node => {
            node.expandedChange.pipe(takeUntil(this.unsubChildren$)).subscribe(nodeState => {
                this.navService.update_visible_cache(node, nodeState);
            });
            node.closeAnimationDone.pipe(takeUntil(this.unsubChildren$)).subscribe(() => {
                const targetElement = this.navService.focusedNode?.header.nativeElement;
                this.scrollNodeIntoView(targetElement);
            });
            node.openAnimationDone.pipe(takeUntil(this.unsubChildren$)).subscribe(() => {
                const targetElement = this.navService.focusedNode?.header.nativeElement;
                this.scrollNodeIntoView(targetElement);
            });
        });
        this.navService.init_invisible_cache();
    }
    scrollNodeIntoView(el) {
        if (!el) {
            return;
        }
        const nodeRect = el.getBoundingClientRect();
        const treeRect = this.nativeElement.getBoundingClientRect();
        const topOffset = treeRect.top > nodeRect.top ? nodeRect.top - treeRect.top : 0;
        const bottomOffset = treeRect.bottom < nodeRect.bottom ? nodeRect.bottom - treeRect.bottom : 0;
        const shouldScroll = !!topOffset || !!bottomOffset;
        if (shouldScroll && this.nativeElement.scrollHeight > this.nativeElement.clientHeight) {
            // this.nativeElement.scrollTop = nodeRect.y - treeRect.y - nodeRect.height;
            this.nativeElement.scrollTop =
                this.nativeElement.scrollTop + bottomOffset + topOffset + (topOffset ? -1 : +1) * nodeRect.height;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeComponent, deps: [{ token: i1.IgxTreeNavigationService }, { token: i2.IgxTreeSelectionService }, { token: i3.IgxTreeService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.0.1", type: IgxTreeComponent, isStandalone: true, selector: "igx-tree", inputs: { selection: "selection", singleBranchExpand: ["singleBranchExpand", "singleBranchExpand", booleanAttribute], toggleNodeOnClick: ["toggleNodeOnClick", "toggleNodeOnClick", booleanAttribute], animationSettings: "animationSettings" }, outputs: { nodeSelection: "nodeSelection", nodeExpanding: "nodeExpanding", nodeExpanded: "nodeExpanded", nodeCollapsing: "nodeCollapsing", nodeCollapsed: "nodeCollapsed", activeNodeChanged: "activeNodeChanged" }, host: { properties: { "class.igx-tree": "this.cssClass" } }, providers: [
            IgxTreeService,
            IgxTreeSelectionService,
            IgxTreeNavigationService,
            { provide: IGX_TREE_COMPONENT, useExisting: IgxTreeComponent },
        ], queries: [{ propertyName: "expandIndicator", first: true, predicate: IgxTreeExpandIndicatorDirective, descendants: true, read: TemplateRef }, { propertyName: "nodes", predicate: IgxTreeNodeComponent, descendants: true }], ngImport: i0, template: "<div class=\"igx-tree__root\" role=\"tree\" (keydown)=\"handleKeydown($event)\">\n    <ng-content select=\"igx-tree-node\"></ng-content>\n</div>\n" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-tree', providers: [
                        IgxTreeService,
                        IgxTreeSelectionService,
                        IgxTreeNavigationService,
                        { provide: IGX_TREE_COMPONENT, useExisting: IgxTreeComponent },
                    ], standalone: true, template: "<div class=\"igx-tree__root\" role=\"tree\" (keydown)=\"handleKeydown($event)\">\n    <ng-content select=\"igx-tree-node\"></ng-content>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.IgxTreeNavigationService }, { type: i2.IgxTreeSelectionService }, { type: i3.IgxTreeService }, { type: i0.ElementRef }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-tree']
            }], selection: [{
                type: Input
            }], singleBranchExpand: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], toggleNodeOnClick: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], animationSettings: [{
                type: Input
            }], nodeSelection: [{
                type: Output
            }], nodeExpanding: [{
                type: Output
            }], nodeExpanded: [{
                type: Output
            }], nodeCollapsing: [{
                type: Output
            }], nodeCollapsed: [{
                type: Output
            }], activeNodeChanged: [{
                type: Output
            }], expandIndicator: [{
                type: ContentChild,
                args: [IgxTreeExpandIndicatorDirective, { read: TemplateRef }]
            }], nodes: [{
                type: ContentChildren,
                args: [IgxTreeNodeComponent, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,