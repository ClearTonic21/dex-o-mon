import { Component, ViewChild, TemplateRef, Directive, HostBinding, Input } from '@angular/core';
import { IgxInputDirective } from '../../../directives/input/input.directive';
import { IgxForOfDirective } from '../../../directives/for-of/for_of.directive';
import { FilteringExpressionsTree } from '../../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../../data-operations/filtering-expression.interface';
import { GridColumnDataType } from '../../../data-operations/data-util';
import { IgxBooleanFilteringOperand, IgxNumberFilteringOperand, IgxDateFilteringOperand, IgxStringFilteringOperand, IgxDateTimeFilteringOperand, IgxTimeFilteringOperand } from '../../../data-operations/filtering-condition';
import { Subject } from 'rxjs';
import { IgxCheckboxComponent } from '../../../checkbox/checkbox.component';
import { takeUntil } from 'rxjs/operators';
import { cloneHierarchicalArray } from '../../../core/utils';
import { IgxButtonDirective } from '../../../directives/button/button.directive';
import { IgxCircularProgressBarComponent } from '../../../progressbar/progressbar.component';
import { IgxTreeNodeComponent } from '../../../tree/tree-node/tree-node.component';
import { IgxTreeComponent } from '../../../tree/tree.component';
import { IgxDataLoadingTemplateDirective, IgxEmptyListTemplateDirective } from '../../../list/list.common';
import { IgxListItemComponent } from '../../../list/list-item.component';
import { IgxListComponent } from '../../../list/list.component';
import { IgxSuffixDirective } from '../../../directives/suffix/suffix.directive';
import { NgIf, NgTemplateOutlet, NgFor } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IgxPrefixDirective } from '../../../directives/prefix/prefix.directive';
import { IgxIconComponent } from '../../../icon/icon.component';
import { IgxInputGroupComponent } from '../../../input-group/input-group.component';
import { Navigate } from '../../../drop-down/drop-down.common';
import { Size } from '../../common/enums';
import * as i0 from "@angular/core";
import * as i1 from "./base-filtering.component";
import * as i2 from "../../../core/utils";
import * as i3 from "@angular/forms";
export class IgxExcelStyleLoadingValuesTemplateDirective {
    static ngTemplateContextGuard(_dir, ctx) {
        return true;
    }
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxExcelStyleLoadingValuesTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: IgxExcelStyleLoadingValuesTemplateDirective, isStandalone: true, selector: "[igxExcelStyleLoading]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxExcelStyleLoadingValuesTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxExcelStyleLoading]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
let NEXT_ID = 0;
/**
 * A component used for presenting Excel style search UI.
 */
export class IgxExcelStyleSearchComponent {
    static { this.filterOptimizationThreshold = 2; }
    /**
     * @hidden @internal
     */
    get selectAllItem() {
        if (!this._selectAllItem) {
            const selectAllItem = {
                isSelected: false,
                isFiltered: false,
                indeterminate: false,
                isSpecial: true,
                isBlanks: false,
                value: this.esf.grid.resourceStrings.igx_grid_excel_select_all,
                label: this.esf.grid.resourceStrings.igx_grid_excel_select_all
            };
            this._selectAllItem = selectAllItem;
        }
        return this._selectAllItem;
    }
    /**
     * @hidden @internal
     */
    get addToCurrentFilterItem() {
        if (!this._addToCurrentFilterItem) {
            const addToCurrentFilterItem = {
                isSelected: false,
                isFiltered: false,
                indeterminate: false,
                isSpecial: true,
                isBlanks: false,
                value: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter,
                label: this.esf.grid.resourceStrings.igx_grid_excel_add_to_filter
            };
            this._addToCurrentFilterItem = addToCurrentFilterItem;
        }
        return this._addToCurrentFilterItem;
    }
    /**
     * @hidden @internal
     */
    get isLoading() {
        return this._isLoading;
    }
    /**
     * @hidden @internal
     */
    set isLoading(value) {
        this._isLoading = value;
        if (!this.cdr.destroyed) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @hidden @internal
     */
    get valuesLoadingTemplate() {
        if (this.esf.grid?.excelStyleLoadingValuesTemplateDirective) {
            return this.esf.grid.excelStyleLoadingValuesTemplateDirective.template;
        }
        else {
            return this.defaultExcelStyleLoadingValuesTemplate;
        }
    }
    constructor(cdr, esf, platform) {
        this.cdr = cdr;
        this.esf = esf;
        this.platform = platform;
        /**
         * @hidden @internal
         */
        this.defaultClass = true;
        /**
         * @hidden @internal
         */
        this.displayedListData = [];
        this.activeDescendant = '';
        this._id = `igx-excel-style-search-${NEXT_ID++}`;
        this._focusedItem = null;
        this.destroy$ = new Subject();
        /**
         * @hidden @internal
         */
        this.refreshSize = () => {
            if (this.virtDir) {
                this.virtDir.igxForContainerSize = this.containerSize;
                this.virtDir.igxForItemSize = this.itemSize;
                this.virtDir.recalcUpdateSizes();
                this.cdr.detectChanges();
            }
        };
        esf.loadingStart.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.displayedListData = [];
            this.isLoading = true;
        });
        esf.loadingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.refreshSize();
            this.isLoading = false;
        });
        esf.initialized.pipe(takeUntil(this.destroy$)).subscribe(() => {
            requestAnimationFrame(() => {
                this.refreshSize();
                this.searchInput.nativeElement.focus();
            });
        });
        esf.columnChange.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.virtDir?.resetScrollPosition();
            if (this.virtDir) {
                this.virtDir.state.startIndex = 0;
            }
        });
        esf.listDataLoaded.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this._selectAllItem = this.esf.listData[0];
            if (this.isHierarchical() && this.esf.listData[0].isSpecial) {
                this.esf.listData.splice(0, 1);
            }
            if (this.searchValue) {
                this.clearInput();
            }
            else {
                this.filterListData();
            }
            this.cdr.detectChanges();
            requestAnimationFrame(() => {
                this.refreshSize();
                this.searchInput.nativeElement.focus();
            });
        });
    }
    ngAfterViewInit() {
        requestAnimationFrame(this.refreshSize);
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    clearInput() {
        this.searchValue = null;
        this.filterListData();
    }
    /**
     * @hidden @internal
     */
    onCheckboxChange(eventArgs) {
        const selectedIndex = this.displayedListData.indexOf(eventArgs.owner.value);
        const selectAllBtn = this.displayedListData[0];
        if (selectedIndex === 0) {
            this.displayedListData.forEach(element => {
                if (element === this.addToCurrentFilterItem) {
                    return;
                }
                element.isSelected = eventArgs.checked;
            });
            selectAllBtn.indeterminate = false;
        }
        else {
            eventArgs.owner.value.isSelected = eventArgs.checked;
            const indexToStartSlicing = this.displayedListData.indexOf(this.addToCurrentFilterItem) > -1 ? 2 : 1;
            const slicedArray = this.displayedListData.slice(indexToStartSlicing, this.displayedListData.length);
            if (!slicedArray.find(el => el.isSelected === false)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = true;
            }
            else if (!slicedArray.find(el => el.isSelected === true)) {
                selectAllBtn.indeterminate = false;
                selectAllBtn.isSelected = false;
            }
            else {
                selectAllBtn.indeterminate = true;
            }
        }
    }
    /**
     * @hidden @internal
     */
    onSelectAllCheckboxChange(eventArgs) {
        this._selectAllItem.isSelected = eventArgs.checked;
        this._selectAllItem.indeterminate = false;
        const treeNodes = this.tree.nodes;
        treeNodes.forEach(node => node.data.isSelected = eventArgs.checked);
    }
    /**
     * @hidden @internal
     */
    onNodeSelectionChange(eventArgs) {
        eventArgs.added.forEach(node => {
            node.data.isSelected = true;
        });
        eventArgs.removed.forEach(node => {
            node.data.isSelected = false;
        });
        this._hierarchicalSelectedItems = eventArgs.newSelection.map(item => item.data);
        const selectAllBtn = this.selectAllItem;
        if (this._hierarchicalSelectedItems.length === 0) {
            selectAllBtn.indeterminate = false;
            selectAllBtn.isSelected = false;
        }
        else if (this._hierarchicalSelectedItems.length === this.tree.nodes.length) {
            selectAllBtn.indeterminate = false;
            selectAllBtn.isSelected = true;
        }
        else {
            selectAllBtn.indeterminate = true;
            selectAllBtn.isSelected = false;
        }
    }
    /**
     * @hidden @internal
     */
    get itemSize() {
        let itemSize = '40px';
        const esf = this.esf;
        switch (esf.size) {
            case Size.Medium:
                itemSize = '32px';
                break;
            case Size.Small:
                itemSize = '24px';
                break;
            default: break;
        }
        return itemSize;
    }
    /**
     * @hidden @internal
     */
    get containerSize() {
        if (this.esf.listData.length) {
            return this.list?.element.nativeElement.offsetHeight;
        }
        // GE Nov 1st, 2021 #10355 Return a numeric value, so the chunk size is calculated properly.
        // If we skip this branch, on applying the filter the _calculateChunkSize() method off the ForOfDirective receives
        // an igxForContainerSize = undefined, thus assigns the chunkSize to the igxForOf.length which leads to performance issues.
        return 0;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    getItemId(index) {
        return `${this.id}-item-${index}`;
    }
    setActiveDescendant() {
        this.activeDescendant = this.focusedItem?.id || '';
    }
    get focusedItem() {
        return this._focusedItem;
    }
    set focusedItem(val) {
        this._focusedItem = val;
    }
    /**
     * @hidden @internal
     */
    get applyButtonDisabled() {
        return (this._selectAllItem && !this._selectAllItem.isSelected && !this._selectAllItem.indeterminate) ||
            (this.displayedListData && this.displayedListData.length === 0);
    }
    /**
     * @hidden @internal
     */
    onInputKeyDown(event) {
        switch (event.key) {
            case this.platform.KEYMAP.ENTER:
                event.preventDefault();
                this.applyFilter();
                return;
            case this.platform.KEYMAP.ESCAPE:
                if (this.searchValue) {
                    event.stopPropagation();
                    this.clearInput();
                }
                return;
        }
    }
    /**
     * @hidden @internal
     */
    filterListData() {
        if (this.esf.column?.dataType === GridColumnDataType.Number ||
            this.esf.column?.dataType === GridColumnDataType.Currency ||
            this.esf.column?.dataType === GridColumnDataType.Percent) {
            this.rejectNonNumericalEntries();
        }
        if (!this.esf.listData || !this.esf.listData.length) {
            this.displayedListData = [];
            return;
        }
        let selectAllBtn;
        if (this._selectAllItem) {
            selectAllBtn = this._selectAllItem;
        }
        else {
            selectAllBtn = this.esf.listData[0];
        }
        if (!this.searchValue) {
            let anyFiltered = this.esf.listData.some(i => i.isFiltered);
            let anyUnfiltered = this.esf.listData.some(i => !i.isFiltered);
            selectAllBtn.indeterminate = anyFiltered && anyUnfiltered;
            if (this.isHierarchical() && this.tree) {
                this._hierarchicalSelectedItems = this.tree.nodes.map(n => n.data).filter(item => item.isFiltered);
            }
            this.esf.listData.forEach(i => i.isSelected = i.isFiltered);
            if (this.displayedListData !== this.esf.listData) {
                this.displayedListData = this.esf.listData;
                if (this.isHierarchical()) {
                    this.cdr.detectChanges();
                    this.tree.nodes.forEach(n => {
                        const item = n.data;
                        n.selected = item.isSelected || item.isFiltered;
                        anyFiltered = anyFiltered || n.selected;
                        anyUnfiltered = anyUnfiltered || !n.selected;
                    });
                    selectAllBtn.indeterminate = anyFiltered && anyUnfiltered;
                }
            }
            selectAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all;
            this.matchesCount = this.displayedListData.length - 1;
            this.cdr.detectChanges();
            return;
        }
        const searchVal = this.searchValue.toLowerCase();
        if (this.isHierarchical()) {
            this._hierarchicalSelectedItems = [];
            this.esf.listData.forEach(i => i.isSelected = false);
            const matchedData = cloneHierarchicalArray(this.esf.listData, 'children');
            this.displayedListData = this.hierarchicalSelectMatches(matchedData, searchVal);
            this.cdr.detectChanges();
            this.tree.nodes.forEach(n => {
                n.selected = true;
                if (n.data.label.toString().toLowerCase().indexOf(searchVal) > -1) {
                    this.expandAllParentNodes(n);
                }
            });
        }
        else {
            this.displayedListData = this.esf.listData.filter((it, i) => (i === 0 && it.isSpecial) ||
                (it.label !== null && it.label !== undefined) &&
                    !it.isBlanks &&
                    it.label.toString().toLowerCase().indexOf(searchVal) > -1);
            this.esf.listData.forEach(i => i.isSelected = false);
            this.displayedListData.forEach(i => i.isSelected = true);
            this.displayedListData.splice(1, 0, this.addToCurrentFilterItem);
            if (this.displayedListData.length === 2) {
                this.displayedListData = [];
            }
        }
        if (this.displayedListData.length > 2) {
            this.matchesCount = this.displayedListData.length - 2;
        }
        else {
            this.matchesCount = 0;
        }
        selectAllBtn.indeterminate = false;
        selectAllBtn.isSelected = true;
        selectAllBtn.label = this.esf.grid.resourceStrings.igx_grid_excel_select_all_search_results;
        this.cdr.detectChanges();
    }
    /**
     * @hidden @internal
     */
    applyFilter() {
        const filterTree = new FilteringExpressionsTree(FilteringLogic.Or, this.esf.column.field);
        let selectedItems = [];
        if (this.isHierarchical()) {
            if (this.addToCurrentFilterCheckbox && this.addToCurrentFilterCheckbox.checked) {
                this.addFilteredToSelectedItems(this.esf.listData);
            }
            selectedItems = this._hierarchicalSelectedItems;
        }
        else {
            const item = this.displayedListData[1];
            const addToCurrentFilterOptionVisible = item === this.addToCurrentFilterItem;
            selectedItems = addToCurrentFilterOptionVisible && item.isSelected ?
                this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected || el.isFiltered) :
                this.esf.listData.slice(1, this.esf.listData.length).filter(el => el.isSelected);
        }
        let unselectedItem;
        if (this.isHierarchical()) {
            unselectedItem = this.esf.listData.find(el => el.isSelected === false);
        }
        else {
            unselectedItem = this.esf.listData.slice(1, this.esf.listData.length).find(el => el.isSelected === false);
        }
        if (unselectedItem) {
            if (selectedItems.length <= IgxExcelStyleSearchComponent.filterOptimizationThreshold) {
                selectedItems.forEach(element => {
                    let condition = null;
                    if (element.value !== null && element.value !== undefined) {
                        if (this.esf.column.dataType === GridColumnDataType.Boolean) {
                            condition = this.createCondition(element.value.toString());
                        }
                        else {
                            const filterCondition = this.esf.column.dataType === GridColumnDataType.Time ? 'at' : 'equals';
                            condition = this.createCondition(filterCondition);
                        }
                    }
                    else {
                        condition = this.createCondition('empty');
                    }
                    filterTree.filteringOperands.push({
                        condition,
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: element.value
                    });
                });
            }
            else {
                const blanksItemIndex = selectedItems.findIndex(e => e.value === null || e.value === undefined);
                let blanksItem;
                if (blanksItemIndex >= 0) {
                    blanksItem = selectedItems[blanksItemIndex];
                    selectedItems.splice(blanksItemIndex, 1);
                }
                filterTree.filteringOperands.push({
                    condition: this.createCondition('in'),
                    fieldName: this.esf.column.field,
                    ignoreCase: this.esf.column.filteringIgnoreCase,
                    searchVal: new Set(this.esf.column.dataType === GridColumnDataType.Date ||
                        this.esf.column.dataType === GridColumnDataType.DateTime ?
                        selectedItems.map(d => d.value.toISOString()) : this.esf.column.dataType === GridColumnDataType.Time ?
                        selectedItems.map(e => e.value.toLocaleTimeString()) :
                        selectedItems.map(e => e.value))
                });
                if (blanksItem) {
                    filterTree.filteringOperands.push({
                        condition: this.createCondition('empty'),
                        fieldName: this.esf.column.field,
                        ignoreCase: this.esf.column.filteringIgnoreCase,
                        searchVal: blanksItem.value
                    });
                }
            }
            const grid = this.esf.grid;
            const col = this.esf.column;
            grid.filteringService.filterInternal(col.field, filterTree);
            this.esf.expressionsList = new Array();
            grid.filteringService.generateExpressionsList(col.filteringExpressionsTree, grid.filteringLogic, this.esf.expressionsList);
        }
        else {
            this.esf.grid.filteringService.clearFilter(this.esf.column.field);
        }
        this.esf.closeDropdown();
    }
    handleKeyDown(event) {
        if (event) {
            const key = event.key.toLowerCase();
            const navKeys = ['space', 'spacebar', ' ',
                'arrowup', 'up', 'arrowdown', 'down', 'home', 'end'];
            if (navKeys.indexOf(key) === -1) { // If key has appropriate function in DD
                return;
            }
            event.preventDefault();
            event.stopPropagation();
            switch (key) {
                case 'arrowup':
                case 'up':
                    this.onArrowUpKeyDown();
                    break;
                case 'arrowdown':
                case 'down':
                    this.onArrowDownKeyDown();
                    break;
                case 'home':
                    this.onHomeKeyDown();
                    break;
                case 'end':
                    this.onEndKeyDown();
                    break;
                case 'space':
                case 'spacebar':
                case ' ':
                    this.onActionKeyDown();
                    break;
                default:
                    return;
            }
        }
    }
    onFocus() {
        const firstIndexInView = this.virtDir.state.startIndex;
        if (this.virtDir.igxForOf.length > 0) {
            this.focusedItem = {
                id: this.getItemId(firstIndexInView),
                index: firstIndexInView,
                checked: this.virtDir.igxForOf[firstIndexInView].isSelected
            };
        }
        this.setActiveDescendant();
    }
    onFocusOut() {
        this.focusedItem = null;
        this.setActiveDescendant();
    }
    /**
     * @hidden @internal
     */
    isHierarchical() {
        return this.esf.isHierarchical;
    }
    /**
     * @hidden @internal
     */
    isTreeEmpty() {
        return this.esf.isHierarchical && this.displayedListData.length === 0;
    }
    hierarchicalSelectMatches(data, searchVal) {
        data.forEach(element => {
            element.indeterminate = false;
            element.isSelected = false;
            const node = this.tree.nodes.filter(n => n.data.label === element.label)[0];
            if (node) {
                node.expanded = false;
            }
            if (element.label.toString().toLowerCase().indexOf(searchVal) > -1) {
                element.isSelected = true;
                this.hierarchicalSelectAllChildren(element);
                this._hierarchicalSelectedItems.push(element);
            }
            else if (element.children.length > 0) {
                element.children = this.hierarchicalSelectMatches(element.children, searchVal);
                if (element.children.length > 0) {
                    element.isSelected = true;
                    if (node) {
                        node.expanded = true;
                    }
                }
            }
        });
        return data.filter(element => element.isSelected === true);
    }
    hierarchicalSelectAllChildren(element) {
        element.children.forEach(child => {
            child.indeterminate = false;
            child.isSelected = true;
            this._hierarchicalSelectedItems.push(child);
            if (child.children) {
                this.hierarchicalSelectAllChildren(child);
            }
        });
    }
    expandAllParentNodes(node) {
        if (node.parentNode) {
            node.parentNode.expanded = true;
            this.expandAllParentNodes(node.parentNode);
        }
    }
    addFilteredToSelectedItems(records) {
        records.forEach(record => {
            if (record.children) {
                this.addFilteredToSelectedItems(record.children);
            }
            if (record.isFiltered && this._hierarchicalSelectedItems.indexOf(record) < 0) {
                this._hierarchicalSelectedItems.push(record);
            }
        });
    }
    createCondition(conditionName) {
        switch (this.esf.column.dataType) {
            case GridColumnDataType.Boolean:
                return IgxBooleanFilteringOperand.instance().condition(conditionName);
            case GridColumnDataType.Number:
            case GridColumnDataType.Currency:
            case GridColumnDataType.Percent:
                return IgxNumberFilteringOperand.instance().condition(conditionName);
            case GridColumnDataType.Date:
                return IgxDateFilteringOperand.instance().condition(conditionName);
            case GridColumnDataType.Time:
                return IgxTimeFilteringOperand.instance().condition(conditionName);
            case GridColumnDataType.DateTime:
                return IgxDateTimeFilteringOperand.instance().condition(conditionName);
            default:
                return IgxStringFilteringOperand.instance().condition(conditionName);
        }
    }
    /**
     * @hidden @internal
     */
    rejectNonNumericalEntries() {
        const regExp = /[^0-9\.,eE\-]/g;
        if (this.searchValue && regExp.test(this.searchValue)) {
            this.searchInput.value = this.searchValue.replace(regExp, '');
            this.searchValue = this.searchInput.value;
        }
    }
    onArrowUpKeyDown() {
        if (this.focusedItem && this.focusedItem.index === 0 && this.virtDir.state.startIndex === 0) {
            // on ArrowUp the focus stays on the same element if it is the first focused
            return;
        }
        else {
            this.navigateItem(this.focusedItem ? this.focusedItem.index - 1 : 0);
        }
        this.setActiveDescendant();
    }
    onArrowDownKeyDown() {
        const lastIndex = this.virtDir.igxForOf.length - 1;
        if (this.focusedItem && this.focusedItem.index === lastIndex) {
            // on ArrowDown the focus stays on the same element if it is the last focused
            return;
        }
        else {
            this.navigateItem(this.focusedItem ? this.focusedItem.index + 1 : 0);
        }
        this.setActiveDescendant();
    }
    onHomeKeyDown() {
        this.navigateItem(0);
        this.setActiveDescendant();
    }
    onEndKeyDown() {
        this.navigateItem(this.virtDir.igxForOf.length - 1);
        this.setActiveDescendant();
    }
    onActionKeyDown() {
        const dataItem = this.displayedListData[this.focusedItem.index];
        const args = {
            checked: !dataItem.isSelected,
            owner: {
                value: dataItem
            }
        };
        this.onCheckboxChange(args);
    }
    navigateItem(index) {
        if (index === -1 || index >= this.virtDir.igxForOf.length) {
            return;
        }
        const direction = index > (this.focusedItem ? this.focusedItem.index : -1) ? Navigate.Down : Navigate.Up;
        const scrollRequired = this.isIndexOutOfBounds(index, direction);
        this.focusedItem = {
            id: this.getItemId(index),
            index: index,
            checked: this.virtDir.igxForOf[index].isSelected
        };
        if (scrollRequired) {
            this.virtDir.scrollTo(index);
        }
    }
    isIndexOutOfBounds(index, direction) {
        const virtState = this.virtDir.state;
        const currentPosition = this.virtDir.getScroll().scrollTop;
        const itemPosition = this.virtDir.getScrollForIndex(index, direction === Navigate.Down);
        const indexOutOfChunk = index < virtState.startIndex || index > virtState.chunkSize + virtState.startIndex;
        const scrollNeeded = direction === Navigate.Down ? currentPosition < itemPosition : currentPosition > itemPosition;
        const subRequired = indexOutOfChunk || scrollNeeded;
        return subRequired;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxExcelStyleSearchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i1.BaseFilteringComponent }, { token: i2.PlatformUtil }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.1", type: IgxExcelStyleSearchComponent, isStandalone: true, selector: "igx-excel-style-search", inputs: { id: "id" }, host: { properties: { "class.igx-excel-filter__menu-main": "this.defaultClass", "attr.id": "this.id" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["input"], descendants: true, read: IgxInputDirective, static: true }, { propertyName: "cancelButton", first: true, predicate: ["cancelButton"], descendants: true, read: IgxButtonDirective, static: true }, { propertyName: "list", first: true, predicate: ["list"], descendants: true, read: IgxListComponent }, { propertyName: "selectAllCheckbox", first: true, predicate: ["selectAllCheckbox"], descendants: true, read: IgxCheckboxComponent }, { propertyName: "addToCurrentFilterCheckbox", first: true, predicate: ["addToCurrentFilterCheckbox"], descendants: true, read: IgxCheckboxComponent }, { propertyName: "tree", first: true, predicate: ["tree"], descendants: true, read: IgxTreeComponent }, { propertyName: "virtDir", first: true, predicate: IgxForOfDirective, descendants: true }, { propertyName: "defaultExcelStyleLoadingValuesTemplate", first: true, predicate: ["defaultExcelStyleLoadingValuesTemplate"], descendants: true, read: TemplateRef }], ngImport: i0, template: "<igx-input-group\n            type=\"box\"\n            >\n    <igx-icon igxPrefix>search</igx-icon>\n    <input\n        #input\n        igxInput\n        tabindex=\"0\"\n        [(ngModel)]=\"searchValue\"\n        (ngModelChange)=\"filterListData()\"\n        (keydown)=\"onInputKeyDown($event)\"\n        [placeholder]=\"esf.column?.grid.resourceStrings.igx_grid_excel_search_placeholder\"\n        autocomplete=\"off\"/>\n    <igx-icon\n        igxSuffix\n        *ngIf=\"searchValue || searchValue === 0\"\n        (click)=\"clearInput()\"\n        tabindex=\"0\">\n        clear\n    </igx-icon>\n</igx-input-group>\n\n<igx-list #list role=\"listbox\" [isLoading]=\"isLoading\" *ngIf=\"!isHierarchical()\" (keydown)=\"handleKeyDown($event)\" tabindex=\"0\"\n[attr.aria-activedescendant]=\"this.activeDescendant\" (focus)=\"onFocus()\" (focusout)=\"onFocusOut()\">\n    <div style=\"overflow: hidden; position: relative;\">\n        <igx-list-item [class.igx-list__item-base--active]=\"focusedItem?.id === this.getItemId(i)\" [attr.id]=\"getItemId(i)\" role=\"option\" \n        *igxFor=\"let item of displayedListData;index as i; scrollOrientation : 'vertical'; containerSize: containerSize; itemSize: itemSize\">\n            <igx-checkbox\n                [value]=\"item\"\n                [tabindex]=\"-1\"\n                [checked]=\"item?.isSelected\"\n                [disableRipple]=\"true\"\n                [indeterminate]=\"item?.indeterminate\"\n                [disableTransitions]=\"true\"\n                (change)=\"onCheckboxChange($event)\">\n                {{ item.label }}\n            </igx-checkbox>\n        </igx-list-item>\n    </div>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-template igxEmptyList>\n        <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-template>\n\n    <div class=\"igx-excel-filter__filter-results\" aria-live=\"polite\" aria-atomic=\"true\">\n        {{ esf.grid?.resourceStrings.igx_grid_excel_matches_count.replace('{0}', matchesCount) }}\n    </div>\n</igx-list>\n\n<div class=\"igx-excel-filter__tree\" *ngIf=\"isHierarchical()\">\n    <div class=\"igx-excel-filter__tree-alike\" *ngIf=\"!isTreeEmpty()\">\n        <div class=\"igx-excel-filter__tree-alike-item\">\n            <igx-checkbox #selectAllCheckbox\n                          [value]=\"selectAllItem\"\n                          [checked]=\"selectAllItem?.isSelected\"\n                          [disableRipple]=\"true\"\n                          [indeterminate]=\"selectAllItem?.indeterminate\"\n                          [disableTransitions]=\"true\"\n                          (change)=\"onSelectAllCheckboxChange($event)\">\n                {{ selectAllItem.label }}\n            </igx-checkbox>\n        </div>\n        <div class=\"igx-excel-filter__tree-alike-item\" *ngIf=\"searchValue\">\n            <igx-checkbox #addToCurrentFilterCheckbox\n                          [value]=\"addToCurrentFilterItem\"\n                          [checked]=\"addToCurrentFilterItem.isSelected\"\n                          [disableRipple]=\"true\"\n                          [disableTransitions]=\"true\">\n\n                {{ addToCurrentFilterItem.label }}\n            </igx-checkbox>\n        </div>\n    </div>\n\n    <igx-tree #tree selection=\"Cascading\"  (nodeSelection)=\"onNodeSelectionChange($event)\">\n        <igx-tree-node [data]=\"item\" *ngFor=\"let item of displayedListData;\" [selected]=\"item.isSelected\">\n            <div>{{item.label}}</div>\n            <igx-tree-node [data]=\"childLevel1\" *ngFor=\"let childLevel1 of item.children\" [selected]=\"childLevel1.isSelected\">\n                <div>{{childLevel1.label}}</div>\n                <igx-tree-node [data]=\"childLevel2\" *ngFor=\"let childLevel2 of childLevel1.children\" [selected]=\"childLevel2.isSelected\">\n                    <div>{{childLevel2.label}}</div>\n                    <igx-tree-node [data]=\"childLevel3\" *ngFor=\"let childLevel3 of childLevel2.children\" [selected]=\"childLevel3.isSelected\">\n                        <div>{{childLevel3.label}}</div>\n                        <igx-tree-node [data]=\"childLevel4\" *ngFor=\"let childLevel4 of childLevel3.children\" [selected]=\"childLevel4.isSelected\">\n                            <div>{{childLevel4.label}}</div>\n                            <igx-tree-node [data]=\"childLevel5\" *ngFor=\"let childLevel5 of childLevel4.children\" [selected]=\"childLevel5.isSelected\">\n                                <div>{{childLevel5.label}}</div>\n                                <igx-tree-node [data]=\"childLevel6\" *ngFor=\"let childLevel6 of childLevel5.children\" [selected]=\"childLevel6.isSelected\">\n                                    <div>{{childLevel6.label}}</div>\n                                    <igx-tree-node [data]=\"childLevel7\" *ngFor=\"let childLevel7 of childLevel6.children\" [selected]=\"childLevel7.isSelected\">\n                                        <div>{{childLevel7.label}}</div>\n                                        <igx-tree-node [data]=\"childLevel8\" *ngFor=\"let childLevel8 of childLevel7.children\" [selected]=\"childLevel8.isSelected\">\n                                            <div>{{childLevel8.label}}</div>\n                                            <igx-tree-node [data]=\"childLevel9\" *ngFor=\"let childLevel9 of childLevel8.children\" [selected]=\"childLevel9.isSelected\">\n                                                <div>{{childLevel9.label}}</div>\n                                            </igx-tree-node>\n                                        </igx-tree-node>\n                                    </igx-tree-node>\n                                </igx-tree-node>\n                            </igx-tree-node>\n                        </igx-tree-node>\n                    </igx-tree-node>\n                </igx-tree-node>\n            </igx-tree-node>\n        </igx-tree-node>\n    </igx-tree>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-template [ngIf]=\"isTreeEmpty()\">\n        <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-template>\n</div>\n\n<ng-template #emptySearch>\n    <div class=\"igx-excel-filter__empty\">\n        {{esf.grid?.resourceStrings.igx_grid_excel_no_matches}}\n    </div>\n</ng-template>\n\n<ng-template #defaultExcelStyleLoadingValuesTemplate>\n    <igx-circular-bar [indeterminate]=\"true\">\n    </igx-circular-bar>\n</ng-template>\n\n<footer class=\"igx-excel-filter__menu-footer\">\n    <div class=\"igx-excel-filter__cancel\">\n        <button type=\"button\" #cancelButton\n            igxButton=\"flat\"\n            (click)=\"esf.cancel()\">\n                {{ esf.grid?.resourceStrings.igx_grid_excel_cancel }}\n        </button>\n    </div>\n    <div class=\"igx-excel-filter__apply\">\n        <button type=\"button\"\n            igxButton=\"contained\"\n            [disabled]=\"applyButtonDisabled\"\n            (click)=\"applyFilter()\">\n                {{ esf.grid?.resourceStrings.igx_grid_excel_apply }}\n        </button>\n    </div>\n</footer>\n", dependencies: [{ kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "component", type: IgxListComponent, selector: "igx-list", inputs: ["panEndTriggeringThreshold", "id", "allowLeftPanning", "allowRightPanning", "isLoading", "resourceStrings", "role"], outputs: ["leftPan", "rightPan", "startPan", "endPan", "resetPan", "panStateChange", "itemClicked"] }, { kind: "directive", type: IgxForOfDirective, selector: "[igxFor][igxForOf]", inputs: ["igxForOf", "igxForSizePropName", "igxForScrollOrientation", "igxForScrollContainer", "igxForContainerSize", "igxForItemSize", "igxForTotalItemCount", "igxForTrackBy"], outputs: ["chunkLoad", "scrollbarVisibilityChanged", "contentSizeChange", "dataChanged", "beforeViewDestroyed", "chunkPreload"] }, { kind: "component", type: IgxListItemComponent, selector: "igx-list-item", inputs: ["isHeader", "hidden", "index", "role"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "directive", type: IgxDataLoadingTemplateDirective, selector: "[igxDataLoading]" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxEmptyListTemplateDirective, selector: "[igxEmptyList]" }, { kind: "component", type: IgxTreeComponent, selector: "igx-tree", inputs: ["selection", "singleBranchExpand", "toggleNodeOnClick", "animationSettings"], outputs: ["nodeSelection", "nodeExpanding", "nodeExpanded", "nodeCollapsing", "nodeCollapsed", "activeNodeChanged"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxTreeNodeComponent, selector: "igx-tree-node", inputs: ["data", "loading", "resourceStrings", "active", "disabled", "selected", "expanded"], outputs: ["selectedChange", "expandedChange"] }, { kind: "component", type: IgxCircularProgressBarComponent, selector: "igx-circular-bar", inputs: ["id", "isIndeterminate", "textVisibility", "text"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxLabel"], outputs: ["buttonSelected"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxExcelStyleSearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-excel-style-search', standalone: true, imports: [IgxInputGroupComponent, IgxIconComponent, IgxPrefixDirective, FormsModule, IgxInputDirective, NgIf, IgxSuffixDirective, IgxListComponent, IgxForOfDirective, IgxListItemComponent, IgxCheckboxComponent, IgxDataLoadingTemplateDirective, NgTemplateOutlet, IgxEmptyListTemplateDirective, IgxTreeComponent, NgFor, IgxTreeNodeComponent, IgxCircularProgressBarComponent, IgxButtonDirective], template: "<igx-input-group\n            type=\"box\"\n            >\n    <igx-icon igxPrefix>search</igx-icon>\n    <input\n        #input\n        igxInput\n        tabindex=\"0\"\n        [(ngModel)]=\"searchValue\"\n        (ngModelChange)=\"filterListData()\"\n        (keydown)=\"onInputKeyDown($event)\"\n        [placeholder]=\"esf.column?.grid.resourceStrings.igx_grid_excel_search_placeholder\"\n        autocomplete=\"off\"/>\n    <igx-icon\n        igxSuffix\n        *ngIf=\"searchValue || searchValue === 0\"\n        (click)=\"clearInput()\"\n        tabindex=\"0\">\n        clear\n    </igx-icon>\n</igx-input-group>\n\n<igx-list #list role=\"listbox\" [isLoading]=\"isLoading\" *ngIf=\"!isHierarchical()\" (keydown)=\"handleKeyDown($event)\" tabindex=\"0\"\n[attr.aria-activedescendant]=\"this.activeDescendant\" (focus)=\"onFocus()\" (focusout)=\"onFocusOut()\">\n    <div style=\"overflow: hidden; position: relative;\">\n        <igx-list-item [class.igx-list__item-base--active]=\"focusedItem?.id === this.getItemId(i)\" [attr.id]=\"getItemId(i)\" role=\"option\" \n        *igxFor=\"let item of displayedListData;index as i; scrollOrientation : 'vertical'; containerSize: containerSize; itemSize: itemSize\">\n            <igx-checkbox\n                [value]=\"item\"\n                [tabindex]=\"-1\"\n                [checked]=\"item?.isSelected\"\n                [disableRipple]=\"true\"\n                [indeterminate]=\"item?.indeterminate\"\n                [disableTransitions]=\"true\"\n                (change)=\"onCheckboxChange($event)\">\n                {{ item.label }}\n            </igx-checkbox>\n        </igx-list-item>\n    </div>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-template igxEmptyList>\n        <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-template>\n\n    <div class=\"igx-excel-filter__filter-results\" aria-live=\"polite\" aria-atomic=\"true\">\n        {{ esf.grid?.resourceStrings.igx_grid_excel_matches_count.replace('{0}', matchesCount) }}\n    </div>\n</igx-list>\n\n<div class=\"igx-excel-filter__tree\" *ngIf=\"isHierarchical()\">\n    <div class=\"igx-excel-filter__tree-alike\" *ngIf=\"!isTreeEmpty()\">\n        <div class=\"igx-excel-filter__tree-alike-item\">\n            <igx-checkbox #selectAllCheckbox\n                          [value]=\"selectAllItem\"\n                          [checked]=\"selectAllItem?.isSelected\"\n                          [disableRipple]=\"true\"\n                          [indeterminate]=\"selectAllItem?.indeterminate\"\n                          [disableTransitions]=\"true\"\n                          (change)=\"onSelectAllCheckboxChange($event)\">\n                {{ selectAllItem.label }}\n            </igx-checkbox>\n        </div>\n        <div class=\"igx-excel-filter__tree-alike-item\" *ngIf=\"searchValue\">\n            <igx-checkbox #addToCurrentFilterCheckbox\n                          [value]=\"addToCurrentFilterItem\"\n                          [checked]=\"addToCurrentFilterItem.isSelected\"\n                          [disableRipple]=\"true\"\n                          [disableTransitions]=\"true\">\n\n                {{ addToCurrentFilterItem.label }}\n            </igx-checkbox>\n        </div>\n    </div>\n\n    <igx-tree #tree selection=\"Cascading\"  (nodeSelection)=\"onNodeSelectionChange($event)\">\n        <igx-tree-node [data]=\"item\" *ngFor=\"let item of displayedListData;\" [selected]=\"item.isSelected\">\n            <div>{{item.label}}</div>\n            <igx-tree-node [data]=\"childLevel1\" *ngFor=\"let childLevel1 of item.children\" [selected]=\"childLevel1.isSelected\">\n                <div>{{childLevel1.label}}</div>\n                <igx-tree-node [data]=\"childLevel2\" *ngFor=\"let childLevel2 of childLevel1.children\" [selected]=\"childLevel2.isSelected\">\n                    <div>{{childLevel2.label}}</div>\n                    <igx-tree-node [data]=\"childLevel3\" *ngFor=\"let childLevel3 of childLevel2.children\" [selected]=\"childLevel3.isSelected\">\n                        <div>{{childLevel3.label}}</div>\n                        <igx-tree-node [data]=\"childLevel4\" *ngFor=\"let childLevel4 of childLevel3.children\" [selected]=\"childLevel4.isSelected\">\n                            <div>{{childLevel4.label}}</div>\n                            <igx-tree-node [data]=\"childLevel5\" *ngFor=\"let childLevel5 of childLevel4.children\" [selected]=\"childLevel5.isSelected\">\n                                <div>{{childLevel5.label}}</div>\n                                <igx-tree-node [data]=\"childLevel6\" *ngFor=\"let childLevel6 of childLevel5.children\" [selected]=\"childLevel6.isSelected\">\n                                    <div>{{childLevel6.label}}</div>\n                                    <igx-tree-node [data]=\"childLevel7\" *ngFor=\"let childLevel7 of childLevel6.children\" [selected]=\"childLevel7.isSelected\">\n                                        <div>{{childLevel7.label}}</div>\n                                        <igx-tree-node [data]=\"childLevel8\" *ngFor=\"let childLevel8 of childLevel7.children\" [selected]=\"childLevel8.isSelected\">\n                                            <div>{{childLevel8.label}}</div>\n                                            <igx-tree-node [data]=\"childLevel9\" *ngFor=\"let childLevel9 of childLevel8.children\" [selected]=\"childLevel9.isSelected\">\n                                                <div>{{childLevel9.label}}</div>\n                                            </igx-tree-node>\n                                        </igx-tree-node>\n                                    </igx-tree-node>\n                                </igx-tree-node>\n                            </igx-tree-node>\n                        </igx-tree-node>\n                    </igx-tree-node>\n                </igx-tree-node>\n            </igx-tree-node>\n        </igx-tree-node>\n    </igx-tree>\n\n    <ng-template igxDataLoading>\n        <div class=\"igx-excel-filter__loading\">\n            <ng-container *ngTemplateOutlet=\"valuesLoadingTemplate\">\n            </ng-container>\n        </div>\n    </ng-template>\n\n    <ng-template [ngIf]=\"isTreeEmpty()\">\n        <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-template>\n</div>\n\n<ng-template #emptySearch>\n    <div class=\"igx-excel-filter__empty\">\n        {{esf.grid?.resourceStrings.igx_grid_excel_no_matches}}\n    </div>\n</ng-template>\n\n<ng-template #defaultExcelStyleLoadingValuesTemplate>\n    <igx-circular-bar [indeterminate]=\"true\">\n    </igx-circular-bar>\n</ng-template>\n\n<footer class=\"igx-excel-filter__menu-footer\">\n    <div class=\"igx-excel-filter__cancel\">\n        <button type=\"button\" #cancelButton\n            igxButton=\"flat\"\n            (click)=\"esf.cancel()\">\n                {{ esf.grid?.resourceStrings.igx_grid_excel_cancel }}\n        </button>\n    </div>\n    <div class=\"igx-excel-filter__apply\">\n        <button type=\"button\"\n            igxButton=\"contained\"\n            [disabled]=\"applyButtonDisabled\"\n            (click)=\"applyFilter()\">\n                {{ esf.grid?.resourceStrings.igx_grid_excel_apply }}\n        </button>\n    </div>\n</footer>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: i1.BaseFilteringComponent }, { type: i2.PlatformUtil }], propDecorators: { defaultClass: [{
                type: HostBinding,
                args: ['class.igx-excel-filter__menu-main']
            }], searchInput: [{
                type: ViewChild,
                args: ['input', { read: IgxInputDirective, static: true }]
            }], cancelButton: [{
                type: ViewChild,
                args: ['cancelButton', { read: IgxButtonDirective, static: true }]
            }], list: [{
                type: ViewChild,
                args: ['list', { read: IgxListComponent, static: false }]
            }], selectAllCheckbox: [{
                type: ViewChild,
                args: ['selectAllCheckbox', { read: IgxCheckboxComponent, static: false }]
            }], addToCurrentFilterCheckbox: [{
                type: ViewChild,
                args: ['addToCurrentFilterCheckbox', { read: IgxCheckboxComponent, static: false }]
            }], tree: [{
                type: ViewChild,
                args: ['tree', { read: IgxTreeComponent, static: false }]
            }], virtDir: [{
                type: ViewChild,
                args: [IgxForOfDirective]
            }], defaultExcelStyleLoadingValuesTemplate: [{
                type: ViewChild,
                args: ['defaultExcelStyleLoadingValuesTemplate', { read: TemplateRef }]
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,