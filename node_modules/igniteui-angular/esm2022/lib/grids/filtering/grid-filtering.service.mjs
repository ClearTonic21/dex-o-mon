import { Injectable, } from '@angular/core';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { Subject } from 'rxjs';
import { takeUntil, first } from 'rxjs/operators';
import { VerticalAlignment } from '../../services/overlay/utilities';
import { useAnimation } from '@angular/animations';
import { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';
import { editor, pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { generateExpressionsList } from './excel-style/common';
import { formatDate } from '../../core/utils';
import { ExcelStylePositionStrategy } from './excel-style/excel-style-position-strategy';
import { fadeIn } from 'igniteui-angular/animations';
import * as i0 from "@angular/core";
import * as i1 from "../../icon/icon.service";
import * as i2 from "../../services/overlay/overlay";
/**
 * @hidden
 */
export class IgxFilteringService {
    constructor(iconService, _overlayService) {
        this.iconService = iconService;
        this._overlayService = _overlayService;
        this.isFilterRowVisible = false;
        this.filteredColumn = null;
        this.selectedExpression = null;
        this.columnToMoreIconHidden = new Map();
        this.activeFilterCell = 0;
        this.columnsWithComplexFilter = new Set();
        this.areEventsSubscribed = false;
        this.destroy$ = new Subject();
        this.isFiltering = false;
        this.columnToExpressionsMap = new Map();
        this.columnStartIndex = -1;
        this._filterMenuOverlaySettings = {
            closeOnEscape: true,
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new ExcelStylePositionStrategy({
                verticalStartPoint: VerticalAlignment.Bottom,
                openAnimation: useAnimation(fadeIn, { params: { duration: '250ms' } }),
                closeAnimation: null
            }),
            scrollStrategy: new AbsoluteScrollStrategy()
        };
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    toggleFilterDropdown(element, column) {
        const filterIcon = column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
        const filterIconTarget = element.querySelector(`.${filterIcon}`) || element;
        const id = this.grid.createFilterDropdown(column, {
            ...this._filterMenuOverlaySettings,
            ...{ target: filterIconTarget }
        });
        this._overlayService.opening
            .pipe(first(overlay => overlay.id === id), takeUntil(this.destroy$))
            .subscribe((event) => {
            if (event.componentRef) {
                event.componentRef.instance.initialize(column, this._overlayService);
                event.componentRef.instance.overlayComponentId = id;
            }
            this.lastActiveNode = this.grid.navigation.activeNode;
        });
        this._overlayService.closed
            .pipe(first(overlay => overlay.id === id), takeUntil(this.destroy$))
            .subscribe(() => {
            this._overlayService.detach(id);
            this.grid.navigation.activeNode = this.lastActiveNode;
            this.grid.theadRow.nativeElement.focus();
        });
        this._overlayService.show(id);
    }
    /**
     * Subscribe to grid's events.
     */
    subscribeToEvents() {
        if (!this.areEventsSubscribed) {
            this.areEventsSubscribed = true;
            this.grid.columnResized.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                this.updateFilteringCell(eventArgs.column);
            });
            this.grid.parentVirtDir.chunkLoad.pipe(takeUntil(this.destroy$)).subscribe((eventArgs) => {
                if (eventArgs.startIndex !== this.columnStartIndex) {
                    this.columnStartIndex = eventArgs.startIndex;
                    this.grid.filterCellList.forEach((filterCell) => {
                        filterCell.updateFilterCellArea();
                    });
                }
            });
            this.grid.columnMovingEnd.pipe(takeUntil(this.destroy$)).subscribe(() => {
                this.grid.filterCellList.forEach((filterCell) => {
                    filterCell.updateFilterCellArea();
                });
            });
        }
    }
    /**
     * Close filtering row if a column is hidden.
     */
    hideFilteringRowOnColumnVisibilityChange(col) {
        const filteringRow = this.grid?.filteringRow;
        if (filteringRow && filteringRow.column && filteringRow.column === col) {
            filteringRow.close();
        }
    }
    /**
     * Internal method to create expressionsTree and filter grid used in both filter modes.
     */
    filterInternal(field, expressions = null) {
        this.isFiltering = true;
        let expressionsTree;
        if (expressions instanceof FilteringExpressionsTree) {
            expressionsTree = expressions;
        }
        else {
            expressionsTree = this.createSimpleFilteringTree(field, expressions);
        }
        if (expressionsTree.filteringOperands.length === 0) {
            this.clearFilter(field);
        }
        else {
            this.filter(field, null, expressionsTree);
        }
        this.isFiltering = false;
    }
    /**
     * Execute filtering on the grid.
     */
    filter(field, value, conditionOrExpressionTree, ignoreCase) {
        const grid = this.grid;
        const col = grid.getColumnByName(field);
        const filteringIgnoreCase = ignoreCase || (col ? col.filteringIgnoreCase : false);
        const filteringTree = grid.filteringExpressionsTree;
        const columnFilteringExpressionsTree = filteringTree.find(field);
        conditionOrExpressionTree = conditionOrExpressionTree ?? columnFilteringExpressionsTree;
        const fieldFilterIndex = filteringTree.findIndex(field);
        const newFilteringTree = this.prepare_filtering_expression(filteringTree, field, value, conditionOrExpressionTree, filteringIgnoreCase, fieldFilterIndex, true);
        const eventArgs = {
            owner: grid,
            filteringExpressions: newFilteringTree.find(field), cancel: false
        };
        this.grid.filtering.emit(eventArgs);
        if (eventArgs.cancel) {
            return;
        }
        if (conditionOrExpressionTree) {
            this.filter_internal(field, value, conditionOrExpressionTree, filteringIgnoreCase);
        }
        else {
            const expressionsTreeForColumn = this.grid.filteringExpressionsTree.find(field);
            if (!expressionsTreeForColumn) {
                throw new Error('Invalid condition or Expression Tree!');
            }
            else if (expressionsTreeForColumn instanceof FilteringExpressionsTree) {
                this.filter_internal(field, value, expressionsTreeForColumn, filteringIgnoreCase);
            }
            else {
                const expressionForColumn = expressionsTreeForColumn;
                this.filter_internal(field, value, expressionForColumn.condition, filteringIgnoreCase);
            }
        }
        const doneEventArgs = this.grid.filteringExpressionsTree.find(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.filteringDone.emit(doneEventArgs));
    }
    filter_global(term, condition, ignoreCase) {
        if (!condition) {
            return;
        }
        const filteringTree = this.grid.filteringExpressionsTree;
        this.grid.crudService.endEdit(false);
        this.grid.page = 0;
        filteringTree.filteringOperands = [];
        for (const column of this.grid.columns) {
            this.prepare_filtering_expression(filteringTree, column.field, term, condition, ignoreCase || column.filteringIgnoreCase);
        }
        this.grid.filteringExpressionsTree = filteringTree;
    }
    /**
     * Clears the filter of a given column if name is provided. Otherwise clears the filters of all columns.
     */
    clearFilter(field) {
        if (field) {
            const column = this.grid.getColumnByName(field);
            if (!column) {
                return;
            }
        }
        const emptyFilter = new FilteringExpressionsTree(null, field);
        const onFilteringEventArgs = {
            owner: this.grid,
            filteringExpressions: emptyFilter,
            cancel: false
        };
        this.grid.filtering.emit(onFilteringEventArgs);
        if (onFilteringEventArgs.cancel) {
            return;
        }
        this.isFiltering = true;
        this.clear_filter(field);
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.filteringDone.emit(emptyFilter));
        if (field) {
            const expressions = this.getExpressions(field);
            expressions.length = 0;
        }
        else {
            this.grid.columns.forEach(c => {
                const expressions = this.getExpressions(c.field);
                expressions.length = 0;
            });
        }
        this.isFiltering = false;
    }
    clear_filter(fieldName) {
        const grid = this.grid;
        grid.crudService.endEdit(false);
        const filteringState = grid.filteringExpressionsTree;
        const index = filteringState.findIndex(fieldName);
        if (index > -1) {
            filteringState.filteringOperands.splice(index, 1);
        }
        else if (!fieldName) {
            filteringState.filteringOperands = [];
        }
        grid.filteringExpressionsTree = filteringState;
    }
    /**
     * Filters all the `IgxColumnComponent` in the `IgxGridComponent` with the same condition.
     */
    filterGlobal(value, condition, ignoreCase) {
        if (!condition) {
            return;
        }
        const filteringTree = this.grid.filteringExpressionsTree;
        const newFilteringTree = new FilteringExpressionsTree(filteringTree.operator, filteringTree.fieldName);
        for (const column of this.grid.columns) {
            this.prepare_filtering_expression(newFilteringTree, column.field, value, condition, ignoreCase || column.filteringIgnoreCase);
        }
        const eventArgs = { owner: this.grid, filteringExpressions: newFilteringTree, cancel: false };
        this.grid.filtering.emit(eventArgs);
        if (eventArgs.cancel) {
            return;
        }
        this.grid.crudService.endEdit(false);
        this.grid.page = 0;
        this.grid.filteringExpressionsTree = newFilteringTree;
        // Wait for the change detection to update filtered data through the pipes and then emit the event.
        requestAnimationFrame(() => this.grid.filteringDone.emit(this.grid.filteringExpressionsTree));
    }
    /**
     * Register filtering SVG icons in the icon service.
     */
    registerSVGIcons() {
        const editorIcons = editor;
        editorIcons.forEach(icon => this.iconService.addSvgIconFromText(icon.name, icon.value, 'imx-icons'));
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /**
     * Returns the ExpressionUI array for a given column.
     */
    getExpressions(columnId) {
        if (!this.columnToExpressionsMap.has(columnId)) {
            const column = this.grid.columns.find((col) => col.field === columnId);
            const expressionUIs = new Array();
            if (column) {
                this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, expressionUIs);
                this.columnToExpressionsMap.set(columnId, expressionUIs);
            }
            return expressionUIs;
        }
        return this.columnToExpressionsMap.get(columnId);
    }
    /**
     * Recreates all ExpressionUIs for all columns. Executed after filtering to refresh the cache.
     */
    refreshExpressions() {
        if (!this.isFiltering) {
            this.columnsWithComplexFilter.clear();
            this.columnToExpressionsMap.forEach((value, key) => {
                const column = this.grid.columns.find((col) => col.field === key);
                if (column) {
                    value.length = 0;
                    this.generateExpressionsList(column.filteringExpressionsTree, this.grid.filteringExpressionsTree.operator, value);
                    const isComplex = this.isFilteringTreeComplex(column.filteringExpressionsTree);
                    if (isComplex) {
                        this.columnsWithComplexFilter.add(key);
                    }
                    this.updateFilteringCell(column);
                }
                else {
                    this.columnToExpressionsMap.delete(key);
                }
            });
        }
    }
    /**
     * Remove an ExpressionUI for a given column.
     */
    removeExpression(columnId, indexToRemove) {
        const expressionsList = this.getExpressions(columnId);
        if (indexToRemove === 0 && expressionsList.length > 1) {
            expressionsList[1].beforeOperator = null;
        }
        else if (indexToRemove === expressionsList.length - 1) {
            expressionsList[indexToRemove - 1].afterOperator = null;
        }
        else {
            expressionsList[indexToRemove - 1].afterOperator = expressionsList[indexToRemove + 1].beforeOperator;
            expressionsList[0].beforeOperator = null;
            expressionsList[expressionsList.length - 1].afterOperator = null;
        }
        expressionsList.splice(indexToRemove, 1);
    }
    /**
     * Generate filtering tree for a given column from existing ExpressionUIs.
     */
    createSimpleFilteringTree(columnId, expressionUIList = null) {
        const expressionsList = expressionUIList ? expressionUIList : this.getExpressions(columnId);
        const expressionsTree = new FilteringExpressionsTree(FilteringLogic.Or, columnId);
        let currAndBranch;
        for (const currExpressionUI of expressionsList) {
            if (!currExpressionUI.expression.condition.isUnary && currExpressionUI.expression.searchVal === null) {
                if (currExpressionUI.afterOperator === FilteringLogic.And && !currAndBranch) {
                    currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                    expressionsTree.filteringOperands.push(currAndBranch);
                }
                continue;
            }
            if ((currExpressionUI.beforeOperator === undefined || currExpressionUI.beforeOperator === null ||
                currExpressionUI.beforeOperator === FilteringLogic.Or) &&
                currExpressionUI.afterOperator === FilteringLogic.And) {
                currAndBranch = new FilteringExpressionsTree(FilteringLogic.And, columnId);
                expressionsTree.filteringOperands.push(currAndBranch);
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else if (currExpressionUI.beforeOperator === FilteringLogic.And) {
                currAndBranch.filteringOperands.push(currExpressionUI.expression);
            }
            else {
                expressionsTree.filteringOperands.push(currExpressionUI.expression);
                currAndBranch = null;
            }
        }
        return expressionsTree;
    }
    /**
     * Returns whether a complex filter is applied to a given column.
     */
    isFilterComplex(columnId) {
        if (this.columnsWithComplexFilter.has(columnId)) {
            return true;
        }
        const column = this.grid.columns.find((col) => col.field === columnId);
        const isComplex = column && this.isFilteringTreeComplex(column.filteringExpressionsTree);
        if (isComplex) {
            this.columnsWithComplexFilter.add(columnId);
        }
        return isComplex;
    }
    /**
     * Returns the string representation of the FilteringLogic operator.
     */
    getOperatorAsString(operator) {
        if (operator === 0) {
            return this.grid.resourceStrings.igx_grid_filter_operator_and;
        }
        else {
            return this.grid.resourceStrings.igx_grid_filter_operator_or;
        }
    }
    /**
     * Generate the label of a chip from a given filtering expression.
     */
    getChipLabel(expression) {
        if (expression.condition.isUnary) {
            return this.grid.resourceStrings[`igx_grid_filter_${expression.condition.name}`] || expression.condition.name;
        }
        else if (expression.searchVal instanceof Date) {
            const column = this.grid.getColumnByName(expression.fieldName);
            const formatter = column.formatter;
            if (formatter) {
                return formatter(expression.searchVal, undefined);
            }
            const pipeArgs = column.pipeArgs;
            return formatDate(expression.searchVal, pipeArgs.format, this.grid.locale);
        }
        else {
            return expression.searchVal;
        }
    }
    /**
     * Updates the content of a filterCell.
     */
    updateFilteringCell(column) {
        const filterCell = column.filterCell;
        if (filterCell) {
            filterCell.updateFilterCellArea();
        }
    }
    generateExpressionsList(expressions, operator, expressionsUIs) {
        generateExpressionsList(expressions, operator, expressionsUIs);
    }
    isFilteringExpressionsTreeEmpty(expressionTree) {
        if (FilteringExpressionsTree.empty(expressionTree)) {
            return true;
        }
        for (const expr of expressionTree.filteringOperands) {
            if ((expr instanceof FilteringExpressionsTree)) {
                const exprTree = expr;
                if (exprTree.filteringOperands && exprTree.filteringOperands.length) {
                    return false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    }
    filter_internal(fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        const filteringTree = this.grid.filteringExpressionsTree;
        this.grid.crudService.endEdit(false);
        this.grid.page = 0;
        const fieldFilterIndex = filteringTree.findIndex(fieldName);
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);
        this.grid.filteringExpressionsTree = filteringTree;
    }
    /** Modifies the filteringState object to contain the newly added filtering conditions/expressions.
     * If createNewTree is true, filteringState will not be modified (because it directly affects the grid.filteringExpressionsTree),
     * but a new object is created and returned.
     */
    prepare_filtering_expression(filteringState, fieldName, searchVal, conditionOrExpressionsTree, ignoreCase, insertAtIndex = -1, createNewTree = false) {
        let expressionsTree = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            conditionOrExpressionsTree : null;
        const condition = conditionOrExpressionsTree instanceof FilteringExpressionsTree ?
            null : conditionOrExpressionsTree;
        let newExpressionsTree = filteringState;
        if (createNewTree) {
            newExpressionsTree = new FilteringExpressionsTree(filteringState.operator, filteringState.fieldName);
            newExpressionsTree.filteringOperands = [...filteringState.filteringOperands];
        }
        if (condition) {
            const newExpression = { fieldName, searchVal, condition, ignoreCase };
            expressionsTree = new FilteringExpressionsTree(filteringState.operator, fieldName);
            expressionsTree.filteringOperands.push(newExpression);
        }
        if (expressionsTree) {
            if (insertAtIndex > -1) {
                newExpressionsTree.filteringOperands[insertAtIndex] = expressionsTree;
            }
            else {
                newExpressionsTree.filteringOperands.push(expressionsTree);
            }
        }
        return newExpressionsTree;
    }
    isFilteringTreeComplex(expressions) {
        if (!expressions) {
            return false;
        }
        if (expressions instanceof FilteringExpressionsTree) {
            const expressionsTree = expressions;
            if (expressionsTree.operator === FilteringLogic.Or) {
                const andOperatorsCount = this.getChildAndOperatorsCount(expressionsTree);
                // having more than one 'And' operator in the sub-tree means that the filter could not be represented without parentheses.
                return andOperatorsCount > 1;
            }
            let isComplex = false;
            for (const operand of expressionsTree.filteringOperands) {
                isComplex = isComplex || this.isFilteringTreeComplex(operand);
            }
            return isComplex;
        }
        return false;
    }
    getChildAndOperatorsCount(expressions) {
        let count = 0;
        let operand;
        for (let i = 0; i < expressions.filteringOperands.length; i++) {
            operand = expressions[i];
            if (operand instanceof FilteringExpressionsTree) {
                if (operand.operator === FilteringLogic.And) {
                    count++;
                }
                count = count + this.getChildAndOperatorsCount(operand);
            }
        }
        return count;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxFilteringService, deps: [{ token: i1.IgxIconService }, { token: i2.IgxOverlayService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxFilteringService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxFilteringService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.IgxIconService }, { type: i2.IgxOverlayService }] });
//# sourceMappingURL=data:application/json;base64,