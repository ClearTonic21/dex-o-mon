import { Directive, Input, EventEmitter, Output, Inject, booleanAttribute } from '@angular/core';
import { Subject } from 'rxjs';
import { first, takeUntil } from 'rxjs/operators';
import { AbsoluteScrollStrategy } from '../../services/overlay/scroll/absolute-scroll-strategy';
import { ColumnDisplayOrder } from '../common/enums';
import { HorizontalAlignment, VerticalAlignment } from '../../services/overlay/utilities';
import { IgxToolbarToken } from './token';
import { ConnectedPositioningStrategy } from '../../services/overlay/position/connected-positioning-strategy';
import * as i0 from "@angular/core";
import * as i1 from "./token";
/**
 * Base class for the pinning/hiding column and exporter actions.
 *
 * @hidden @internal
 */
export class BaseToolbarDirective {
    /**
     * Sets overlay settings
     */
    set overlaySettings(overlaySettings) {
        this._overlaySettings = overlaySettings;
    }
    /**
     * Returns overlay settings
     */
    get overlaySettings() {
        return this._overlaySettings;
    }
    /**
     * Returns the grid containing this component.
     */
    get grid() {
        return this.toolbar.grid;
    }
    constructor(toolbar) {
        this.toolbar = toolbar;
        /**
         * Emits an event before the toggle container is opened.
         */
        this.opening = new EventEmitter();
        /**
         * Emits an event after the toggle container is opened.
         */
        this.opened = new EventEmitter();
        /**
         * Emits an event before the toggle container is closed.
         */
        this.closing = new EventEmitter();
        /**
         * Emits an event after the toggle container is closed.
         */
        this.closed = new EventEmitter();
        /**
         * Emits when after a column's checked state is changed
         */
        this.columnToggle = new EventEmitter();
        this.$destroy = new Subject();
        this._overlaySettings = {
            positionStrategy: new ConnectedPositioningStrategy({
                horizontalDirection: HorizontalAlignment.Left,
                horizontalStartPoint: HorizontalAlignment.Right,
                verticalDirection: VerticalAlignment.Bottom,
                verticalStartPoint: VerticalAlignment.Bottom
            }),
            scrollStrategy: new AbsoluteScrollStrategy(),
            modal: false,
            closeOnEscape: true,
            closeOnOutsideClick: true
        };
    }
    /** @hidden @internal **/
    ngOnDestroy() {
        this.$destroy.next();
        this.$destroy.complete();
    }
    /** @hidden @internal */
    toggle(anchorElement, toggleRef, actions) {
        if (actions) {
            this._setupListeners(toggleRef, actions);
            const setHeight = () => actions.columnsAreaMaxHeight = actions.columnsAreaMaxHeight !== '100%'
                ? actions.columnsAreaMaxHeight :
                this.columnListHeight ??
                    `${Math.max(this.grid.calcHeight * 0.5, 200)}px`;
            toggleRef.opening.pipe(first()).subscribe(setHeight);
        }
        toggleRef.toggle({
            ...this.overlaySettings, ...{
                target: anchorElement, outlet: this.grid.outlet,
                excludeFromOutsideClick: [anchorElement]
            }
        });
    }
    /** @hidden @internal */
    focusSearch(columnActions) {
        columnActions.querySelector('input')?.focus();
    }
    _setupListeners(toggleRef, actions) {
        if (actions) {
            if (!this.$sub || this.$sub.closed) {
                this.$sub = actions.columnToggled.pipe(takeUntil(this.$destroy)).subscribe((event) => this.columnToggle.emit(event));
            }
        }
        /** The if statement prevents emitting open and close events twice  */
        if (toggleRef.collapsed) {
            toggleRef.opening.pipe(first(), takeUntil(this.$destroy)).subscribe((event) => this.opening.emit(event));
            toggleRef.opened.pipe(first(), takeUntil(this.$destroy)).subscribe((event) => this.opened.emit(event));
        }
        else {
            toggleRef.closing.pipe(first(), takeUntil(this.$destroy)).subscribe((event) => this.closing.emit(event));
            toggleRef.closed.pipe(first(), takeUntil(this.$destroy)).subscribe((event) => this.closed.emit(event));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: BaseToolbarDirective, deps: [{ token: IgxToolbarToken }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.0.1", type: BaseToolbarDirective, inputs: { columnListHeight: "columnListHeight", title: "title", prompt: "prompt", overlaySettings: "overlaySettings" }, outputs: { opening: "opening", opened: "opened", closing: "closing", closed: "closed", columnToggle: "columnToggle" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: BaseToolbarDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i1.IgxToolbarToken, decorators: [{
                    type: Inject,
                    args: [IgxToolbarToken]
                }] }], propDecorators: { columnListHeight: [{
                type: Input
            }], title: [{
                type: Input
            }], prompt: [{
                type: Input
            }], overlaySettings: [{
                type: Input
            }], opening: [{
                type: Output
            }], opened: [{
                type: Output
            }], closing: [{
                type: Output
            }], closed: [{
                type: Output
            }], columnToggle: [{
                type: Output
            }] } });
/**
 * @hidden @internal
 * Base class for pinning/hiding column actions
 */
export class BaseToolbarColumnActionsDirective extends BaseToolbarDirective {
    constructor() {
        super(...arguments);
        this.hideFilter = false;
        this.filterCriteria = '';
        this.columnDisplayOrder = ColumnDisplayOrder.DisplayOrder;
        this.columnsAreaMaxHeight = '100%';
        this.indentetion = 30;
    }
    checkAll() {
        this.columnActionsUI.checkAllColumns();
    }
    uncheckAll() {
        this.columnActionsUI.uncheckAllColumns();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: BaseToolbarColumnActionsDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.0.1", type: BaseToolbarColumnActionsDirective, inputs: { hideFilter: ["hideFilter", "hideFilter", booleanAttribute], filterCriteria: "filterCriteria", columnDisplayOrder: "columnDisplayOrder", columnsAreaMaxHeight: "columnsAreaMaxHeight", uncheckAllText: "uncheckAllText", checkAllText: "checkAllText", indentetion: "indentetion", buttonText: "buttonText" }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: BaseToolbarColumnActionsDirective, decorators: [{
            type: Directive
        }], propDecorators: { hideFilter: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], filterCriteria: [{
                type: Input
            }], columnDisplayOrder: [{
                type: Input
            }], columnsAreaMaxHeight: [{
                type: Input
            }], uncheckAllText: [{
                type: Input
            }], checkAllText: [{
                type: Input
            }], indentetion: [{
                type: Input
            }], buttonText: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,