export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL2NvbW1vbi9ldmVudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElCYXNlRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIH0gZnJvbSAnLi4vLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBHcmlkS2V5ZG93blRhcmdldFR5cGUgfSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7IENlbGxUeXBlLCBDb2x1bW5UeXBlLCBHcmlkVHlwZSwgUm93VHlwZSB9IGZyb20gJy4vZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9maWx0ZXJpbmctZXhwcmVzc2lvbnMtdHJlZSc7XG5pbXBvcnQgeyBJR3JvdXBpbmdFeHByZXNzaW9uIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2dyb3VwaW5nLWV4cHJlc3Npb24uaW50ZXJmYWNlJztcbmltcG9ydCB7IElneEJhc2VFeHBvcnRlciB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2V4cG9ydGVyLWNvbW1vbi9iYXNlLWV4cG9ydC1zZXJ2aWNlJztcbmltcG9ydCB7IElneEV4cG9ydGVyT3B0aW9uc0Jhc2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9leHBvcnRlci1jb21tb24vZXhwb3J0ZXItb3B0aW9ucy1iYXNlJztcbmltcG9ydCB7IElTb3J0aW5nRXhwcmVzc2lvbiB9IGZyb20gJy4uLy4uL2RhdGEtb3BlcmF0aW9ucy9zb3J0aW5nLXN0cmF0ZWd5JztcbmltcG9ydCB7IElCYXNlU2VhcmNoSW5mbyB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvdGV4dC1oaWdobGlnaHQvdGV4dC1oaWdobGlnaHQuZGlyZWN0aXZlJztcblxuLyoqIFRoZSBldmVudCBhcmd1bWVudHMgd2hlbiBkYXRhIGZyb20gYSBncmlkIGlzIGJlaW5nIGNvcGllZC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRDbGlwYm9hcmRFdmVudCB7XG4gICAgLyoqIGBkYXRhYCBjYW4gYmUgb2YgYW55IHR5cGUgYW5kIHJlZmVycyB0byB0aGUgZGF0YSB0aGF0IGlzIGJlaW5nIGNvcGllZC9zdG9yZWQgdG8gdGhlIGNsaXBib2FyZCAqL1xuICAgIGRhdGE6IGFueVtdO1xuICAgIC8qKlxuICAgICAqIGBjYW5jZWxgIHJldHVybnMgd2hldGhlciBhbiBleHRlcm5hbCBldmVudCBoYXMgaW50ZXJjZXB0ZWQgdGhlIGNvcHlpbmdcbiAgICAgKiBJZiB0aGUgdmFsdWUgYmVjb21lcyBcInRydWVcIiwgaXQgcmV0dXJucy9leGl0cyBmcm9tIHRoZSBtZXRob2QsIGluc3RhbnRpYXRpbmcgdGhlIGludGVyZmFjZVxuICAgICAqL1xuICAgIGNhbmNlbDogYm9vbGVhbjtcbn1cblxuLyoqIFJlcHJlc2VudHMgYW4gZXZlbnQgYXJndW1lbnQgcmVsYXRlZCB0byBncmlkIGNlbGwgaW50ZXJhY3Rpb25zLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR3JpZENlbGxFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGdyaWQgY2VsbCB0aGF0IHRyaWdnZXJlZCB0aGUgZXZlbnQuICovXG4gICAgY2VsbDogQ2VsbFR5cGU7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgZXZlbnQgdGhhdCBvY3VycmVkXG4gICAgICogRXhhbXBsZXMgb2Ygc3VjaCBldmVudHMgaW5jbHVkZTogc2VsZWN0aW5nLCBjbGlja2luZywgZG91YmxlIGNsaWNraW5nLCBldGMuXG4gICAgICovXG4gICAgZXZlbnQ6IEV2ZW50O1xufVxuXG4vKiogUmVwcmVzZW50cyBhbiBldmVudCBhcmd1bWVudCByZWxhdGVkIHRvIGdyaWQgcm93IGludGVyYWN0aW9ucy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRSb3dFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGdyaWQgcm93IHRoYXQgdHJpZ2dlcmVkIHRoZSBldmVudC4gKi9cbiAgICByb3c6IFJvd1R5cGU7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgZXZlbnQgdGhhdCBvY3VycmVkXG4gICAgICogRXhhbXBsZXMgb2Ygc3VjaCBldmVudHMgaW5jbHVkZTogc2VsZWN0aW5nLCBjbGlja2luZywgZG91YmxlIGNsaWNraW5nLCBldGMuXG4gICAgICovXG4gICAgZXZlbnQ6IEV2ZW50O1xufVxuXG4vKiogUmVwcmVzZW50cyBhbiBldmVudCBhcmd1bWVudCBmb3IgdGhlIGdyaWQgY29udGV4dE1lbnUgb3V0cHV0ICovXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkQ29udGV4dE1lbnVFdmVudEFyZ3MgZXh0ZW5kcyBJR3JpZENlbGxFdmVudEFyZ3MsIElHcmlkUm93RXZlbnRBcmdzIHt9XG5cbi8qKiBSZXByZXNlbnRzIGV2ZW50IGFyZ3VtZW50cyByZWxhdGVkIHRvIGdyaWQgZWRpdGluZyBjb21wbGV0aW9uLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR3JpZEVkaXREb25lRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMTcuMS4wLiBVc2UgdGhlIGByb3dLZXlgIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICovXG4gICAgcm93SUQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDE3LjEuMC4gVXNlIHRoZSBgcm93S2V5YCBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHByaW1hcnlLZXk6IGFueTtcbiAgICByb3dLZXk6IGFueTtcbiAgICBjZWxsSUQ/OiB7XG4gICAgICAgIHJvd0lEOiBhbnk7XG4gICAgICAgIGNvbHVtbklEOiBhbnk7XG4gICAgICAgIHJvd0luZGV4OiBudW1iZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBgcm93RGF0YWAgcmVwcmVzZW50cyB0aGUgdXBkYXRlZC9jb21taXR0ZWQgZGF0YSBvZiB0aGUgcm93IGFmdGVyIHRoZSBlZGl0IChuZXdWYWx1ZSlcbiAgICAgKiBUaGUgb25seSBjYXNlIHJvd0RhdGEgKG9mIHRoZSBjdXJyZW50IG9iamVjdCkgaXMgdXNlZCBkaXJlY3RseSwgaXMgd2hlbiB0aGVyZSBpcyBubyByb3dFZGl0aW5nIG9yIHRyYW5zYWN0aW9ucyBlbmFibGVkXG4gICAgICovXG4gICAgcm93RGF0YTogYW55O1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIHByZXZpb3VzIChiZWZvcmUgZWRpdGluZykgdmFsdWUgb2YgdGhlIGVkaXRlZCBjZWxsLlxuICAgICAqIEl0J3MgdXNlZCB3aGVuIHRoZSBldmVudCBoYXMgYmVlbiBzdG9wcGVkL2V4aXRlZC5cbiAgICAgKi9cbiAgICBvbGRWYWx1ZTogYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogUmVwcmVzZW50cyB0aGUgdmFsdWUsIHRoYXQgaXMgYmVpbmcgZW50ZXJlZCBpbiB0aGUgZWRpdGVkIGNlbGxcbiAgICAgKiBXaGVuIHRoZXJlIGlzIG5vIGBuZXdWYWx1ZWAgYW5kIHRoZSBldmVudCBoYXMgZW5kZWQsIHRoZSB2YWx1ZSBvZiB0aGUgY2VsbCByZXR1cm5zIHRvIHRoZSBgb2xkVmFsdWVgXG4gICAgICovXG4gICAgbmV3VmFsdWU/OiBhbnk7XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBldmVudCwgdGhhdCBoYXMgdHJpZ2dlcmVkIHRoZSBlZGl0XG4gICAgICovXG4gICAgZXZlbnQ/OiBFdmVudDtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFJlcHJlc2VudHMgdGhlIGNvbHVtbiBpbmZvcm1hdGlvbiBvZiB0aGUgZWRpdGVkIGNlbGxcbiAgICAgKi9cbiAgICBjb2x1bW4/OiBDb2x1bW5UeXBlO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogUmVwcmVzZW50cyB0aGUgZ3JpZCBpbnN0YW5jZSB0aGF0IG93bnMgdGhlIGVkaXQgZXZlbnQuXG4gICAgICovXG4gICAgb3duZXI/OiBHcmlkVHlwZTtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgZWRpdGluZyBjb25zaXN0cyBvZiBhZGRpbmcgYSBuZXcgcm93XG4gICAgICovXG4gICAgaXNBZGRSb3c/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBuZXcgdmFsdWUgd291bGQgYmUgdmFsaWQuXG4gICAgICogSXQgY2FuIGJlIHNldCB0byByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbWV0aG9kcyBmb3IgdmFsaWRhdGlvbiBvZiB0aGUgZ3JpZFxuICAgICAqL1xuICAgIHZhbGlkPzogYm9vbGVhbjtcbn1cblxuXG4vKipcbiAqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gZ3JpZCBlZGl0aW5nLlxuICogVGhlIGV2ZW50IGlzIGNhbmNlbGFibGVcbiAqIEl0IGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSByb3cgYW5kIHRoZSBjb2x1bW4sIGFzIHdlbGwgYXMgdGhlIG9sZCBhbmQgbndlIHZhbHVlIG9mIHRoZSBlbGVtZW50L2NlbGxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR3JpZEVkaXRFdmVudEFyZ3MgZXh0ZW5kcyBDYW5jZWxhYmxlRXZlbnRBcmdzLCBJR3JpZEVkaXREb25lRXZlbnRBcmdzIHtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUm93RGF0YUNhbmNlbGFibGVFdmVudEFyZ3MgZXh0ZW5kcyBJUm93RGF0YUV2ZW50QXJncywgSUdyaWRFZGl0RXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIGNlbGxJRD86IHtcbiAgICAgICAgcm93SUQ6IGFueTtcbiAgICAgICAgY29sdW1uSUQ6IGFueTtcbiAgICAgICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgb2xkVmFsdWU6IGFueTtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIG5ld1ZhbHVlPzogYW55O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICovXG4gICAgaXNBZGRSb3c/OiBib29sZWFuO1xuICAgIG93bmVyOiBHcmlkVHlwZTtcbn1cblxuLyoqXG4gKiBUaGUgZXZlbnQgYXJndW1lbnRzIGFmdGVyIGEgY29sdW1uJ3MgcGluIHN0YXRlIGlzIGNoYW5nZWQuXG4gKiBgaW5zZXJ0QXRJbmRleGBzcGVjaWZpZXMgYXQgd2hpY2ggaW5kZXggaW4gdGhlIHBpbm5lZC91bnBpbm5lZCBhcmVhIHRoZSBjb2x1bW4gd2FzIGluc2VydGVkLlxuICogYGlzUGlubmVkYCByZXR1cm5zIHRoZSBhY3R1YWwgcGluIHN0YXRlIG9mIHRoZSBjb2x1bW4gYWZ0ZXIgdGhlIG9wZXJhdGlvbiBjb21wbGV0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBpbkNvbHVtbkV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICBjb2x1bW46IENvbHVtblR5cGU7XG4gICAgLyoqXG4gICAgICogSWYgcGlubmVkLCBzcGVjaWZpZXMgYXQgd2hpY2ggaW5kZXggaW4gdGhlIHBpbm5lZCBhcmVhIHRoZSBjb2x1bW4gaXMgaW5zZXJ0ZWQuXG4gICAgICogSWYgdW5waW5uZWQsIHNwZWNpZmllcyBhdCB3aGljaCBpbmRleCBpbiB0aGUgdW5waW5uZWQgYXJlYSB0aGUgY29sdW1uIGlzIGluc2VydGVkLlxuICAgICAqL1xuICAgIGluc2VydEF0SW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhY3R1YWwgcGluIHN0YXRlIG9mIHRoZSBjb2x1bW4uXG4gICAgICogSWYgcGlubmluZy91bnBpbm5pbmcgaXMgc3VjY2Vzc2Z1bCwgdmFsdWUgb2YgYGlzUGlubmVkYCB3aWxsIGNoYW5nZSBhY2NvcmRpbmdseSB3aGVuIHJlYWQgaW4gdGhlIFwiLWluZ1wiIGFuZCBcIi1lZFwiIGV2ZW50LlxuICAgICAqL1xuICAgIGlzUGlubmVkOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRoZSBldmVudCBhcmd1bWVudHMgYmVmb3JlIGEgY29sdW1uJ3MgcGluIHN0YXRlIGlzIGNoYW5nZWQuXG4gKiBgaW5zZXJ0QXRJbmRleGBzcGVjaWZpZXMgYXQgd2hpY2ggaW5kZXggaW4gdGhlIHBpbm5lZC91bnBpbm5lZCBhcmVhIHRoZSBjb2x1bW4gaXMgaW5zZXJ0ZWQuXG4gKiBDYW4gYmUgY2hhbmdlZCBpbiB0aGUgYGNvbHVtblBpbmAgZXZlbnQuXG4gKiBgaXNQaW5uZWRgIHJldHVybnMgdGhlIGFjdHVhbCBwaW4gc3RhdGUgb2YgdGhlIGNvbHVtbi4gV2hlbiBwaW5uaW5nL3VucGlubmluZyBpcyBzdWNjZXNzZnVsLFxuICogdGhlIHZhbHVlIG9mIGBpc1Bpbm5lZGAgd2lsbCBjaGFuZ2UgYWNjb3JkaW5nbHkgd2hlbiByZWFkIGluIHRoZSBcIi1pbmdcIiBhbmQgXCItZWRcIiBldmVudC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGluQ29sdW1uQ2FuY2VsbGFibGVFdmVudEFyZ3MgZXh0ZW5kcyBJUGluQ29sdW1uRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIHtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGV2ZW50IGFyZ3VtZW50cyByZWxhdGVkIHRvIGV2ZW50cywgdGhhdCBjYW4gb2NjdXIgZm9yIHJvd3MgaW4gYSBncmlkXG4gKiBFeGFtcGxlIGZvciBldmVudHM6IGFkZGluZywgZGVsZXRpbmcsIHNlbGVjdGlvbiwgdHJhbnNhY3Rpb24sIGV0Yy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUm93RGF0YUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDE3LjEuMC4gVXNlIHRoZSBgcm93RGF0YWAgcHJvcGVydHkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBkYXRhOiBhbnk7XG4gICAgcm93RGF0YTogYW55XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgdW5pcXVlIGtleSwgdGhlIHJvdyBjYW4gYmUgYXNzb2NpYXRlZCB3aXRoLlxuICAgICAqIEF2YWlsYWJsZSBpZiBgcHJpbWFyeUtleWAgZXhpc3RzXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxNy4xLjAuIFVzZSB0aGUgYHJvd0tleWAgcHJvcGVydHkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBwcmltYXJ5S2V5OiBhbnk7XG4gICAgcm93S2V5OiBhbnk7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGdyaWQgaW5zdGFuY2UgdGhhdCBvd25zIHRoZSBlZGl0IGV2ZW50LiAqL1xuICAgIG93bmVyOiBHcmlkVHlwZTtcbn1cblxuXG4vKiogVGhlIGV2ZW50IGFyZ3VtZW50cyB3aGVuIGEgY29sdW1uIGlzIGJlaW5nIHJlc2l6ZWQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtblJlc2l6ZUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIGNvbHVtbiB0aGF0IGlzIGJlaW5nIHJlc2l6ZWQgKi9cbiAgICBjb2x1bW46IENvbHVtblR5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIG9sZCB3aWR0aCBvZiB0aGUgY29sdW1uIGJlZm9yZSB0aGUgcmVzaXppbmcgKi9cbiAgICBwcmV2V2lkdGg6IHN0cmluZztcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgbmV3IHdpZHRoLCB0aGUgY29sdW1uIGlzIGJlaW5nIHJlc2l6ZWQgdG8gKi9cbiAgICBuZXdXaWR0aDogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBldmVudCBhcmd1bWVudHMgd2hlbiBhIGNvbHVtbiBpcyBiZWluZyByZXNpemVkXG4gKiBJdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sdW1uLCBpdCdzIG9sZCBhbmQgbmV3IHdpZHRoXG4gKiBUaGUgZXZlbnQgY2FuIGJlIGNhbmNlbGVkXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtblJlc2l6aW5nRXZlbnRBcmdzIGV4dGVuZHMgSUNvbHVtblJlc2l6ZUV2ZW50QXJncywgQ2FuY2VsYWJsZUV2ZW50QXJncyB7XG59XG5cbi8qKlxuICogVGhlIGV2ZW50IGFyZ3VtZW50cyB3aGVuIHRoZSBzZWxlY3Rpb24gc3RhdGUgb2YgYSByb3cgaXMgYmVpbmcgY2hhbmdlZFxuICogVGhlIGV2ZW50IGlzIGNhbmNlbGFibGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUm93U2VsZWN0aW9uRXZlbnRBcmdzIGV4dGVuZHMgQ2FuY2VsYWJsZUV2ZW50QXJncywgSUJhc2VFdmVudEFyZ3Mge1xuICAgIC8qKiBSZXByZXNlbnRzIGFuIGFycmF5IG9mIHJvd3MsIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQgKi9cbiAgICByZWFkb25seSBvbGRTZWxlY3Rpb246IGFueVtdO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBuZXdseSBzZWxlY3RlZCByb3dzICovXG4gICAgbmV3U2VsZWN0aW9uOiBhbnlbXTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGFycmF5IG9mIGFsbCBhZGRlZCByb3dzXG4gICAgICogV2hlbmV2ZXIgYSByb3cgaGFzIGJlZW4gc2VsZWN0ZWQsIHRoZSBhcnJheSBpcyBcInJlZnJlc2hlZFwiIHdpdGggdGhlIHNlbGVjdGVkIHJvd3NcbiAgICAgKi9cbiAgICByZWFkb25seSBhZGRlZDogYW55W107XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhbiBhcnJheSBvZiBhbGwgcm93cywgcmVtb3ZlZCBmcm9tIHRoZSBzZWxlY3Rpb25cbiAgICAgKiBXaGVuZXZlciBhIHJvdyBoYXMgYmVlbiBkZXNlbGVjdGVkLCB0aGUgYXJyYXkgaXMgXCJyZWZyZXNoZWRcIiB3aXRoIHRoZSByb3dzLFxuICAgICAqIHRoYXQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgc2VsZWN0ZWQsIGJ1dCBhcmUgbm8gbG9uZ2VyXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3ZlZDogYW55W107XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgZXZlbnQsIHRoYXQgaGFzIHRyaWdnZXJlZCB0aGUgc2VsZWN0aW9uIGNoYW5nZVxuICAgICAqIHNlbGVjdGluZywgZGVzZWxlY3RpbmdcbiAgICAgKi9cbiAgICByZWFkb25seSBldmVudD86IEV2ZW50O1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3QgYWxsIHJvd3Mgb2YgdGhlIGdyaWQgaGF2ZSBiZWVuIHNlbGVjdGVkICovXG4gICAgcmVhZG9ubHkgYWxsUm93c1NlbGVjdGVkPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGUgZXZlbnQgYXJndW1lbnRzIHdoZW4gdGhlIHNlbGVjdGlvbiBzdGF0ZSBvZiBhIGNvbHVtbiBpcyBiZWluZyBjaGFuZ2VkXG4gKiBUaGUgZXZlbnQgaXMgY2FuY2VsYWJsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElDb2x1bW5TZWxlY3Rpb25FdmVudEFyZ3MgZXh0ZW5kcyBDYW5jZWxhYmxlRXZlbnRBcmdzLCBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIFJlcHJlc2VudHMgYW4gYXJyYXkgb2YgY29sdW1ucywgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBzZWxlY3RlZCAqL1xuICAgIHJlYWRvbmx5IG9sZFNlbGVjdGlvbjogc3RyaW5nW107XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIG5ld2x5IHNlbGVjdGVkIGNvbHVtbnMgKi9cbiAgICBuZXdTZWxlY3Rpb246IHN0cmluZ1tdO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYW4gYXJyYXkgb2YgYWxsIGFkZGVkIGNvbHVtbnNcbiAgICAgKiBXaGVuZXZlciBhIGNvbHVtbiBoYXMgYmVlbiBzZWxlY3RlZCwgdGhlIGFycmF5IGlzIFwicmVmcmVzaGVkXCIgd2l0aCB0aGUgc2VsZWN0ZWQgY29sdW1uc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IGFkZGVkOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGFuIGFycmF5IG9mIGFsbCBjb2x1bW5zLCByZW1vdmVkIGZyb20gdGhlIHNlbGVjdGlvblxuICAgICAqIFdoZW5ldmVyIGEgY29sdW1uIGhhcyBiZWVuIGRlc2VsZWN0ZWQsIHRoZSBhcnJheSBpcyBcInJlZnJlc2hlZFwiIHdpdGggdGhlIGNvbHVtbnMsIHRoYXQgaGF2ZSBiZWVuIHByZXZpb3VzbHkgc2VsZWN0ZWQsIGJ1dCBhcmUgbm8gbG9uZ2VyXG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVtb3ZlZDogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgb3JpZ2luYWwgZXZlbnQsIHRoYXQgaGFzIHRyaWdnZXJlZCB0aGUgc2VsZWN0aW9uIGNoYW5nZVxuICAgICAqIHNlbGVjdGluZywgZGVzZWxlY3RpbmdcbiAgICAgKi9cbiAgICByZWFkb25seSBldmVudD86IEV2ZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTZWFyY2hJbmZvIGV4dGVuZHMgSUJhc2VTZWFyY2hJbmZvIHtcbiAgICBtYXRjaEluZm9DYWNoZTogYW55W107XG4gICAgYWN0aXZlTWF0Y2hJbmRleDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGFyZ3VtZW50cyBmb3IgdGhlIGdyaWQgdG9vbGJhciBleHBvcnQgZXZlbnQuXG4gKiBJdCBwcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZ3JpZCBpbnN0YW5jZSwgZXhwb3J0ZXIgc2VydmljZSwgZXhwb3J0IG9wdGlvbnMsXG4gKiBhbmQgYWxsb3dzIHRoZSBldmVudCB0byBiZSBjYW5jZWxlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR3JpZFRvb2xiYXJFeHBvcnRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIGBncmlkYCByZXByZXNlbnRzIGEgcmVmZXJlbmNlIHRvIHRoZSBpbnN0YW5jZSBvZiB0aGUgZ3JpZCB0ZSBldmVudCBvcmlnaW5hdGVkIGZyb20gKi9cbiAgICBncmlkOiBHcmlkVHlwZTtcbiAgICAvKipcbiAgICAgKiBUaGUgYGV4cG9ydGVyYCBpcyBhIGJhc2Ugc2VydmljZS5cbiAgICAgKiBUaGUgdHlwZSAoYW4gYWJzdHJhY3QgY2xhc3MgYElneEJhc2VFeHBvcnRlcmApIGhhcyBpdCdzIG93biBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzXG4gICAgICogSXQgaXMgdXNlZCB0byBkZWZpbmUgdGhlIGZvcm1hdCBhbmQgb3B0aW9ucyBvZiB0aGUgZXhwb3J0LCB0aGUgZXhwb3J0ZWQgZWxlbWVudFxuICAgICAqIGFuZCBtZXRob2RzIGZvciBwcmVwYXJpbmcgdGhlIGRhdGEgZnJvbSB0aGUgZWxlbWVudHMgZm9yIGV4cG9ydGluZ1xuICAgICAqL1xuICAgIGV4cG9ydGVyOiBJZ3hCYXNlRXhwb3J0ZXI7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgZGlmZmVyZW50IHNldHRpbmdzLCB0aGF0IGNhbiBiZSBnaXZlbiB0byBhbiBleHBvcnRcbiAgICAgKiBUaGUgdHlwZSAoYW4gYWJzdHJhY3QgY2xhc3MgYElneEV4cG9ydGVyT3B0aW9uc0Jhc2VgKSBoYXMgcHJvcGVydGllcyBmb3IgY29sdW1uIHNldHRpbmdzXG4gICAgICogKHdoZXRoZXIgdGhleSBzaG91bGQgYmUgaWdub3JlZCkgYXMgd2VsbCBhcyBtZXRob2QgZm9yIGdlbmVyYXRpbmcgYSBmaWxlIG5hbWVcbiAgICAgKi9cbiAgICBvcHRpb25zOiBJZ3hFeHBvcnRlck9wdGlvbnNCYXNlO1xuICAgIC8qKlxuICAgICAqIGBjYW5jZWxgIHJldHVybnMgd2hldGhlciB0aGUgZXZlbnQgaGFzIGJlZW4gaW50ZXJjZXB0ZWQgYW5kIHN0b3BwZWRcbiAgICAgKiBJZiB0aGUgdmFsdWUgYmVjb21lcyBcInRydWVcIiwgaXQgcmV0dXJucy9leGl0cyBmcm9tIHRoZSBtZXRob2QsIGluc3RhbnRpYXRpbmcgdGhlIGludGVyZmFjZVxuICAgICAqL1xuICAgIGNhbmNlbDogYm9vbGVhbjtcbn1cblxuLyoqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gdGhlIHN0YXJ0IG9mIGEgY29sdW1uIG1vdmluZyBvcGVyYXRpb24gaW4gYSBncmlkLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uTW92aW5nU3RhcnRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgY29sdW1uIHRoYXQgaXMgYmVpbmcgbW92ZWQuXG4gICAgICogVGhlIGBDb2x1bW5UeXBlYCBjb250YWlucyB0aGUgaW5mb3JtYXRpb24gKHRoZSBncmlkIGl0IGJlbG9uZ3MgdG8sIGNzcyBkYXRhLCBzZXR0aW5ncywgZXRjLikgb2YgdGhlIGNvbHVtbiBpbiBpdHMgcHJvcGVydGllc1xuICAgICAqL1xuICAgIHNvdXJjZTogQ29sdW1uVHlwZTtcbn1cblxuLyoqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gYSBjb2x1bW4gbW92aW5nIG9wZXJhdGlvbiBpbiBhIGdyaWQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtbk1vdmluZ0V2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBjb2x1bW4gdGhhdCBpcyBiZWluZyBtb3ZlZC5cbiAgICAgKiBUaGUgYENvbHVtblR5cGVgIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiAodGhlIGdyaWQgaXQgYmVsb25ncyB0bywgY3NzIGRhdGEsIHNldHRpbmdzLCBldGMuKSBvZiB0aGUgY29sdW1uIGluIGl0cyBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgc291cmNlOiBDb2x1bW5UeXBlO1xuICAgIC8qKlxuICAgICAqIGBjYW5jZWxgIHJldHVybnMgd2hldGhlciB0aGUgZXZlbnQgaGFzIGJlZW4gaW50ZXJjZXB0ZWQgYW5kIHN0b3BwZWRcbiAgICAgKiBJZiB0aGUgdmFsdWUgYmVjb21lcyBcInRydWVcIiwgaXQgcmV0dXJucy9leGl0cyBmcm9tIHRoZSBtZXRob2QsIGluc3RhbnRpYXRpbmcgdGhlIGludGVyZmFjZVxuICAgICAqL1xuICAgIGNhbmNlbDogYm9vbGVhbjtcbn1cblxuLyoqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gdGhlIGVuZCBvZiBhIGNvbHVtbiBtb3Zpbmcgb3BlcmF0aW9uIGluIGEgZ3JpZCAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uTW92aW5nRW5kRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIC8qKlxuICAgICAqIFRoZSBzb3VyY2Ugb2YgdGhlIGV2ZW50IHJlcHJlc2VudHMgdGhlIGNvbHVtbiB0aGF0IGlzIGJlaW5nIG1vdmVkLlxuICAgICAqIFRoZSBgQ29sdW1uVHlwZWAgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uICh0aGUgZ3JpZCBpdCBiZWxvbmdzIHRvLCBjc3MgZGF0YSwgc2V0dGluZ3MsIGV0Yy4pIG9mIHRoZSBjb2x1bW4gaW4gaXRzIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBzb3VyY2U6IENvbHVtblR5cGU7XG4gICAgLyoqXG4gICAgICogVGhlIHRhcmdldCBvZiB0aGUgZXZlbnQgcmVwcmVzZW50cyB0aGUgY29sdW1uLCB0aGUgc291cmNlIGlzIGJlaW5nIG1vdmVkIHRvLlxuICAgICAqIFRoZSBgQ29sdW1uVHlwZWAgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uICh0aGUgZ3JpZCBpdCBiZWxvbmdzIHRvLCBjc3MgZGF0YSwgc2V0dGluZ3MsIGV0Yy4pIG9mIHRoZSBjb2x1bW4gaW4gaXRzIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICB0YXJnZXQ6IENvbHVtblR5cGU7XG4gICAgLyoqXG4gICAgICogYGNhbmNlbGAgcmV0dXJucyB3aGV0aGVyIHRoZSBldmVudCBoYXMgYmVlbiBpbnRlcmNlcHRlZCBhbmQgc3RvcHBlZFxuICAgICAqIElmIHRoZSB2YWx1ZSBiZWNvbWVzIFwidHJ1ZVwiLCBpdCByZXR1cm5zL2V4aXRzIGZyb20gdGhlIG1ldGhvZCwgaW5zdGFudGlhdGluZyB0aGUgaW50ZXJmYWNlXG4gICAgICovXG4gICAgY2FuY2VsOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gZXZlbnQsIGVtaXR0ZWQgd2hlbiBrZXlkb3duIGlzIHRyaWdnZXJlZCBvdmVyIGVsZW1lbnQgaW5zaWRlIGdyaWQncyBib2R5XG4gKiBUaGlzIGV2ZW50IGlzIGZpcmVkIG9ubHkgaWYgdGhlIGtleSBjb21iaW5hdGlvbiBpcyBzdXBwb3J0ZWQgaW4gdGhlIGdyaWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRLZXlkb3duRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIC8qKiBUaGUgYHRhcmdldFR5cGVgIHJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIHRhcmdldGVkIG9iamVjdC4gRm9yIGV4YW1wbGUgYSBjZWxsIG9yIGEgcm93ICovXG4gICAgdGFyZ2V0VHlwZTogR3JpZEtleWRvd25UYXJnZXRUeXBlO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBpbmZvcm1hdGlvbiBhbmQgZGV0YWlscyBvZiB0aGUgb2JqZWN0IGl0c2VsZiAqL1xuICAgIHRhcmdldDogYW55O1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBldmVudCwgdGhhdCBvY2N1cnJlZC4gKi9cbiAgICBldmVudDogRXZlbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IGlzIGNhbmNlbGFibGVcbiAgICAgKiBgY2FuY2VsYCByZXR1cm5zIHdoZXRoZXIgdGhlIGV2ZW50IGhhcyBiZWVuIGludGVyY2VwdGVkIGFuZCBzdG9wcGVkXG4gICAgICogSWYgdGhlIHZhbHVlIGJlY29tZXMgXCJ0cnVlXCIsIGl0IHJldHVybnMvZXhpdHMgZnJvbSB0aGUgbWV0aG9kLCBpbnN0YW50aWF0aW5nIHRoZSBpbnRlcmZhY2VcbiAgICAgKi9cbiAgICBjYW5jZWw6IGJvb2xlYW47XG59XG5cbi8qKiBUaGUgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gZ2V0dGluZyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiBhIGNlcnRhaW4gY2VsbCAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ2VsbFBvc2l0aW9uIHtcbiAgICAvKiogSXQgcmV0dXJucyB0aGUgcG9zaXRpb24gKGluZGV4KSBvZiB0aGUgcm93LCB0aGUgY2VsbCBpcyBpbiAqL1xuICAgIHJvd0luZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogSXQgcmV0dXJucyB0aGUgcG9zaXRpb24gKGluZGV4KSBvZiB0aGUgY29sdW1uLCB0aGUgY2VsbCBpcyBpblxuICAgICAqIENvdW50cyBvbmx5IHRoZSB2aXNpYmxlIChub24gaGlkZGVuKSBjb2x1bW5zXG4gICAgICovXG4gICAgdmlzaWJsZUNvbHVtbkluZGV4OiBudW1iZXI7XG59XG5cbi8qKiBFbWl0dGVkIHdoZW4gYSBkcmFnZ2luZyBvcGVyYXRpb24gaXMgZmluaXNoZWQgKHdoZW4gdGhlIHJvdyBpcyBkcm9wcGVkKSAqL1xuZXhwb3J0IGludGVyZmFjZSBJUm93RHJhZ0VuZEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgZHJhZyBkaXJlY3RpdmUgb3IgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBkcmFnIG9wZXJhdGlvbiAqL1xuICAgIGRyYWdEaXJlY3RpdmU6IGFueTtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIHJvdyB0aGF0IGlzIGJlaW5nIGRyYWdnZWQuICovXG4gICAgZHJhZ0RhdGE6IFJvd1R5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIEhUTUwgZWxlbWVudCBpdHNlbGYgKi9cbiAgICBkcmFnRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgLyoqIGBhbmltYXRpb25gIHJldHVybnMgd2hldGhlciB0aGUgZXZlbnQgaXMgYW5pbWF0ZWQgKi9cbiAgICBhbmltYXRpb246IGJvb2xlYW47XG59XG5cbi8qKlxuICogRW1pdHRlZCB3aGVuIGEgZHJhZ2dpbmcgb3BlcmF0aW9uIGlzIHN0YXJ0aW5nICh3aGVuIHRoZSByb3cgaXMgXCJwaWNrZWRcIilcbiAqIFRoZSBldmVudCBpcyBjYW5jZWxhYmxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJvd0RyYWdTdGFydEV2ZW50QXJncyBleHRlbmRzIENhbmNlbGFibGVFdmVudEFyZ3MsIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgZHJhZyBkaXJlY3RpdmUgb3IgaW5mb3JtYXRpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBkcmFnIG9wZXJhdGlvbiAqL1xuICAgIGRyYWdEaXJlY3RpdmU6IGFueTtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgaW5mb3JtYXRpb24gb2YgdGhlIHJvdyB0aGF0IGlzIGJlaW5nIGRyYWdnZWQuICovXG4gICAgZHJhZ0RhdGE6IFJvd1R5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIEhUTUwgZWxlbWVudCBpdHNlbGYgKi9cbiAgICBkcmFnRWxlbWVudDogSFRNTEVsZW1lbnQ7XG59XG5cbi8qKiBSZXByZXNlbnRzIGV2ZW50IGFyZ3VtZW50cyByZWxhdGVkIHRvIHRoZSByb3cncyBleHBhbnNpb24gc3RhdGUgYmVpbmcgY2hhbmdlZCBpbiBhIGdyaWQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJvd1RvZ2dsZUV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBJRCBvZiB0aGUgcm93IHRoYXQgZW1pdHRlZCB0aGUgZXZlbnQgKHdoaWNoIHN0YXRlIGlzIGNoYW5nZWQpXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxNy4xLjAuIFVzZSB0aGUgYHJvd0tleWAgcHJvcGVydHkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICByb3dJRDogYW55O1xuICAgIHJvd0tleTogYW55O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHN0YXRlIG9mIHRoZSByb3cgYWZ0ZXIgdGhlIG9wZXJhdGlvbiBoYXMgZW5kZWRcbiAgICAgKiBJbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHJvdyBpcyBiZWluZyBleHBhbmRlZCAodHJ1ZSkgb3IgY29sbGFwc2VkIChmYWxzZSlcbiAgICAgKi9cbiAgICBleHBhbmRlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFJlcHJlc2VudHMgdGhlIG9yaWdpbmFsIGV2ZW50LCB0aGF0IGhhcyB0cmlnZ2VyZWQgdGhlIGV4cGFuc2lvbi9jb2xsYXBzZVxuICAgICAqL1xuICAgIGV2ZW50PzogRXZlbnQ7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IGlzIGNhbmNlbGFibGVcbiAgICAgKiBgY2FuY2VsYCByZXR1cm5zIHdoZXRoZXIgdGhlIGV2ZW50IGhhcyBiZWVuIGludGVyY2VwdGVkIGFuZCBzdG9wcGVkXG4gICAgICogSWYgdGhlIHZhbHVlIGJlY29tZXMgXCJ0cnVlXCIsIGl0IHJldHVybnMvZXhpdHMgZnJvbSB0aGUgbWV0aG9kLCBpbnN0YW50aWF0aW5nIHRoZSBpbnRlcmZhY2VcbiAgICAgKi9cbiAgICBjYW5jZWw6IGJvb2xlYW47XG59XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGEgcm93J3MgcGluIHN0YXRlIGNoYW5nZXMuXG4gKiBUaGUgZXZlbnQgaXMgY2FuY2VsYWJsZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIElQaW5Sb3dFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncywgQ2FuY2VsYWJsZUV2ZW50QXJncyB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIHRoZSByb3csIHRoYXQgd2FzIHBpbm5lZC91bnBpbm5lZC5cbiAgICAgKiBJRCBpcyBlaXRoZXIgdGhlIHByaW1hcnlLZXkgdmFsdWUgb3IgdGhlIGRhdGEgcmVjb3JkIGluc3RhbmNlLlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMTcuMS4wLiBVc2UgdGhlIGByb3dLZXlgIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgcm93SUQ6IGFueTtcbiAgICByZWFkb25seSByb3dLZXk6IGFueTtcbiAgICByb3c/OiBSb3dUeXBlO1xuICAgIC8qKiBUaGUgaW5kZXggYXQgd2hpY2ggdG8gcGluIHRoZSByb3cgaW4gdGhlIHBpbm5lZCByb3dzIGNvbGxlY3Rpb24uICovXG4gICAgaW5zZXJ0QXRJbmRleD86IG51bWJlcjtcbiAgICAvKiogV2hldGhlciBvciBub3QgdGhlIHJvdyBpcyBwaW5uZWQgb3IgdW5waW5uZWQuICovXG4gICAgcmVhZG9ubHkgaXNQaW5uZWQ6IGJvb2xlYW47XG59XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGEgZ3JpZCBpcyBzY3JvbGxlZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJR3JpZFNjcm9sbEV2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzIHtcbiAgICAvKiogVGhlIHNjcm9sbCBkaXJlY3Rpb24gLSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsLiAqL1xuICAgIGRpcmVjdGlvbjogc3RyaW5nO1xuICAgIC8qKiBUaGUgb3JpZ2luYWwgYnJvd3NlciBzY3JvbGwgZXZlbnQuICovXG4gICAgZXZlbnQ6IEV2ZW50O1xuICAgIC8qKiBUaGUgbmV3IHNjcm9sbCBwb3NpdGlvbiAqL1xuICAgIHNjcm9sbFBvc2l0aW9uOiBudW1iZXI7XG59XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGEgY2hlY2tib3ggaW4gdGhlIGNoZWNrYm94XG4gKiBsaXN0IG9mIGFuIElneENvbHVtbkFjdGlvbnMgY29tcG9uZW50IGlzIGNsaWNrZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbHVtblRvZ2dsZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIFRoZSBjb2x1bW4gdGhhdCBpcyB0b2dnbGVkLiAqL1xuICAgIGNvbHVtbjogQ29sdW1uVHlwZTtcbiAgICAvKiogVGhlIGNoZWNrZWQgc3RhdGUgYWZ0ZXIgdGhlIGFjdGlvbi4gKi9cbiAgICBjaGVja2VkOiBib29sZWFuO1xufVxuXG4vKiogRW1pdHRlZCB3aGVuIHRoZSBhY3RpdmUgbm9kZSBpcyBjaGFuZ2VkICovXG5leHBvcnQgaW50ZXJmYWNlIElBY3RpdmVOb2RlQ2hhbmdlRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSByb3cgaW5kZXggb2YgdGhlIGFjdGl2ZSBub2RlICovXG4gICAgcm93OiBudW1iZXI7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGNvbHVtbiBpbmRleCBvZiB0aGUgYWN0aXZlIG5vZGUgKi9cbiAgICBjb2x1bW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFJlcHJlc2VudHMgdGhlIGhpZXJhcmNoaWNhbCBsZXZlbCBvZiB0aGUgYWN0aXZlIG5vZGVcbiAgICAgKi9cbiAgICBsZXZlbD86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSB0eXBlIG9mIHRoZSBhY3RpdmUgbm9kZS5cbiAgICAgKiBUaGUgR3JpZEtleWRvd25UYXJnZXRUeXBlIGlzIGFuIGVudW0gb3IgdGhhdCBzcGVjaWZpZXMgdGhlIHBvc3NpYmxlIHRhcmdldCB0eXBlc1xuICAgICAqL1xuICAgIHRhZzogR3JpZEtleWRvd25UYXJnZXRUeXBlO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gc29ydGluZyBhbmQgZ3JvdXBpbmcgb3BlcmF0aW9uc1xuICogVGhlIGV2ZW50IGlzIGNhbmNlbGFibGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU29ydGluZ0V2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFJlcHJlc2VudHMgdGhlIHNvcnRpbmcgZXhwcmVzc2lvbnMgYXBwbGllZCB0byB0aGUgZ3JpZC5cbiAgICAgKiBJdCBjYW4gYmUgYSBzaW5nbGUgc29ydGluZyBleHByZXNzaW9uIG9yIGFuIGFycmF5IG9mIHRoZW1cbiAgICAgKiBUaGUgZXhwcmVzc2lvbiBjb250YWlucyBpbmZvcm1hdGlvbiBsaWtlIGZpbGUgbmFtZSwgd2hldGhlciB0aGUgbGV0dGVyIGNhc2Ugc2hvdWxkIGJlIHRha2VuIGludG8gYWNjb3VudCwgZXRjLlxuICAgICAqL1xuICAgIHNvcnRpbmdFeHByZXNzaW9ucz86IElTb3J0aW5nRXhwcmVzc2lvbiB8IEFycmF5PElTb3J0aW5nRXhwcmVzc2lvbj47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBncm91cGluZyBleHByZXNzaW9ucyBhcHBsaWVkIHRvIHRoZSBncmlkLlxuICAgICAqIEl0IGNhbiBiZSBhIHNpbmdsZSBncm91cGluZyBleHByZXNzaW9uIG9yIGFuIGFycmF5IG9mIHRoZW1cbiAgICAgKiBUaGUgZXhwcmVzc2lvbiBjb250YWlucyBpbmZvcm1hdGlvbiBsaWtlIHRoZSBzb3J0aW5nIGV4cHJlc3Npb24gYW5kIGNyaXRlcmlhIGJ5IHdoaWNoIHRoZSBlbGVtZW50cyB3aWxsIGJlIGdyb3VwZWRcbiAgICAgKi9cbiAgICBncm91cGluZ0V4cHJlc3Npb25zPzogSUdyb3VwaW5nRXhwcmVzc2lvbiB8IEFycmF5PElHcm91cGluZ0V4cHJlc3Npb24+O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgZXZlbnQgYXJndW1lbnRzIHJlbGF0ZWQgdG8gZmlsdGVyaW5nIG9wZXJhdGlvbnNcbiAqIFRoZSBldmVudCBpcyBjYW5jZWxhYmxlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpbHRlcmluZ0V2ZW50QXJncyBleHRlbmRzIElCYXNlRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIHtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIHRoZSBmaWx0ZXJpbmcgZXhwcmVzc2lvbnMgYXBwbGllZCB0byB0aGUgZ3JpZC5cbiAgICAgKiBUaGUgZXhwcmVzc2lvbiBjb250YWlucyBpbmZvcm1hdGlvbiBsaWtlIGZpbHRlcmluZyBvcGVyYW5kcyBhbmQgb3BlcmF0b3IsIGFuIGV4cHJlc3Npb24gb3IgY29uZGl0aW9uLCBldGMuXG4gICAgICovXG4gICAgZmlsdGVyaW5nRXhwcmVzc2lvbnM6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU7XG59XG5cbi8qKiBUaGUgZXZlbnQgYXJndW1lbnRzIGFmdGVyIGEgY29sdW1uJ3MgdmlzaWJpbGl0eSBpcyBjaGFuZ2VkLiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uVmlzaWJpbGl0eUNoYW5nZWRFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGNvbHVtbiB0aGUgZXZlbnQgb3JpZ2luYXRlZCBmcm9tICovXG4gICAgY29sdW1uOiBhbnk7XG4gICAgLyoqXG4gICAgICogVGhlIG5ldyBoaWRkZW4gc3RhdGUgdGhhdCB0aGUgY29sdW1uIHdpbGwgaGF2ZSwgaWYgb3BlcmF0aW9uIGlzIHN1Y2Nlc3NmdWwuXG4gICAgICogV2lsbCBiZSBgdHJ1ZWAgd2hlbiBoaWRpbmcgYW5kIGBmYWxzZWAgd2hlbiBzaG93aW5nLlxuICAgICAqL1xuICAgIG5ld1ZhbHVlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRoZSBldmVudCBhcmd1bWVudHMgd2hlbiBhIGNvbHVtbidzIHZpc2liaWxpdHkgaXMgY2hhbmdlZC5cbiAqIFRoZSBldmVudCBpcyBjYW5jZWxhYmxlXG4gKiBJdCBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY29sdW1uIGFuZCB0aGUgaXQncyB2aXNpYmlsaXR5IGFmdGVyIHRoZSBvcGVyYXRpb24gKHdpbGwgYmUgYHRydWVgIHdoZW4gaGlkaW5nIGFuZCBgZmFsc2VgIHdoZW4gc2hvd2luZylcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uVmlzaWJpbGl0eUNoYW5naW5nRXZlbnRBcmdzIGV4dGVuZHMgSUNvbHVtblZpc2liaWxpdHlDaGFuZ2VkRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIHtcbn1cblxuIl19