import { InjectionToken } from '@angular/core';
export const IGX_GRID_BASE = /*@__PURE__*/ new InjectionToken('IgxGridBaseToken');
export const IGX_GRID_SERVICE_BASE = /*@__PURE__*/ new InjectionToken('IgxGridServiceBaseToken');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5pbnRlcmZhY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29tbW9uL2dyaWQuaW50ZXJmYWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlBLE9BQU8sRUFBK0MsY0FBYyxFQUE0QyxNQUFNLGVBQWUsQ0FBQztBQTZCdEksTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLGFBQWEsQ0FBQSxJQUFJLGNBQWMsQ0FBVyxrQkFBa0IsQ0FBQyxDQUFDO0FBQzNGLE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLGFBQWEsQ0FBQSxJQUFJLGNBQWMsQ0FBa0IseUJBQXlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtblBpbm5pbmdQb3NpdGlvbiwgRmlsdGVyTW9kZSwgR3JpZFBhZ2luZ01vZGUsIEdyaWRTZWxlY3Rpb25Nb2RlLCBHcmlkU3VtbWFyeUNhbGN1bGF0aW9uTW9kZSwgR3JpZFN1bW1hcnlQb3NpdGlvbiwgR3JpZFZhbGlkYXRpb25UcmlnZ2VyLCBSb3dQaW5uaW5nUG9zaXRpb24sIFNpemUgfSBmcm9tICcuL2VudW1zJztcbmltcG9ydCB7XG4gICAgSVNlYXJjaEluZm8sIElHcmlkQ2VsbEV2ZW50QXJncywgSVJvd1NlbGVjdGlvbkV2ZW50QXJncywgSUNvbHVtblNlbGVjdGlvbkV2ZW50QXJncyxcbiAgICBJUGluQ29sdW1uQ2FuY2VsbGFibGVFdmVudEFyZ3MsIElDb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZEV2ZW50QXJncywgSUNvbHVtblZpc2liaWxpdHlDaGFuZ2luZ0V2ZW50QXJncyxcbiAgICBJUm93RHJhZ0VuZEV2ZW50QXJncywgSUNvbHVtbk1vdmluZ1N0YXJ0RXZlbnRBcmdzLCBJQ29sdW1uTW92aW5nRW5kRXZlbnRBcmdzLFxuICAgIElSb3dEYXRhRXZlbnRBcmdzLCBJR3JpZEtleWRvd25FdmVudEFyZ3MsIElSb3dEcmFnU3RhcnRFdmVudEFyZ3MsXG4gICAgSUNvbHVtbk1vdmluZ0V2ZW50QXJncywgSVBpbkNvbHVtbkV2ZW50QXJncyxcbiAgICBJQWN0aXZlTm9kZUNoYW5nZUV2ZW50QXJncyxcbiAgICBJQ2VsbFBvc2l0aW9uLCBJRmlsdGVyaW5nRXZlbnRBcmdzLCBJQ29sdW1uUmVzaXplRXZlbnRBcmdzLCBJUm93VG9nZ2xlRXZlbnRBcmdzLCBJR3JpZFRvb2xiYXJFeHBvcnRFdmVudEFyZ3MsIElQaW5Sb3dFdmVudEFyZ3MsXG4gICAgSUdyaWRSb3dFdmVudEFyZ3MsIElHcmlkRWRpdEV2ZW50QXJncywgSVJvd0RhdGFDYW5jZWxhYmxlRXZlbnRBcmdzLCBJR3JpZEVkaXREb25lRXZlbnRBcmdzLFxuICAgIElHcmlkQ29udGV4dE1lbnVFdmVudEFyZ3Ncbn0gZnJvbSAnLi4vY29tbW9uL2V2ZW50cyc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3Rpb25Ub2tlbiwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlLCBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9ucy10cmVlJztcbmltcG9ydCB7IElHcmlkUmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi4vLi4vY29yZS9pMThuL2dyaWQtcmVzb3VyY2VzJztcbmltcG9ydCB7IElHcm91cGluZ0V4cHJlc3Npb24gfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZ3JvdXBpbmctZXhwcmVzc2lvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSUdyb3VwQnlSZWNvcmQgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZ3JvdXBieS1yZWNvcmQuaW50ZXJmYWNlJztcbmltcG9ydCB7IElHcm91cEJ5RXhwYW5kU3RhdGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZ3JvdXBieS1leHBhbmQtc3RhdGUuaW50ZXJmYWNlJztcbmltcG9ydCB7IElneFBhZ2luYXRvckNvbXBvbmVudCB9IGZyb20gJy4uLy4uL3BhZ2luYXRvci9wYWdpbmF0b3IuY29tcG9uZW50JztcbmltcG9ydCB7IElneENlbGwsIElneEVkaXRSb3cgfSBmcm9tICcuL2NydWQuc2VydmljZSc7XG5pbXBvcnQgeyBHcmlkU2VsZWN0aW9uUmFuZ2UgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEZpbHRlcmluZ0xvZ2ljIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJRmlsdGVyaW5nU3RyYXRlZ3kgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLXN0cmF0ZWd5JztcbmltcG9ydCB7IERyb3BQb3NpdGlvbiwgSWd4Q29sdW1uTW92aW5nU2VydmljZSB9IGZyb20gJy4uL21vdmluZy9tb3Zpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBJZ3hPdmVybGF5T3V0bGV0RGlyZWN0aXZlLCBJZ3hUb2dnbGVEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RvZ2dsZS90b2dnbGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElUcmVlR3JpZFJlY29yZCB9IGZyb20gJy4uL3RyZWUtZ3JpZC90cmVlLWdyaWQuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBTdGF0ZSwgVHJhbnNhY3Rpb24sIFRyYW5zYWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RyYW5zYWN0aW9uL3RyYW5zYWN0aW9uJztcbmltcG9ydCB7IERhdGFUeXBlLCBHcmlkQ29sdW1uRGF0YVR5cGUgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZGF0YS11dGlsJztcbmltcG9ydCB7IElneEZpbHRlcmluZ09wZXJhbmQgfSBmcm9tICcuLi8uLi9kYXRhLW9wZXJhdGlvbnMvZmlsdGVyaW5nLWNvbmRpdGlvbic7XG5pbXBvcnQgeyBJQ29sdW1uUGlwZUFyZ3MsIElGaWVsZFBpcGVBcmdzLCBJU29ydGluZ09wdGlvbnMsIE1STFJlc2l6ZUNvbHVtbkluZm8gfSBmcm9tICcuLi9jb2x1bW5zL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSWd4U3VtbWFyeVJlc3VsdCB9IGZyb20gJy4uL3N1bW1hcmllcy9ncmlkLXN1bW1hcnknO1xuaW1wb3J0IHsgSVNvcnRpbmdFeHByZXNzaW9uLCBJU29ydGluZ1N0cmF0ZWd5LCBTb3J0aW5nRGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL3NvcnRpbmctc3RyYXRlZ3knO1xuaW1wb3J0IHsgSUdyaWRHcm91cGluZ1N0cmF0ZWd5LCBJR3JpZFNvcnRpbmdTdHJhdGVneSB9IGZyb20gJy4vc3RyYXRlZ3knO1xuaW1wb3J0IHsgSUZvck9mU3RhdGUsIElneEdyaWRGb3JPZkRpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgT3ZlcmxheVNldHRpbmdzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvb3ZlcmxheS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgSURpbWVuc2lvbnNDaGFuZ2UsIElQaXZvdENvbmZpZ3VyYXRpb24sIElQaXZvdERpbWVuc2lvbiwgSVBpdm90S2V5cywgSVBpdm90VmFsdWUsIElWYWx1ZXNDaGFuZ2UsIFBpdm90RGltZW5zaW9uVHlwZSwgSVBpdm90VUlTZXR0aW5ncyB9IGZyb20gJy4uL3Bpdm90LWdyaWQvcGl2b3QtZ3JpZC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgSURhdGFDbG9uZVN0cmF0ZWd5IH0gZnJvbSAnLi4vLi4vZGF0YS1vcGVyYXRpb25zL2RhdGEtY2xvbmUtc3RyYXRlZ3knO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElneEdyaWRWYWxpZGF0aW9uU2VydmljZSB9IGZyb20gJy4uL2dyaWQvZ3JpZC12YWxpZGF0aW9uLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgSUdYX0dSSURfQkFTRSA9IC8qQF9fUFVSRV9fKi9uZXcgSW5qZWN0aW9uVG9rZW48R3JpZFR5cGU+KCdJZ3hHcmlkQmFzZVRva2VuJyk7XG5leHBvcnQgY29uc3QgSUdYX0dSSURfU0VSVklDRV9CQVNFID0gLypAX19QVVJFX18qL25ldyBJbmplY3Rpb25Ub2tlbjxHcmlkU2VydmljZVR5cGU+KCdJZ3hHcmlkU2VydmljZUJhc2VUb2tlbicpO1xuXG4vKiogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBhIHNlZ21lbnQgb2YgYSBwYXRoIGluIGEgaGllcmFyY2hpY2FsIGdyaWQuICovXG5leHBvcnQgaW50ZXJmYWNlIElQYXRoU2VnbWVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSByb3cgd2l0aGluIHRoZSBzZWdtZW50LlxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMTcuMS4wLiBVc2UgdGhlIGByb3dLZXlgIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICovXG4gICAgcm93SUQ6IGFueTtcbiAgICByb3dLZXk6IGFueTtcbiAgICAvKiogVGhlIGtleSByZXByZXNlbnRpbmcgdGhlIHJvdydzICdoaWVyYXJjaGljYWwgbGV2ZWwuICovXG4gICAgcm93SXNsYW5kS2V5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWREYXRhQmluZGFibGUge1xuICAgIGRhdGE6IGFueVtdIHwgbnVsbDtcbiAgICBnZXQgZmlsdGVyZWREYXRhKCk6IGFueVtdO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgYSBjZWxsIGluIHRoZSBncmlkLiBJdCBpcyBlc3NlbnRpYWxseSB0aGUgYmx1ZXByaW50IHRvIGEgY2VsbCBvYmplY3QuXG4gKiBDb250YWlucyBkZWZpbml0aW9ucyBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLCByZWxldmFudCB0byBhIGNlbGxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDZWxsVHlwZSB7XG4gICAgLyoqIFRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBjZWxsLiAqL1xuICAgIHZhbHVlOiBhbnk7XG4gICAgLyoqIFRoZSB2YWx1ZSB0byBkaXNwbGF5IHdoZW4gdGhlIGNlbGwgaXMgaW4gZWRpdCBtb2RlLiAqL1xuICAgIGVkaXRWYWx1ZTogYW55O1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2VsbCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQuIEl0IGlzIGZhbHNlLCBpZiB0aGUgc2VsbCBpcyBub3Qgc2VsZWN0ZWQsIGFuZCB0cnVlLCBpZiBpdCBpcy4gKi9cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNlbGwgaXMgY3VycmVudGx5IGFjdGl2ZSAoZm9jdXNlZCkuICovXG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2VsbCBjYW4gYmUgZWRpdGVkLiAqL1xuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2VsbCBpcyBjdXJyZW50bHkgaW4gZWRpdCBtb2RlLiAqL1xuICAgIGVkaXRNb2RlOiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBuYXRpdmUgSFRNTCBlbGVtZW50IG9mIHRoZSBjZWxsIGl0c2VsZiAqL1xuICAgIG5hdGl2ZUVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgY29sdW1uIHRoYXQgdGhlIGNlbGwgYmVsb25ncyB0by4gKi9cbiAgICBjb2x1bW46IENvbHVtblR5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIHJvdyB0aGF0IHRoZSBjZWxsIGJlbG9uZ3MgdG8gKi9cbiAgICByb3c6IFJvd1R5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGdyaWQgaW5zdGFuY2UgY29udGFpbmluZyB0aGUgY2VsbCAqL1xuICAgIGdyaWQ6IEdyaWRUeXBlO1xuICAgIC8qKiBPcHRpb25hbDsgQW4gb2JqZWN0IGlkZW50aWZ5aW5nIHRoZSBjZWxsLiBJdCBjb250YWlucyByb3dJRCwgY29sdW1uSUQsIGFuZCByb3dJbmRleCBvZiB0aGUgY2VsbC4gKi9cbiAgICBpZD86IHsgcm93SUQ6IGFueTsgY29sdW1uSUQ6IG51bWJlcjsgcm93SW5kZXg6IG51bWJlciB9O1xuICAgIC8qKiBPcHRpb25hbDsgVGhlIGBjZWxsSURgIGlzIHRoZSB1bmlxdWUga2V5LCB1c2VkIHRvIGlkZW50aWZ5IHRoZSBjZWxsICovXG4gICAgY2VsbElEPzogYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsOyBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG9mIHRoZSBjZWxsLlxuICAgICAqIFdoZXRoZXIgaXQncyB2YWxpZCBvciBpbnZhbGlkLCBhbmQgaWYgaXQgaGFzIGVycm9yc1xuICAgICAqL1xuICAgIHJlYWRvbmx5IHZhbGlkYXRpb24/OiBJR3JpZFZhbGlkYXRpb25TdGF0ZTtcbiAgICByZWFkb25seT86IGJvb2xlYW47XG4gICAgLyoqIEFuIG9wdGlvbmFsIHRpdGxlIHRvIGRpc3BsYXkgZm9yIHRoZSBjZWxsICovXG4gICAgdGl0bGU/OiBhbnk7XG4gICAgLyoqIFRoZSBDU1Mgd2lkdGggb2YgdGhlIGNlbGwgYXMgYSBzdHJpbmcuICovXG4gICAgd2lkdGg6IHN0cmluZztcbiAgICAvKiogVGhlIGluZGV4IG9mIHRoZSBjb2x1bW4gdGhhdCB0aGUgY2VsbCBiZWxvbmdzIHRvLiBJdCBjb3VudHMgb25seSB0aGUgdmlzaWJsZSAobm90IGhpZGRlbikgY29sdW1ucyAqL1xuICAgIHZpc2libGVDb2x1bW5JbmRleD86IG51bWJlcjtcbiAgICAvKiogQSBtZXRob2QgZGVmaW5pdGlvbiB0byB1cGRhdGUgdGhlIHZhbHVlIG9mIHRoZSBjZWxsLiAqL1xuICAgIHVwZGF0ZTogKHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gICAgLyoqIEEgbWV0aG9kIGRlZmluaXRpb24gdG8gc3RhcnQgb3IgZW5kIHRoZSBlZGl0IG1vZGUgb2YgdGhlIGNlbGwuIEl0IHRha2VzIGEgYm9vbGVhbiB2YWx1ZSBhcyBhbiBhcmd1bWVudCovXG4gICAgc2V0RWRpdE1vZGU/KHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbDtcbiAgICAgKiBBIG1ldGhvZCBkZWZpbml0aW9uIHRvIGNhbGN1bGF0ZSB0aGUgc2l6ZSBvZiB0aGUgY2VsbCB0byBmaXQgdGhlIGNvbnRlbnRcbiAgICAgKiBUaGUgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgc2l6ZSBvZiB0aGUgY2VsbCB3aXRoIHRoZSBsb25nZXN0IGNvbnRlbnQgYW5kIHJlc2l6ZSBhbGwgY2VsbHMgdG8gdGhhdCBzaXplXG4gICAgICovXG4gICAgY2FsY3VsYXRlU2l6ZVRvRml0PyhyYW5nZTogYW55KTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gYWN0aXZhdGUgdGhlIGNlbGwuXG4gICAgICogSXQgdGFrZXMgYSBmb2N1cyBvciBrZXlib2FyZCBldmVudCBhcyBhbiBhcmd1bWVudFxuICAgICAqL1xuICAgIGFjdGl2YXRlPyhldmVudDogRm9jdXNFdmVudCB8IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gaGFuZGxlIGRvdWJsZS1jbGljayBldmVudHMgb24gdGhlIGNlbGxcbiAgICAgKiBJdCB0YWtlcyBhIG1vdXNlIGV2ZW50IGFzIGFuIGFyZ3VtZW50XG4gICAgICovXG4gICAgb25Eb3VibGVDbGljaz8oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIGV2ZW50cyBvbiB0aGUgY2VsbFxuICAgICAqIEl0IHRha2VzIGEgbW91c2UgZXZlbnQgYXMgYW4gYXJndW1lbnRcbiAgICAgKi9cbiAgICBvbkNsaWNrPyhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyBhIGhlYWRlciBjZWxsIGluIHRoZSBncmlkLiBJdCBpcyBlc3NlbnRpYWxseSB0aGUgYmx1ZXByaW50IHRvIGEgaGVhZGVyIGNlbGwgb2JqZWN0LlxuICogQ29udGFpbnMgZGVmaW5pdGlvbnMgb2YgcHJvcGVydGllcywgcmVsZXZhbnQgdG8gdGhlIGhlYWRlclxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhlYWRlclR5cGUge1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBuYXRpdmUgSFRNTCBlbGVtZW50IG9mIHRoZSBjZWxsIGl0c2VsZiAqL1xuICAgIG5hdGl2ZUVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICAgIC8qKiBUaGUgY29sdW1uIHRoYXQgdGhlIGhlYWRlciBjZWxsIHJlcHJlc2VudHMuICovXG4gICAgY29sdW1uOiBDb2x1bW5UeXBlO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY29sdW1uIGlzIGN1cnJlbnRseSBzb3J0ZWQuICovXG4gICAgc29ydGVkOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2VsbCBjYW4gYmUgc2VsZWN0ZWQgKi9cbiAgICBzZWxlY3RhYmxlOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY2VsbCBpcyBjdXJyZW50bHkgc2VsZWN0ZWQgKi9cbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGNvbHVtbiBoZWFkZXIgaXMgYSB0aXRsZSBjZWxsLiAqL1xuICAgIHRpdGxlOiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBzb3J0aW5nIGRpcmVjdGlvbiBvZiB0aGUgY29sdW1uIChhc2NlbmRpbmcsIGRlc2NlbmRpbmcgb3Igbm9uZSkuICovXG4gICAgc29ydERpcmVjdGlvbjogU29ydGluZ0RpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBJbnRlcmZhY2UgcmVwcmVzZW50aW5nIGEgcm93IGluIHRoZSBncmlkLiBJdCBpcyBlc3NlbnRpYWxseSB0aGUgYmx1ZXByaW50IHRvIGEgcm93IG9iamVjdC5cbiAqIENvbnRhaW5zIGRlZmluaXRpb25zIG9mIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMsIHJlbGV2YW50IHRvIGEgcm93XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm93VHlwZSB7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIG5hdGl2ZSBIVE1MIGVsZW1lbnQgb2YgdGhlIHJvdyBpdHNlbGYgKi9cbiAgICBuYXRpdmVFbGVtZW50PzogSFRNTEVsZW1lbnQ7XG4gICAgLyoqIFRoZSBpbmRleCBvZiB0aGUgcm93IHdpdGhpbiB0aGUgZ3JpZCAqL1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgdmlld0luZGV4OiBudW1iZXI7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSByb3cgaXMgZ3JvdXBlZC4gKi9cbiAgICBpc0dyb3VwQnlSb3c/OiBib29sZWFuO1xuICAgIGlzU3VtbWFyeVJvdz86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBBIG1hcCBvZiBjb2x1bW4gZmllbGQgbmFtZXMgdG8gdGhlIHN1bW1hcnkgcmVzdWx0cyBmb3IgdGhlIHJvdy5cbiAgICAgKi9cbiAgICBzdW1tYXJpZXM/OiBNYXA8c3RyaW5nLCBJZ3hTdW1tYXJ5UmVzdWx0W10+O1xuICAgIGdyb3VwUm93PzogSUdyb3VwQnlSZWNvcmQ7XG4gICAga2V5PzogYW55O1xuICAgIHJlYWRvbmx5IHZhbGlkYXRpb24/OiBJR3JpZFZhbGlkYXRpb25TdGF0ZTtcbiAgICBkYXRhPzogYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBsaXN0IG9yIGFuIGFycmF5IG9mIGNlbGxzLCB0aGF0IGJlbG9uZyB0byB0aGUgcm93XG4gICAgICovXG4gICAgY2VsbHM/OiBRdWVyeUxpc3Q8Q2VsbFR5cGU+IHwgQ2VsbFR5cGVbXTtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjdXJyZW50IHJvdyBpcyBkaXNhYmxlZFxuICAgICAqL1xuICAgIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFZpcnR1YWxpemF0aW9uIHN0YXRlIG9mIGRhdGEgcmVjb3JkIGFkZGVkIGZyb20gY2FjaGVcbiAgICAgKi9cbiAgICB2aXJ0RGlyUm93PzogSWd4R3JpZEZvck9mRGlyZWN0aXZlPENvbHVtblR5cGUsIENvbHVtblR5cGVbXT47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCByb3cgaXMgcGlubmVkLlxuICAgICAqL1xuICAgIHBpbm5lZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCByb3cgaXMgc2VsZWN0ZWRcbiAgICAgKi9cbiAgICBzZWxlY3RlZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCByb3cgaXMgZXhwYW5kZWQuXG4gICAgICogVGhlIHZhbHVlIGlzIHRydWUsIGlmIHRoZSByb3cgaXMgZXhwYW5kZWQgYW5kIGZhbHNlLCBpZiBpdCBpcyBjb2xsYXBzZWRcbiAgICAgKi9cbiAgICBleHBhbmRlZD86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcm93IGlzIG1hcmtlZCBmb3IgZGVsZXRpb24uXG4gICAgICovXG4gICAgZGVsZXRlZD86IGJvb2xlYW47XG4gICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJvdyBpcyBjdXJyZW50bHkgYmVpbmcgZWRpdGVkLlxuICAgICAqL1xuICAgIGluRWRpdE1vZGU/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQ29udGFpbnMgdGhlIGNoaWxkIHJvd3Mgb2YgdGhlIGN1cnJlbnQgcm93LCBpZiB0aGVyZSBhcmUgYW55LlxuICAgICAqL1xuICAgIGNoaWxkcmVuPzogUm93VHlwZVtdO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQ29udGFpbnMgdGhlIHBhcmVudCByb3cgb2YgdGhlIGN1cnJlbnQgcm93LCBpZiBpdCBoYXMgb25lLlxuICAgICAqIElmIHRoZSBwYXJlbnQgcm93IGV4aXN0LCBpdCBtZWFucyB0aGF0IHRoZSBjdXJyZW50IHJvdyBpcyBhIGNoaWxkIHJvd1xuICAgICAqL1xuICAgIHBhcmVudD86IFJvd1R5cGU7XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVudCByb3cgaGFzIGFueSBjaGlsZCByb3dzXG4gICAgICovXG4gICAgaGFzQ2hpbGRyZW4/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogUmVwcmVzZW50cyB0aGUgaGllcmFyY2hpY2FsIHJlY29yZCBhc3NvY2lhdGVkIHdpdGggdGhlIHJvdyAoZm9yIHRyZWUgZ3JpZHMpLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgSVRyZWVHcmlkUmVjb3JkLCB3aGljaCBjb250YWlucyB0aGUgZGF0YSwgY2hpbGRyZW4sIHRoZSBoaWVyYXJjaGljYWwgbGV2ZWwsIGV0Yy5cbiAgICAgKi9cbiAgICB0cmVlUm93PzogSVRyZWVHcmlkUmVjb3JkO1xuICAgIGFkZFJvd1VJPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSByb3cgaXMgY3VycmVudGx5IGZvY3VzZWQuXG4gICAgICovXG4gICAgZm9jdXNlZD86IGJvb2xlYW47XG4gICAgLyoqIFJlcHJlc2VudCB0aGUgZ3JpZCBpbnN0YW5jZSwgdGhlIHJvdyBiZWxvbmdzIHRvICovXG4gICAgZ3JpZDogR3JpZFR5cGU7XG4gICAgb25Sb3dTZWxlY3RvckNsaWNrPzogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gaGFuZGxlIGNsaWNrIGV2ZW50IG9uIHRoZSByb3dcbiAgICAgKiBJdCB0YWtlcyBhIGBNb3VzZUV2ZW50YCBhcyBhbiBhcmd1bWVudFxuICAgICAqL1xuICAgIG9uQ2xpY2s/OiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBBIG1ldGhvZCB0byBoYW5kbGUgYWRkaW5nIGEgbmV3IHJvd1xuICAgICAqL1xuICAgIGJlZ2luQWRkUm93PzogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIEEgbWV0aG9kIHRvIGhhbmRsZSBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgZWxlbWVudHMgb2YgdGhlIHJvd1xuICAgICAqIEl0IHRha2VzIHRoZSBuZXcgdmFsdWUgYXMgYW4gYXJndW1lbnRcbiAgICAgKi9cbiAgICB1cGRhdGU/OiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIEEgbWV0aG9kIHRvIGhhbmRsZSBkZWxldGluZyByb3dzXG4gICAgICovXG4gICAgZGVsZXRlPzogKCkgPT4gYW55O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gaGFuZGxlIHBpbm5pbmcgYSByb3dcbiAgICAgKi9cbiAgICBwaW4/OiAoKSA9PiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogQSBtZXRob2QgdG8gaGFuZGxlIHVucGlubmluZyBhIHJvdywgdGhhdCBoYXMgYmVlbiBwaW5uZWRcbiAgICAgKi9cbiAgICB1bnBpbj86ICgpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRUeXBlIHtcbiAgICBsYWJlbD86IHN0cmluZztcbiAgICBmaWVsZDogc3RyaW5nO1xuICAgIGhlYWRlcj86IHN0cmluZztcbiAgICBkYXRhVHlwZTogRGF0YVR5cGU7XG4gICAgZmlsdGVyczogSWd4RmlsdGVyaW5nT3BlcmFuZDtcbiAgICBwaXBlQXJnczogSUZpZWxkUGlwZUFyZ3M7XG4gICAgZGVmYXVsdFRpbWVGb3JtYXQ6IHN0cmluZztcbiAgICBkZWZhdWx0RGF0ZVRpbWVGb3JtYXQ6IHN0cmluZztcblxuICAgIGZvcm1hdHRlcih2YWx1ZTogYW55LCByb3dEYXRhPzogYW55KTogYW55O1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb2x1bW4gaW4gdGhlIGBHcmlkVHlwZWAuIEl0IGlzIGVzc2VudGlhbGx5IHRoZSBibHVlcHJpbnQgdG8gYSBjb2x1bW4gb2JqZWN0LlxuICogQ29udGFpbnMgZGVmaW5pdGlvbnMgb2YgcHJvcGVydGllcyBhbmQgbWV0aG9kcywgcmVsZXZhbnQgdG8gYSBjb2x1bW5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb2x1bW5UeXBlIGV4dGVuZHMgRmllbGRUeXBlIHtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgaW5zdGFuY2Ugb2YgdGhlIHBhcmVudCBgR3JpZFR5cGVgIHRoYXQgY29udGFpbnMgdGhpcyBjb2x1bW4uICovXG4gICAgZ3JpZDogR3JpZFR5cGU7XG4gICAgLyoqIEEgbGlzdCwgY29udGFpbmluZyBhbGwgdGhlIGNoaWxkIGNvbHVtbnMgdW5kZXIgdGhpcyBjb2x1bW4gKGlmIGFueSkuICovXG4gICAgY2hpbGRyZW46IFF1ZXJ5TGlzdDxDb2x1bW5UeXBlPjtcbiAgICAvKiogQW4gYXJyYXksIGNvbnRhaW5pbmcgYWxsIHRoZSBjaGlsZCBjb2x1bW5zLCBpbmNsdWRpbmcgbmVzdGVkIGNoaWxkcmVuLiAqL1xuICAgIGFsbENoaWxkcmVuOiBDb2x1bW5UeXBlW107XG4gICAgLyoqXG4gICAgICogVGhlIGhlYWRlciBncm91cCBjb21wb25lbnQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29sdW1uLlxuICAgICAqIENvdWxkIGJlIG9mIGFueSB0eXBlXG4gICAgKi9cbiAgICAvLyBUWVBFXG4gICAgaGVhZGVyR3JvdXA6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgaGVhZGVyIGNlbGwgY29tcG9uZW50IGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbHVtbi5cbiAgICAgKiBDb3VsZCBiZSBvZiBhbnkgdHlwZVxuICAgICAqL1xuICAgIC8vIFRZUEVcbiAgICBoZWFkZXJDZWxsOiBhbnk7XG4gICAgdmFsaWRhdG9yczogYW55W107XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgcmVmZXJlbmNlIGZvciB0aGUgY3VzdG9tIGhlYWRlciBvZiB0aGUgY29sdW1uXG4gICAgICogSXQgaXMgb2YgdHlwZSBUZW1wbGF0ZVJlZiwgd2hpY2ggcmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSwgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3c1xuICAgICAqL1xuICAgIGhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSByZWZlcmVuY2UgZm9yIHRoZSBjb2xsYXBzaWJsZSBpbmRpY2F0b3Igb2YgdGhlIGNvbHVtbi5cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgY29sbGFwc2libGVJbmRpY2F0b3JUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqIFJlcHJlc2VudHMgY3VzdG9tIENTUyBjbGFzc2VzIGFwcGxpZWQgdG8gdGhlIGhlYWRlciBlbGVtZW50LiBXaGVuIGFkZGVkLCB0aGV5IHRha2UgZGlmZmVyZW50IHN0eWxpbmcgKi9cbiAgICBoZWFkZXJDbGFzc2VzOiBhbnk7XG4gICAgLyoqIFJlcHJlc2VudHMgY3VzdG9tIENTUyBzdHlsZXMgYXBwbGllZCB0byB0aGUgaGVhZGVyIGVsZW1lbnQuIFdoZW4gYWRkZWQsIHRoZXkgdGFrZSBkaWZmZXJlbnQgc3R5bGluZyAqL1xuICAgIGhlYWRlclN0eWxlczogYW55O1xuICAgICAvKiogUmVwcmVzZW50cyBjdXN0b20gQ1NTIGNsYXNzZXMgYXBwbGllZCB0byB0aGUgaGVhZGVyIGdyb3VwLiBXaGVuIGFkZGVkLCB0aGV5IHRha2UgZGlmZmVyZW50IHN0eWxpbmcgKi9cbiAgICBoZWFkZXJHcm91cENsYXNzZXM6IGFueTtcbiAgICAgLyoqIFJlcHJlc2VudHMgY3VzdG9tIENTUyBzdHlsZXMgYXBwbGllZCB0byB0aGUgaGVhZGVyIGdyb3VwLiBXaGVuIGFkZGVkLCB0aGV5IHRha2UgZGlmZmVyZW50IHN0eWxpbmcgKi9cbiAgICBoZWFkZXJHcm91cFN0eWxlczogYW55O1xuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIENTUyBzdHlsaW5nLCBhcHBsaWVkIHRvIGV2ZXJ5IGNvbHVtblxuICAgICAqIGNhbGNXaWR0aCwgbWluV2lkdGhQeCwgbWF4V2lkdGhQeCwgbWluV2lkdGgsIG1heFdpZHRoLCBtaW5XaWR0aFBlcmNlbnQsIG1heFdpZHRoUGVyY2VudCwgcmVzb2x2ZWRXaWR0aFxuICAgICAqL1xuICAgIGNhbGNXaWR0aDogYW55O1xuICAgIG1pbldpZHRoUHg6IG51bWJlcjtcbiAgICBtYXhXaWR0aFB4OiBudW1iZXI7XG4gICAgbWluV2lkdGg6IHN0cmluZztcbiAgICBtYXhXaWR0aDogc3RyaW5nO1xuICAgIG1pbldpZHRoUGVyY2VudDogbnVtYmVyO1xuICAgIG1heFdpZHRoUGVyY2VudDogbnVtYmVyO1xuICAgIHJlc29sdmVkV2lkdGg6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogUmVwcmVzZW50cyB0aGUgaGVhZGVyIHRleHQgb2YgdGhlIGNvbHVtblxuICAgICAqL1xuICAgIGhlYWRlcj86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGNvbHVtbiB3aXRoaW4gdGhlIGdyaWQuXG4gICAgICogSW5jbHVkZXMgdGhlIGhpZGRlbiBjb2x1bW5zIHdoZW4gY291bnRpbmdcbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgZGF0YSBmb3IgdGhlIGNvbHVtbjpcbiAgICAgKiBzdHJpbmcsIG51bWJlciwgYm9vbGVhbiwgY3VycmVuY3ksIGRhdGUsIHRpbWUsIGV0Yy5cbiAgICAgKi9cbiAgICBkYXRhVHlwZTogR3JpZENvbHVtbkRhdGFUeXBlO1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSByZWZlcmVuY2UgZm9yIHRoZSBjdXN0b20gaW5saW5lIGVkaXRvciBvZiB0aGUgY29sdW1uXG4gICAgICogSXQgaXMgb2YgdHlwZSBUZW1wbGF0ZVJlZiwgd2hpY2ggcmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSwgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3c1xuICAgICAqL1xuICAgIGlubGluZUVkaXRvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFRoZSBpbmRleCBvZiB0aGUgY29sdW1uIHdpdGhpbiB0aGUgZ3JpZC5cbiAgICAgKiBEb2VzIG5vdCBpbmNsdWRlIHRoZSBoaWRkZW4gY29sdW1ucyB3aGVuIGNvdW50aW5nXG4gICAgICovXG4gICAgdmlzaWJsZUluZGV4OiBudW1iZXI7XG4gICAgLyoqIE9wdGlvbmFsXG4gICAgICogSW5kaWNhdGVkIHdoZXRoZXIgdGhlIGNvbHVtbiBjYW4gYmUgY29sbGFwc2VkLiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGNvbHVtbiBjYW4gYmUgY29sbGFwc2VkXG4gICAgICogSXQgaXMgdXNlZCBpbiB0cmVlIGdyaWQgYW5kIGZvciBuYXZpZ2F0aW9uXG4gICAgICovXG4gICAgY29sbGFwc2libGU/OiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZWQgd2hldGhlciB0aGUgY29sdW1uIGNhbiBiZSBlZGl0ZWQuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgY29sdW1uIGNhbiBiZSBlZGl0ZWQgKi9cbiAgICBlZGl0YWJsZTogYm9vbGVhbjtcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGNvbHVtbiBjYW4gYmUgcmVzaXplZC4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBjb2x1bW4gY2FuIGJlIHJlc2l6ZWQgKi9cbiAgICByZXNpemFibGU6IGJvb2xlYW47XG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBkYXRhIG9mIHRoZSBjb2x1bW4gY2FuIGJlIHNlYXJjaGVkLiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGNvbHVtbiBkYXRhIGNhbiBiZSBzZWFyY2hlZCAqL1xuICAgIHNlYXJjaGFibGU6IGJvb2xlYW47XG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSBjb2x1bW4gYmVsb25ncyB0byBhIGdyb3VwIG9mIGNvbHVtbnMuICovXG4gICAgY29sdW1uR3JvdXA6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGEgY29sdW1uIGNhbiBiZSBwdXQgaW4gYSBncm91cC4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBjb2x1bW4gY2FuIGJlIHB1dCBpbiBhIGdyb3VwICovXG4gICAgZ3JvdXBhYmxlOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciBhIGNvbHVtbiBjYW4gYmUgc29ydGVkLiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGNvbHVtbiBjYW4gYmUgc29ydGVkLiAqL1xuICAgIHNvcnRhYmxlOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciBhIGNvbHVtbiBjYW4gYmUgZmlsdGVyZWQuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgY29sdW1uIGNhbiBiZSBmaWx0ZXJlZCAqL1xuICAgIGZpbHRlcmFibGU6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGEgY29sdW1uIGlzIGN1cnJlbnRseSBoaWRkZW4gKG5vdCB2aXNpYmxlKS4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBjb2x1bW4gaXMgbm90IHZpc2libGUgKi9cbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGEgY29sdW1uIGNhbiBiZSBwaW5uZWQuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgY29sdW1uIGNhbm5vdCBiZSBwaW5uZWQgKi9cbiAgICBkaXNhYmxlUGlubmluZzogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgYSBjb2x1bW4gY2FuIGJlIGhpZGRlbi4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBjb2x1bW4gY2Fubm90IGJlIGhpZGRlbiAqL1xuICAgIGRpc2FibGVIaWRpbmc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVGhlIHNvcnRpbmcgc3RyYXRlZ3kgdXNlZCBmb3Igc29ydGluZyB0aGlzIGNvbHVtbi5cbiAgICAgKiBUaGUgaW50ZXJmYWNlIGNvbnRhaW5zIGEgbWV0aG9kIHNvcnQgdGhhdCBzb3J0cyB0aGUgcHJvdmlkZWQgZGF0YSBiYXNlZCBvbiB0aGUgZ2l2ZW4gc29ydGluZyBleHByZXNzaW9uc1xuICAgICAqL1xuICAgIHNvcnRTdHJhdGVneTogSVNvcnRpbmdTdHJhdGVneTtcbiAgICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHNlYXJjaCBzaG91bGQgbWF0Y2ggcmVzdWx0cywgbm8gbWF0dGVyIHRoZSBjYXNlIG9mIHRoZSBsZXR0ZXJzICh1cHBlciBhbmQgbG93ZXIpXG4gICAgICogSWYgdGhlIHZhbHVlIGlzIGZhbHNlLCB0aGUgcmVzdWx0IHdpbGwgZGVwZW5kIG9uIHRoZSBjYXNlIChleGFtcGxlOiBgRWAgd2lsbCBub3QgbWF0Y2ggYGVgKVxuICAgICAqIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgcmVzdWx0IHdpbGwgbm90IGRlcGVuZCBvbiB0aGUgY2FzZSAoZXhhbXBsZTogYEVgIHdpbGwgbWF0Y2ggYGVgKVxuICAgICAqL1xuICAgIHNvcnRpbmdJZ25vcmVDYXNlOiBib29sZWFuO1xuICAgIGZpbHRlckNlbGw6IGFueTtcbiAgICBmaWx0ZXJpbmdJZ25vcmVDYXNlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSBmaWx0ZXJpbmcgZXhwcmVzc2lvbnMgZm9yIHRoZSBjb2x1bW4uXG4gICAgICogVGhlIHR5cGUgY29udGFpbnMgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBmb3IgZmlsdGVyaW5nOiBmaWx0ZXJpbmdPcGVyYW5kcywgb3BlcmF0b3IgKGxvZ2ljKSwgZmllbGROYW1lLCBldGMuXG4gICAgICovXG4gICAgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlOiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU7XG4gICAgaGFzU3VtbWFyeTogYm9vbGVhbjtcbiAgICBzdW1tYXJpZXM6IGFueTtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgcmVmZXJlbmNlIGZvciBhIHN1bW1hcnkgb2YgdGhlIGNvbHVtblxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBzdW1tYXJ5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqIEluZGljYXRlcyBpZiB0aGUgY29sdW1uIGlzIGN1cnJlbnRseSBwaW5uZWQuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgY29sdW1uIGlzIHBpbm5lZCAqL1xuICAgIHBpbm5lZDogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIGlmIHRoZSBjb2x1bW4gaXMgY3VycmVudGx5IGV4cGFuZGVkIG9yIGNvbGxhcHNlZC4gSWYgdGhlIHZhbHVlIGlzIHRydWUsIHRoZSBjb2x1bW4gaXMgZXhwYW5kZWQgKi9cbiAgICBleHBhbmRlZDogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIGlmIHRoZSBjb2x1bW4gaXMgY3VycmVudGx5IHNlbGVjdGVkLiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGNvbHVtbiBpcyBzZWxlY3RlZCAqL1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgaWYgdGhlIGNvbHVtbiBjYW4gYmUgc2VsZWN0ZWQuIElmIHRoZSB2YWx1ZSBpcyB0cnVlLCB0aGUgY29sdW1uIGNhbiBiZSBzZWxlY3RlZCAqL1xuICAgIHNlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgY29sdW1uTGF5b3V0OiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBoaWVyYXJjaGljYWwgbGV2ZWwgb2YgdGhlIGNvbHVtbiBpbiB0aGUgY29sdW1uIGxheW91dCAqL1xuICAgIGxldmVsOiBudW1iZXI7XG4gICAgcm93U3RhcnQ6IG51bWJlcjtcbiAgICByb3dFbmQ6IG51bWJlcjtcbiAgICBjb2xTdGFydDogbnVtYmVyO1xuICAgIGNvbEVuZDogbnVtYmVyO1xuICAgIGdyaWRSb3dTcGFuOiBudW1iZXI7XG4gICAgZ3JpZENvbHVtblNwYW46IG51bWJlcjtcbiAgICBjb2x1bW5MYXlvdXRDaGlsZDogYm9vbGVhbjtcbiAgICB3aWR0aDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogVGhlIHJvb3QgcGFyZW50IG9mIHRoaXMgY29sdW1uIChpZiBhbnkpLlxuICAgICAqIElmIHRoZXJlIGlzIG5vIHJvb3QgcGFyZW50LCB0aGF0IG1lYW5zIHRoZSBjdXJyZW50IGNvbHVtbiBpcyB0aGUgcm9vdCBwYXJlbnRcbiAgICAgKi9cbiAgICB0b3BMZXZlbFBhcmVudD86IENvbHVtblR5cGU7XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBUaGUgaW1tZWRpYXRlIHBhcmVudCAocmlnaHQgYWJvdmUpIGNvbHVtbiBvZiB0aGlzIGNvbHVtbiAoaWYgYW55KS5cbiAgICAgKiBJZiB0aGVyZSBpcyBubyBwYXJlbnQsIHRoYXQgbWVhbnMgdGhlIGN1cnJlbnQgY29sdW1uIGlzIHRoZSByb290IHBhcmVudFxuICAgICAqL1xuICAgIHBhcmVudD86IENvbHVtblR5cGU7XG4gICAgcGlwZUFyZ3M6IElDb2x1bW5QaXBlQXJncztcbiAgICBoYXNOZXN0ZWRQYXRoOiBib29sZWFuO1xuICAgIGFkZGl0aW9uYWxUZW1wbGF0ZUNvbnRleHQ6IGFueTtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGN1cnJlbnQgY29sdW1uIGlzIHRoZSBsYXN0IHRvIGJlIHBpbm5lZC5cbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgZmFsc2UsIHRoZXJlIGFyZSBjb2x1bW5zLCB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgKi9cbiAgICBpc0xhc3RQaW5uZWQ6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBjdXJyZW50IGNvbHVtbiBpcyB0aGUgZmlyc3QgZm9yIHRoZSBncmlkIHRvIGJlIHBpbm5lZC5cbiAgICAgKiBJZiB0aGUgdmFsdWUgaXMgZmFsc2UsIHRoZXJlIGFyZSBjb2x1bW5zLCB0aGF0IGhhdmUgYmVlbiBwaW5uZWQgYmVmb3JlIHRoZSBjdXJyZW50ICovXG4gICAgaXNGaXJzdFBpbm5lZDogYm9vbGVhbjtcbiAgICBhcHBseVNlbGVjdGFibGVDbGFzczogYm9vbGVhbjtcbiAgICAvKiogVGhlIHRpdGxlIG9mIHRoZSBjb2x1bW4sIHVzZWQgZm9yIGFjY2Vzc2liaWxpdHkgcHVycG9zZXMgKi9cbiAgICB0aXRsZTogc3RyaW5nO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIHdpdGggY3VzdG9tIGdyb3VwaW5nIGNvbXBhcmF0b3IgdG8gZGV0ZXJtaW5lIHRoZSBtZW1iZXJzIG9mIHRoZSBncm91cC4gKi9cbiAgICBncm91cGluZ0NvbXBhcmVyOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBjdXN0b20gdGVtcGxhdGUgZm9yIGZpbHRlcmluZ1xuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBmaWx0ZXJDZWxsVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBBIG1ldGhvZCBkZWZpbml0aW9uIHRvIG1vdmUgdGhlIGNvbHVtbiB0byB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgICAqIEl0IHRha2VzIHRoZSBpbmRleCBvZiB0eXBlIG51bWJlciBhcyBhIHBhcmFtZXRlclxuICAgICovXG4gICAgbW92ZShpbmRleDogbnVtYmVyKTogdm9pZDtcbiAgICAvKiogQSBtZXRob2QgZGVmaW5pdGlvbiB0byByZXRyaWV2ZSB0aGUgc2V0IENTUyBzaXplICovXG4gICAgZ2V0QXV0b1NpemUoKTogc3RyaW5nO1xuICAgIGdldFJlc2l6YWJsZUNvbFVuZGVyRW5kKCk6IE1STFJlc2l6ZUNvbHVtbkluZm9bXTtcbiAgICAvKiogQSBtZXRob2QgZGVmaW5pdGlvbiB0byByZXRyaWV2ZSB0aGUgc2V0IENTUyB3aWR0aCBvZiB0aGUgY2VsbHMgdW5kZXIgdGhlIGNvbHVtbiAqL1xuICAgIGdldENlbGxXaWR0aCgpOiBzdHJpbmc7XG4gICAgZ2V0R3JpZFRlbXBsYXRlKGlzUm93OiBib29sZWFuKTogc3RyaW5nO1xuICAgIC8qKiBBIG1ldGhvZCBkZWZpbml0aW9uIHRvIHRvZ2dsZSBjb2x1bW4gdmlzaWJpbGl0eSAoaGlkZGVuIG9yIHZpc2libGUpICovXG4gICAgdG9nZ2xlVmlzaWJpbGl0eSh2YWx1ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHBvcHVsYXRlVmlzaWJsZUluZGV4ZXM/KCk6IHZvaWQ7XG4gICAgLyoqIFBpbnMgdGhlIGNvbHVtbiBhdCB0aGUgc3BlY2lmaWVkIGluZGV4IChpZiBub3QgYWxyZWFkeSBwaW5uZWQpLiAqL1xuICAgIHBpbihpbmRleD86IG51bWJlcik6IGJvb2xlYW47XG4gICAgLyoqIFVucGlucyB0aGUgY29sdW1uIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXggKGlmIG5vdCBhbHJlYWR5IHVucGlubmVkKS4gKi9cbiAgICB1bnBpbihpbmRleD86IG51bWJlcik6IGJvb2xlYW47XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgYXJndW1lbnRzIHdoZW4gYSBmb3JtIGdyb3VwIGlzIGNyZWF0ZWQgaW4gdGhlIGdyaWQuXG4gKiAtIGZvcm1Hcm91cDogVGhlIGZvcm0gZ3JvdXAgdGhhdCBpcyBjcmVhdGVkLlxuICogLSBvd25lcjogVGhlIGdyaWQgaW5zdGFuY2UgdGhhdCBvd25zIHRoZSBmb3JtIGdyb3VwLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElHcmlkRm9ybUdyb3VwQ3JlYXRlZEV2ZW50QXJncyB7XG4gICAgZm9ybUdyb3VwOiBGb3JtR3JvdXAsXG4gICAgb3duZXI6IEdyaWRUeXBlXG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgYXJndW1lbnRzIGZvciB0aGUgZ3JpZCB2YWxpZGF0aW9uIHN0YXR1cyBjaGFuZ2UgZXZlbnQuXG4gKiAtIHN0YXR1czogVGhlIHZhbGlkYXRpb24gc3RhdHVzICgnVkFMSUQnIG9yICdJTlZBTElEJykuXG4gKiAtIG93bmVyOiBUaGUgZ3JpZCBpbnN0YW5jZSB0aGF0IG93bnMgdGhlIHZhbGlkYXRpb24gc3RhdGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRWYWxpZGF0aW9uU3RhdHVzRXZlbnRBcmdzIHtcbiAgICBzdGF0dXM6IFZhbGlkYXRpb25TdGF0dXMsXG4gICAgb3duZXI6IEdyaWRUeXBlXG59XG5cbi8qKlxuICogVHlwZSByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb24gc3RhdHVzLlxuICogLSAnVkFMSUQnOiBUaGUgdmFsaWRhdGlvbiBzdGF0dXMgaXMgdmFsaWQuXG4gKiAtICdJTlZBTElEJzogVGhlIHZhbGlkYXRpb24gc3RhdHVzIGlzIGludmFsaWQuXG4gKi9cbmV4cG9ydCB0eXBlIFZhbGlkYXRpb25TdGF0dXMgPSAnVkFMSUQnIHwgJ0lOVkFMSUQnO1xuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb24gc3RhdGUgb2YgYSBncmlkLlxuICogLSBzdGF0dXM6IFRoZSB2YWxpZGF0aW9uIHN0YXR1cyAoJ1ZBTElEJyBvciAnSU5WQUxJRCcpLlxuICogLSBlcnJvcnM6IFRoZSB2YWxpZGF0aW9uIGVycm9ycyBpZiBhbnkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUdyaWRWYWxpZGF0aW9uU3RhdGUge1xuICAgIHJlYWRvbmx5IHN0YXR1czogVmFsaWRhdGlvblN0YXR1cztcbiAgICByZWFkb25seSBlcnJvcnM/OiBWYWxpZGF0aW9uRXJyb3JzO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb24gc3RhdGUgb2YgYSByZWNvcmQgaW4gdGhlIGdyaWQuXG4gKiAtIGBrZXlgOiBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIHJlY29yZC5cbiAqIC0gYGZpZWxkc2A6IEFuIGFycmF5IG9mIHRoZSB2YWxpZGF0aW9uIHN0YXRlIG9mIGluZGl2aWR1YWwgZmllbGRzIGluIHRoZSByZWNvcmQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJlY29yZFZhbGlkYXRpb25TdGF0ZSBleHRlbmRzIElHcmlkVmFsaWRhdGlvblN0YXRlIHtcbiAgICBrZXk6IGFueTtcbiAgICBmaWVsZHM6IElGaWVsZFZhbGlkYXRpb25TdGF0ZVtdO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSByZXByZXNlbnRpbmcgdGhlIHZhbGlkYXRpb24gc3RhdGUgb2YgYSBmaWVsZCBpbiB0aGUgZ3JpZC5cbiAqIC1gZmllbGRgOiBUaGUgbmFtZSBvZiB0aGUgZmllbGQgKHByb3BlcnR5KSBiZWluZyB2YWxpZGF0ZWQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSUZpZWxkVmFsaWRhdGlvblN0YXRlIGV4dGVuZHMgSUdyaWRWYWxpZGF0aW9uU3RhdGUge1xuICAgIGZpZWxkOiBzdHJpbmdcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzZXJ2aWNlIGludGVyZmFjZSBmb3IgaW50ZXJhY3Rpbmcgd2l0aCB0aGUgZ3JpZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHcmlkU2VydmljZVR5cGUge1xuXG4gICAgLyoqIFRoZSByZWZlcmVuY2UgdG8gdGhlIHBhcmVudCBgR3JpZFR5cGVgIHRoYXQgY29udGFpbnMgdGhlIHNlcnZpY2UuICovXG4gICAgZ3JpZDogR3JpZFR5cGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgdGhlIENSVUQgc2VydmljZSAoQ3JlYXRlLCBSZWFkLCBVcGRhdGUsIERlbGV0ZSkgb3BlcmF0aW9ucyBvbiB0aGUgZ3JpZCBkYXRhLiAqL1xuICAgIGNydWRTZXJ2aWNlOiBhbnk7XG4gICAgLyoqIEEgc2VydmljZSByZXNwb25zaWJsZSBmb3IgaGFuZGxpbmcgY29sdW1uIG1vdmluZyB3aXRoaW4gdGhlIGdyaWQuIEl0IGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvIHRoZSBjb2x1bW4sIGl0cyBpY29uLCBhbmQgaW5kaWNhdG9yIGZvciBjYW5jZWxhdGlvbi4gKi9cbiAgICBjbXM6IElneENvbHVtbk1vdmluZ1NlcnZpY2U7XG5cbiAgICAvKiogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgZGF0YSB1c2VkIGluIHRoZSBncmlkLiBUaGUgcmV0dXJuZWQgdmFsdWVzIGNvdWxkIGJlIG9mIGFueSB0eXBlICovXG4gICAgZ2V0X2RhdGEoKTogYW55W107XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgcmV0cmlldmluZyBhbGwgdGhlIGRhdGEgYXZhaWxhYmxlIGluIHRoZSBncmlkLCBpbmNsdWRpbmcgYW55IHRyYW5zYWN0aW9uYWwgZGF0YS5cbiAgICAgKiBgaW5jbHVkZVRyYW5zYWN0aW9uc2A6IE9wdGlvbmFsIHBhcmFtZXRlci4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gaW5jbHVkZSB0cmFuc2FjdGlvbmFsIGRhdGEgaWYgcHJlc2VudC5cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIHRoZSBkYXRhIGF2YWlsYWJsZSBpbiB0aGUgZ3JpZC5cbiAgICAgKi9cbiAgICBnZXRfYWxsX2RhdGEoaW5jbHVkZVRyYW5zYWN0aW9ucz86IGJvb2xlYW4pOiBhbnlbXTtcbiAgICAvKiogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgcmV0cmlldmluZyBhIGNvbHVtbiBvYmplY3QgYnkgaXRzIG5hbWUsIHRha2VuIGFzIGEgcGFyYW1ldGVyLiAqL1xuICAgIGdldF9jb2x1bW5fYnlfbmFtZShuYW1lOiBzdHJpbmcpOiBDb2x1bW5UeXBlO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIHJvdyBieSBpdHMgdW5pcXVlIGlkZW50aWZpZXIgKG9mIGFueSB0eXBlLCB0YWtlbiBhcyBhIHBhcmFtZXRlcikuICovXG4gICAgZ2V0Um93RGF0YShpZDogYW55KTogYW55O1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhIHNwZWNpZmljIHJlY29yZCBieSBpdHMgdW5pcXVlIGlkZW50aWZpZXIgKG9mIGFueSB0eXBlLCB0YWtlbiBhcyBhIHBhcmFtZXRlcikuICovXG4gICAgZ2V0X3JlY19ieV9pZChpZDogYW55KTogYW55O1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiBhIHNwZWNpZmljIHJvdyBieSBpdHMgZGF0YS4gKi9cbiAgICBnZXRfcm93X2lkKHJvd0RhdGE6IGFueSk6IGFueTtcbiAgICAvKiogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgcm93IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBpbmRleCAodGFrZW4gYXMgYSBwYXJhbWV0ZXIpIGluIHRoZSBncmlkICovXG4gICAgZ2V0X3Jvd19ieV9pbmRleChyb3dTZWxlY3RvcjogYW55KTogUm93VHlwZTtcbiAgICAvKiogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgcm93IG9iamVjdCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyBrZXkgKHRha2VuIGFzIGEgcGFyYW1ldGVyKSBpbiB0aGUgZ3JpZCAqL1xuICAgIGdldF9yb3dfYnlfa2V5KHJvd1NlbGVjdG9yOiBhbnkpOiBSb3dUeXBlO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBpbmRleCBvZiBhIHJlY29yZCBpbiB0aGUgZ3JpZCdzIGRhdGEgY29sbGVjdGlvbiB1c2luZyBpdHMgdW5pcXVlIGlkZW50aWZpZXIuICovXG4gICAgZ2V0X3JlY19pbmRleF9ieV9pZChwazogc3RyaW5nIHwgbnVtYmVyLCBkYXRhQ29sbGVjdGlvbj86IGFueVtdKTogbnVtYmVyO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBpbmRleCBvZiBhIHJlY29yZCBpbiB0aGUgZ3JpZCdzIGRhdGEgY29sbGVjdGlvbiB1c2luZyBpdHMgaW5kZXguICovXG4gICAgZ2V0X3JlY19pZF9ieV9pbmRleChpbmRleDogbnVtYmVyLCBkYXRhQ29sbGVjdGlvbj86IGFueVtdKTogYW55O1xuICAgIGdldF9yb3dfaW5kZXhfaW5fZGF0YShyb3dJRDogYW55LCBkYXRhQ29sbGVjdGlvbj86IGFueVtdKTogbnVtYmVyO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBjZWxsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyByb3cgYW5kIGNvbHVtbiBpbiB0aGUgZ3JpZC4gKi9cbiAgICBnZXRfY2VsbF9ieV9rZXkocm93U2VsZWN0b3I6IGFueSwgZmllbGQ6IHN0cmluZyk6IENlbGxUeXBlO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBjZWxsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyByb3cgYW5kIGNvbHVtbiB1c2luZyB0aGVpciBpbmRleGVzLiAqL1xuICAgIGdldF9jZWxsX2J5X2luZGV4KHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbklEOiBudW1iZXIgfCBzdHJpbmcpOiBDZWxsVHlwZTtcbiAgICAvKipcbiAgICAgKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSBjZWxsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggYSBzcGVjaWZpYyByb3cgYW5kIGNvbHVtbiB1c2luZyB0aGVpciBpbmRleGVzLlxuICAgICAqIEl0IGNvdW50cyBvbmx5IHRoZSBpbmRleGVzIG9mIHRoZSB2aXNpYmxlIGNvbHVtbnMgYW5kIHJvd3NcbiAgICAgKi9cbiAgICBnZXRfY2VsbF9ieV92aXNpYmxlX2luZGV4KHJvd0luZGV4OiBudW1iZXIsIGNvbHVtbkluZGV4OiBudW1iZXIpO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIHRoYXQgc2V0cyB0aGUgZXhwYW5zaW9uIHN0YXRlIG9mIGEgZ3JvdXAgcm93ICh1c2VkIGZvciB0cmVlIGdyaWRzKVxuICAgICAqIEl0IHRha2VzIHRoZSB2YWx1ZSBmb3IgdGhlIGV4cGFuc2lvbiBhcyBhIHBhcmFtZXRlciAoZXhwYW5kZWQgb3IgY29sbGFwc2VkKVxuICAgICAqL1xuICAgIHNldF9ncm91cHJvd19leHBhbnNpb25fc3RhdGU/KGdyb3VwUm93OiBJR3JvdXBCeVJlY29yZCwgdmFsdWU6IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJvd19kZWxldGVkX3RyYW5zYWN0aW9uKGlkOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXRob2QgZGVjbGFyYXRpb24gZm9yIGFkZGluZyBhIG5ldyByb3cgdG8gdGhlIGdyaWQuXG4gICAgICogSXQgdGFrZXMgdGhlIHJvdydzIGRhdGEgYW5kIHRoZSBpZGVudGlmaWVyIG9mIHRoZSBwYXJlbnQgcm93IGlmIGFwcGxpY2FibGUgKHVzZWQgZm9yIHRyZWUgZ3JpZHMpXG4gICAgICovXG4gICAgYWRkUm93VG9EYXRhKHJvd0RhdGE6IGFueSwgcGFyZW50SUQ/OiBhbnkpOiB2b2lkO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciBkZWxldGluZyBhIHJvdywgc3BlY2lmaWVkIGJ5IGl0J3MgaWRlbnRpZmllciAodGFrZW4gYXMgYSBwYXJhbWV0ZXIpICovXG4gICAgZGVsZXRlUm93QnlJZChpZDogYW55KTogYW55O1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXRyaWV2aW5nIHRoZSByb3cncyBjdXJyZW50IHN0YXRlIG9mIGV4cGFuc2lvbiAodXNlZCBmb3IgdHJlZSBncmlkcykqL1xuICAgIGdldF9yb3dfZXhwYW5zaW9uX3N0YXRlKGlkOiBhbnkpOiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciBzZXR0aW5nIGEgbmV3IGV4cGFuc2lvbiBzdGF0ZS4gSXQgY2FuIGJlIHRyaWdnZXJlZCBieSBhbiBldmVudCAqL1xuICAgIHNldF9yb3dfZXhwYW5zaW9uX3N0YXRlKGlkOiBhbnksIGV4cGFuZGVkOiBib29sZWFuLCBldmVudD86IEV2ZW50KTogdm9pZDtcbiAgICBnZXRfc3VtbWFyeV9kYXRhKCk6IGFueVtdO1xuXG4gICAgcHJlcGFyZV9zb3J0aW5nX2V4cHJlc3Npb24oc3RhdGVDb2xsZWN0aW9uczogQXJyYXk8QXJyYXk8YW55Pj4sIGV4cHJlc3Npb246IElTb3J0aW5nRXhwcmVzc2lvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3Igc29ydGluZyBieSBvbmx5IG9uZSBleHByZXNzaW9uXG4gICAgICogVGhlIGV4cHJlc3Npb24gY29udGFpbnMgZmllbGROYW1lLCBzb3J0aW5nIGRpcmVjdG9yeSwgd2hldGhlciBjYXNlIHNob3VsZCBiZSBpZ25vcmVkIGFuZCBvcHRpb25hbCBzb3J0aW5nIHN0cmF0ZWd5XG4gICAgICovXG4gICAgc29ydChleHByZXNzaW9uOiBJU29ydGluZ0V4cHJlc3Npb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXRob2QgZGVjbGFyYXRpb24gZm9yIHNvcnRpbmcgYnkgbXVsdGlwbGUgZXhwcmVzc2lvbnNcbiAgICAgKiBUaGUgZXhwcmVzc2lvbnMgY29udGFpbnMgZmllbGROYW1lLCBzb3J0aW5nIGRpcmVjdG9yeSwgd2hldGhlciBjYXNlIHNob3VsZCBiZSBpZ25vcmVkIGFuZCBvcHRpb25hbCBzb3J0aW5nIHN0cmF0ZWd5XG4gICAgICovXG4gICAgc29ydF9tdWx0aXBsZShleHByZXNzaW9uczogSVNvcnRpbmdFeHByZXNzaW9uW10pOiB2b2lkO1xuICAgIC8qKiBSZXByZXNlbnRzIGEgbWV0aG9kIGRlY2xhcmF0aW9uIGZvciByZXNldHRpbmcgdGhlIHNvcnRpbmcgKi9cbiAgICBjbGVhcl9zb3J0KGZpZWxkTmFtZTogc3RyaW5nKTogdm9pZDtcblxuICAgIC8qKiBSZXByZXNlbnRzIGFuIGV2ZW50LCB0cmlnZ2VyZWQgd2hlbiB0aGUgcGluIHN0YXRlIGlzIGNoYW5nZWQgKi9cbiAgICBnZXRfcGluX3Jvd19ldmVudF9hcmdzKHJvd0lEOiBhbnksIGluZGV4PzogbnVtYmVyLCByb3c/OiBSb3dUeXBlLCBwaW5uZWQ/OiBib29sZWFuKTogSVBpblJvd0V2ZW50QXJncztcblxuICAgIGZpbHRlckRhdGFCeUV4cHJlc3Npb25zKGV4cHJlc3Npb25zVHJlZTogSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSk6IGFueVtdO1xuICAgIHNvcnREYXRhQnlFeHByZXNzaW9ucyhkYXRhOiBhbnlbXSwgZXhwcmVzc2lvbnM6IElTb3J0aW5nRXhwcmVzc2lvbltdKTogYW55W107XG5cbiAgICB1cGRhdGVfY2VsbChjZWxsOiBJZ3hDZWxsKTogSUdyaWRFZGl0RXZlbnRBcmdzO1xuICAgIHVwZGF0ZV9yb3cocm93OiBJZ3hFZGl0Um93LCB2YWx1ZTogYW55LCBldmVudD86IEV2ZW50KTogSUdyaWRFZGl0RXZlbnRBcmdzO1xuXG4gICAgZXhwYW5kX3BhdGhfdG9fcmVjb3JkPyhyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCk6IHZvaWQ7XG4gICAgZ2V0X3NlbGVjdGVkX2NoaWxkcmVuPyhyZWNvcmQ6IElUcmVlR3JpZFJlY29yZCwgc2VsZWN0ZWRSb3dJRHM6IGFueVtdKTogdm9pZDtcbiAgICBnZXRfZ3JvdXBCeV9yZWNvcmRfaWQ/KGdSb3c6IElHcm91cEJ5UmVjb3JkKTogc3RyaW5nO1xuICAgIHJlbW92ZV9ncm91cGluZ19leHByZXNzaW9uPyhmaWVsZE5hbWU6IHN0cmluZyk6IHZvaWQ7XG4gICAgY2xlYXJfZ3JvdXBieT8oZmllbGQ6IHN0cmluZyB8IGFueSk6IHZvaWQ7XG4gICAgZ2V0UGFyZW50Um93SWQ/KGNoaWxkOiBHcmlkVHlwZSk6IGFueTtcbiAgICBnZXRDaGlsZEdyaWRzPyhpbkRlcHRoPzogYm9vbGVhbik6IEdyaWRUeXBlW107XG4gICAgZ2V0Q2hpbGRHcmlkPyhwYXRoOiBJUGF0aFNlZ21lbnRbXSk6IEdyaWRUeXBlO1xuXG4gICAgdW5zZXRDaGlsZFJvd0lzbGFuZD8ocm93SXNsYW5kOiBHcmlkVHlwZSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJDaGlsZFJvd0lzbGFuZD8ocm93SXNsYW5kOiBHcmlkVHlwZSk6IHZvaWQ7XG59XG5cblxuLyoqXG4gKiBJbnRlcmZhY2UgcmVwcmVzZW50aW5nIGEgZ3JpZCB0eXBlLiBJdCBpcyBlc3NlbnRpYWxseSB0aGUgYmx1ZXByaW50IHRvIGEgZ3JpZCBvYmplY3QuXG4gKiBDb250YWlucyBkZWZpbml0aW9ucyBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLCByZWxldmFudCB0byBhIGdyaWRcbiAqIEV4dGVuZHMgYElHcmlkRGF0YUJpbmRhYmxlYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRUeXBlIGV4dGVuZHMgSUdyaWREYXRhQmluZGFibGUge1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBsb2NhbGUgb2YgdGhlIGdyaWQ6IGBVU0RgLCBgRVVSYCwgYEdCUGAsIGBDTllgLCBgSlBZYCwgZXRjLiAqL1xuICAgIGxvY2FsZTogc3RyaW5nO1xuICAgIHJlc291cmNlU3RyaW5nczogSUdyaWRSZXNvdXJjZVN0cmluZ3M7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIG5hdGl2ZSBIVE1MIGVsZW1lbnQgaXRzZWxmICovXG4gICAgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHJvd3MgaW4gdGhlIGdyaWQgYXJlIGVkaXRhYmxlLiBJZiB0ZSB2YWx1ZSBpcyB0cnVlLCB0aGUgcm93cyBjYW4gYmUgZWRpdGVkICovXG4gICAgcm93RWRpdGFibGU6IGJvb2xlYW47XG4gICAgcm9vdFN1bW1hcmllc0VuYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGZpbHRlcmluZyBpbiB0aGUgZ3JpZCBpcyBlbmFibGVkLiBJZiB0ZSB2YWx1ZSBpcyB0cnVlLCB0aGUgZ3JpZCBjYW4gYmUgZmlsdGVyZWQgKi9cbiAgICBhbGxvd0ZpbHRlcmluZzogYm9vbGVhbjtcbiAgICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHJvd3MgaW4gdGhlIGdyaWQgY2FuIGJlIGRyYWdnZWQuIElmIHRlIHZhbHVlIGlzIHRydWUsIHRoZSByb3dzIGNhbiBiZSBkcmFnZ2VkICovXG4gICAgcm93RHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSB1bmlxdWUgcHJpbWFyeSBrZXkgdXNlZCBmb3IgaWRlbnRpZnlpbmcgcm93cyBpbiB0aGUgZ3JpZCAqL1xuICAgIHByaW1hcnlLZXk6IGFueTtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGdyaWQuICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKiogVGhlIGhlaWdodCBvZiB0aGUgdmlzaWJsZSByb3dzIGluIHRoZSBncmlkLiAqL1xuICAgIHJlbmRlcmVkUm93SGVpZ2h0OiBudW1iZXI7XG4gICAgcGlwZVRyaWdnZXI6IG51bWJlcjtcbiAgICBzdW1tYXJ5UGlwZVRyaWdnZXI6IG51bWJlcjtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBncm91cGFibGVQaXBlVHJpZ2dlcjogbnVtYmVyO1xuICAgIGZpbHRlcmluZ1BpcGVUcmlnZ2VyOiBudW1iZXI7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGFzQ29sdW1uTGF5b3V0czogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdyaWQgaXMgY3VycmVudGx5IGluIGEgbW92aW5nIHN0YXRlLiAqL1xuICAgIG1vdmluZzogYm9vbGVhbjtcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZ3JpZFNpemU6IFNpemU7XG5cbiAgICAvKiogU3RyYXRlZ3ksIHVzZWQgZm9yIGNsb25pbmcgdGhlIHByb3ZpZGVkIGRhdGEuIFRoZSB0eXBlIGhhcyBvbmUgbWV0aG9kLCB0aGF0IHRha2VzIGFueSB0eXBlIG9mIGRhdGEgKi9cbiAgICBkYXRhQ2xvbmVTdHJhdGVneTogSURhdGFDbG9uZVN0cmF0ZWd5O1xuXG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGdyaWQgc2VydmljZSB0eXBlIHByb3ZpZGluZyBBUEkgbWV0aG9kcyBmb3IgdGhlIGdyaWQgKi9cbiAgICByZWFkb25seSBncmlkQVBJOiBHcmlkU2VydmljZVR5cGU7XG5cbiAgICAvKiogVGhlIGZpbHRlciBtb2RlIGZvciB0aGUgZ3JpZC4gSXQgY2FuIGJlIHF1aWNrIGZpbHRlciBvZiBleGNlbC1zdHlsZSBmaWx0ZXIgKi9cbiAgICBmaWx0ZXJNb2RlOiBGaWx0ZXJNb2RlO1xuXG4gICAgLy8gVFlQRVxuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHRoZWFkUm93OiBhbnk7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZ3JvdXBBcmVhOiBhbnk7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZmlsdGVyQ2VsbExpc3Q6IGFueVtdO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGZpbHRlcmluZ1JvdzogYW55O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGFjdGlvblN0cmlwOiBhbnk7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcmVzaXplTGluZTogYW55O1xuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgdGZvb3Q6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHBhZ2luYXRvcjogSWd4UGFnaW5hdG9yQ29tcG9uZW50O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHBhZ2luYXRvckxpc3Q/OiBRdWVyeUxpc3Q8SWd4UGFnaW5hdG9yQ29tcG9uZW50PjtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBjcnVkU2VydmljZTogYW55O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHN1bW1hcnlTZXJ2aWNlOiBhbnk7XG5cblxuXG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIHZpcnR1YWxpemF0aW9uIGZvciB0aGUgZ3JpZC4gSXQgaGFzIGFuIG93bmVyLCBzdGFydCBpbmRleCBhbmQgY2h1bmsgc2l6ZSAqL1xuICAgIHZpcnR1YWxpemF0aW9uU3RhdGU6IElGb3JPZlN0YXRlO1xuICAgIC8vIFRZUEVcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICAvKiogVGhlIHNlcnZpY2UgaGFuZGxpbmcgc2VsZWN0aW9uIGluIHRoZSBncmlkLiBTZWxlY3RpbmcsIGRlc2VsZWN0aW5nIGVsZW1lbnRzICovXG4gICAgc2VsZWN0aW9uU2VydmljZTogYW55O1xuICAgIG5hdmlnYXRpb246IGFueTtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBmaWx0ZXJpbmdTZXJ2aWNlOiBhbnk7XG4gICAgb3V0bGV0OiBhbnk7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBncmlkIGhhcyBjb2x1bW5zIHRoYXQgY2FuIGJlIG1vdmVkICovXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGFzTW92YWJsZUNvbHVtbnM6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBncmlkJ3Mgcm93cyBjYW4gYmUgc2VsZWN0ZWQgKi9cbiAgICBpc1Jvd1NlbGVjdGFibGU6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWxlY3RvcnMgb2YgdGhlIHJvd3MgYXJlIHZpc2libGUgKi9cbiAgICBzaG93Um93U2VsZWN0b3JzOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZ3JpZCdzIGVsZW1lbnQgaXMgcGlubmVkIHRvIHRoZSBzdGFydCBvZiB0aGUgZ3JpZCAqL1xuICAgIGlzUGlubmluZ1RvU3RhcnQ6IGJvb2xlYW47XG4gICAgLyoqIEluZGljYXRlcyBpZiB0aGUgY29sdW1uIG9mIHRoZSBncmlkIGlzIGluIGRyYWcgbW9kZSAqL1xuICAgIGNvbHVtbkluRHJhZzogYW55O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIC8qKiBUaGUgd2lkdGggb2YgcGlubmVkIGVsZW1lbnQgKi9cbiAgICBwaW5uZWRXaWR0aDogbnVtYmVyO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIC8qKiBUaGUgd2lkdGggb2YgdW5waW5uZWQgZWxlbWVudCAqL1xuICAgIHVucGlubmVkV2lkdGg6IG51bWJlcjtcbiAgICAvKiogVGhlIENTUyBtYXJnaW4gb2YgdGhlIHN1bW1hcmllcyAqL1xuICAgIHN1bW1hcmllc01hcmdpbjogbnVtYmVyO1xuICAgIGhlYWRTZWxlY3RvckJhc2VBcmlhTGFiZWw6IHN0cmluZztcblxuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZ3JpZCBoYXMgY29sdW1ucyB0aGF0IGFyZSBzaG93biAqL1xuICAgIGhhc1Zpc2libGVDb2x1bW5zOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIGdyaWQgaGFzIGV4cGFuZGFibGUgY2hpbGRyZW4gKGhpZXJhcmNoaWNhbCBhbmQgdHJlZSBncmlkKVxuICAgICAqL1xuICAgIGhhc0V4cGFuZGFibGVDaGlsZHJlbj86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBjb2xsYXBzZWQgZ3JpZCBlbGVtZW50cyBzaG91bGQgYmUgZXhwYW5kZWRcbiAgICAgKi9cbiAgICBzaG93RXhwYW5kQWxsPzogYm9vbGVhbjtcblxuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBjb3VudCBvZiBvbmx5IHRoZSBoaWRkZW4gKG5vdCB2aXNpYmxlKSBjb2x1bW5zICovXG4gICAgaGlkZGVuQ29sdW1uc0NvdW50OiBudW1iZXI7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGNvdW50IG9mIG9ubHkgdGhlIHBpbm5lZCBjb2x1bW5zICovXG4gICAgcGlubmVkQ29sdW1uc0NvdW50OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFRoZSB0ZW1wbGF0ZSBmb3IgZ3JpZCBpY29ucy5cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgaWNvblRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PjtcbiAgICAvKipcbiAgICAgKiBPcHRpb25hbFxuICAgICAqIFRoZSB0ZW1wbGF0ZSBmb3IgZ3JvdXAtYnkgcm93cy5cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgZ3JvdXBSb3dUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPElneEdyb3VwQnlSb3dUZW1wbGF0ZUNvbnRleHQ+O1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsXG4gICAgICogVGhlIHRlbXBsYXRlIGZvciB0aGUgZ3JvdXAgcm93IHNlbGVjdG9yLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBncm91cEJ5Um93U2VsZWN0b3JUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPElneEdyb3VwQnlSb3dTZWxlY3RvclRlbXBsYXRlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWxcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIHJvdyBsb2FkaW5nIGluZGljYXRvcnMuXG4gICAgICogSXQgaXMgb2YgdHlwZSBUZW1wbGF0ZVJlZiwgd2hpY2ggcmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSwgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3c1xuICAgICAqL1xuICAgIHJvd0xvYWRpbmdJbmRpY2F0b3JUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIGZvciB0aGUgaGVhZGVyIHNlbGVjdG9yLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBoZWFkU2VsZWN0b3JUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SWd4SGVhZFNlbGVjdG9yVGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIHJvdyBzZWxlY3RvcnMuXG4gICAgICogSXQgaXMgb2YgdHlwZSBUZW1wbGF0ZVJlZiwgd2hpY2ggcmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSwgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3c1xuICAgICAqL1xuICAgIHJvd1NlbGVjdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElneFJvd1NlbGVjdG9yVGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIHNvcnQgaGVhZGVyIGljb25zLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBzb3J0SGVhZGVySWNvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkSGVhZGVyVGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIGFzY2VuZGluZyBzb3J0IGhlYWRlciBpY29ucy5cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgc29ydEFzY2VuZGluZ0hlYWRlckljb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SWd4R3JpZEhlYWRlclRlbXBsYXRlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIGZvciBkZXNjZW5kaW5nIHNvcnQgaGVhZGVyIGljb25zLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBzb3J0RGVzY2VuZGluZ0hlYWRlckljb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SWd4R3JpZEhlYWRlclRlbXBsYXRlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogVGhlIHRlbXBsYXRlIGZvciBoZWFkZXIgY29sbGFwc2VkIGluZGljYXRvcnMuXG4gICAgICogSXQgaXMgb2YgdHlwZSBUZW1wbGF0ZVJlZiwgd2hpY2ggcmVwcmVzZW50cyBhbiBlbWJlZGRlZCB0ZW1wbGF0ZSwgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3c1xuICAgICAqL1xuICAgIGhlYWRlckNvbGxhcHNlZEluZGljYXRvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkVGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIGhlYWRlciBleHBhbmRlZCBpbmRpY2F0b3JzLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICBoZWFkZXJFeHBhbmRlZEluZGljYXRvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkVGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKiogVGhlIHRlbXBsYXRlIGZvciBkcmFnIGluZGljYXRvciBpY29ucy4gQ291bGQgYmUgb2YgYW55IHR5cGUgKi9cbiAgICBkcmFnSW5kaWNhdG9ySWNvblRlbXBsYXRlOiBhbnk7XG4gICAgLyoqIFRoZSBiYXNlIGRyYWcgaW5kaWNhdG9yIGljb24uIENvdWxkIGJlIG9mIGFueSB0eXBlICovXG4gICAgZHJhZ0luZGljYXRvckljb25CYXNlOiBhbnk7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRyYW5zaXRpb25zIGFyZSBkaXNhYmxlZCBmb3IgdGhlIGdyaWQuICovXG4gICAgZGlzYWJsZVRyYW5zaXRpb25zOiBib29sZWFuO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgY3VycmVuY3kgc3ltYm9sIGlzIHBvc2l0aW9uZWQgdG8gdGhlIGxlZnQgb2YgdmFsdWVzLiAqL1xuICAgIGN1cnJlbmN5UG9zaXRpb25MZWZ0OiBib29sZWFuO1xuXG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIHRoZSB3aWR0aCBvZiB0aGUgY29sdW1uIGlzIHNldCBieSB0aGUgdXNlciwgb3IgaXMgY29uZmlndXJlZCBhdXRvbWF0aWNhbGx5LiAqL1xuICAgIGNvbHVtbldpZHRoU2V0QnlVc2VyOiBib29sZWFuO1xuICAgIGhlYWRlckZlYXR1cmVzV2lkdGg6IG51bWJlcjtcbiAgICAvKiogQ1NTIHN0eWxpbmcgY2FsY3VsYXRlZCBmb3IgYW4gZWxlbWVudDogY2FsY0hlaWdodCwgY2FsY1dpZHRoLCBvdXRlcldpZHRoICovXG4gICAgY2FsY0hlaWdodDogbnVtYmVyO1xuICAgIGNhbGNXaWR0aDogbnVtYmVyO1xuICAgIG91dGVyV2lkdGg6IG51bWJlcjtcbiAgICAvKiogVGhlIGhlaWdodCBvZiBlYWNoIHJvdyBpbiB0aGUgZ3JpZC4gU2V0dGluZyBhIGNvbnN0YW50IGhlaWdodCBjYW4gc29sdmUgcHJvYmxlbXMgd2l0aCBub3Qgc2hvd2luZyBhbGwgZWxlbWVudHMgd2hlbiBzY3JvbGxpbmcgKi9cbiAgICByb3dIZWlnaHQ6IG51bWJlcjtcbiAgICBtdWx0aVJvd0xheW91dFJvd1NpemU6IG51bWJlcjtcbiAgICAvKiogTWluaW1hbCB3aWR0aCBmb3IgaGVhZGVycyAqL1xuICAgIGRlZmF1bHRIZWFkZXJHcm91cE1pbldpZHRoOiBhbnk7XG4gICAgbWF4TGV2ZWxIZWFkZXJEZXB0aDogbnVtYmVyO1xuICAgIGRlZmF1bHRSb3dIZWlnaHQ6IG51bWJlcjtcbiAgICAvKiogVGhlIGRlZmF1bHQgZm9udCBzaXplLCBjYWxjdWxhdGVkIGZvciBlYWNoIGVsZW1lbnQgKi9cbiAgICBfYmFzZUZvbnRTaXplPzogbnVtYmVyO1xuICAgIHNjcm9sbFNpemU6IG51bWJlcjtcblxuICAgIC8qKiBUaGUgdHJpZ2dlciBmb3IgZ3JpZCB2YWxpZGF0aW9uLiBJdCdzIHZhbHVlIGNhbiBlaXRoZXIgYmUgYGNoYW5nZWAgb3IgYGJsdXJgICovXG4gICAgdmFsaWRhdGlvblRyaWdnZXI6IEdyaWRWYWxpZGF0aW9uVHJpZ2dlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBmb3IgY29sdW1ucyBhbmQgcm93cyBwaW5uaW5nIGluIHRoZSBncmlkXG4gICAgICogSXQncyBvZiB0eXBlIElQaW5uaW5nQ29uZmlnLCB3aGljaCBjYW4gaGF2ZSB2YWx1ZSBmb3IgY29sdW1ucyAoc3RhcnQsIGVuZCkgYW5kIGZvciByb3dzICh0b3AsIGJvdHRvbSlcbiAgICAqL1xuICAgIHBpbm5pbmc6IElQaW5uaW5nQ29uZmlnO1xuICAgIGV4cGFuc2lvblN0YXRlczogTWFwPGFueSwgYm9vbGVhbj47XG4gICAgcGFyZW50VmlydERpcjogYW55O1xuICAgIHRib2R5OiBhbnk7XG4gICAgdmVydGljYWxTY3JvbGxDb250YWluZXI6IGFueTtcbiAgICBkYXRhUm93TGlzdDogYW55O1xuICAgIHJvd0xpc3Q6IGFueTtcbiAgICAvKiogQW4gdW5tb2RpZmlhYmxlIGxpc3QsIGNvbnRhaW5pbmcgYWxsIHRoZSBjb2x1bW5zIG9mIHRoZSBncmlkLiAqL1xuICAgIGNvbHVtbkxpc3Q6IFF1ZXJ5TGlzdDxDb2x1bW5UeXBlPjtcbiAgICBjb2x1bW5zOiBDb2x1bW5UeXBlW107XG4gICAgLyoqIEFuIGFycmF5IG9mIGNvbHVtbnMsIGJ1dCBpdCBjb3VudHMgb25seSB0aGUgb25lcyB2aXNpYmxlIChub3QgaGlkZGVuKSBpbiB0aGUgdmlldyAqL1xuICAgIHZpc2libGVDb2x1bW5zOiBDb2x1bW5UeXBlW107XG4gICAgLyoqIEFuIGFycmF5IG9mIGNvbHVtbnMsIGJ1dCBpdCBjb3VudHMgb25seSB0aGUgb25lcyB0aGF0IGFyZSBub3QgcGlubmVkICovXG4gICAgdW5waW5uZWRDb2x1bW5zOiBDb2x1bW5UeXBlW107XG4gICAgLyoqIEFuIGFycmF5IG9mIGNvbHVtbnMsIGJ1dCBpdCBjb3VudHMgb25seSB0aGUgb25lcyB0aGF0IGFyZSBwaW5uZWQgKi9cbiAgICBwaW5uZWRDb2x1bW5zOiBDb2x1bW5UeXBlW107XG4gICAgLyoqIHJlcHJlc2VudHMgYW4gYXJyYXkgb2YgdGhlIGhlYWRlcnMgb2YgdGhlIGNvbHVtbnMgKi9cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBoZWFkZXJDZWxsTGlzdDogYW55W107XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGVhZGVyR3JvdXBzOiBhbnlbXTtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBoZWFkZXJHcm91cHNMaXN0OiBhbnlbXTtcbiAgICBzdW1tYXJpZXNSb3dMaXN0OiBhbnk7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGVhZGVyQ29udGFpbmVyOiBhbnk7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGNlbGxzIGFyZSBzZWxlY3RhYmxlIGluIHRoZSBncmlkICovXG4gICAgaXNDZWxsU2VsZWN0YWJsZTogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgaXQgaXMgYWxsb3dlZCB0byBzZWxlY3QgbW9yZSB0aGFuIG9uZSByb3cgaW4gdGhlIGdyaWQgKi9cbiAgICBpc011bHRpUm93U2VsZWN0aW9uRW5hYmxlZDogYm9vbGVhbjtcbiAgICBoYXNQaW5uZWRSZWNvcmRzOiBib29sZWFuO1xuICAgIHBpbm5lZFJlY29yZHNDb3VudDogbnVtYmVyO1xuICAgIHBpbm5lZFJlY29yZHM6IGFueVtdO1xuICAgIHVucGlubmVkUmVjb3JkczogYW55W107XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcGlubmVkRGF0YVZpZXc6IGFueVtdO1xuICAgIHBpbm5lZFJvd3M6IGFueVtdO1xuICAgIGRhdGFWaWV3OiBhbnlbXTtcbiAgICBfZmlsdGVyZWRVbnBpbm5lZERhdGE6IGFueVtdO1xuICAgIF9maWx0ZXJlZFNvcnRlZFVucGlubmVkRGF0YTogYW55W107XG4gICAgZmlsdGVyZWRTb3J0ZWREYXRhOiBhbnlbXTtcbiAgICBkYXRhV2l0aEFkZGVkSW5UcmFuc2FjdGlvblJvd3M6IGFueVtdO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSB0cmFuc2FjdGlvbiBzZXJ2aWNlIGZvciB0aGUgZ3JpZC4gKi9cbiAgICByZWFkb25seSB0cmFuc2FjdGlvbnM6IFRyYW5zYWN0aW9uU2VydmljZTxUcmFuc2FjdGlvbiwgU3RhdGU+O1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSB2YWxpZGF0aW9uIHNlcnZpY2UgZm9yIHRoZSBncmlkLiBUaGUgdHlwZSBjb250YWlucyBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIChsb2dpYykgZm9yIHZhbGlkYXRpbmcgcmVjb3JkcyAqL1xuICAgIHJlYWRvbmx5IHZhbGlkYXRpb246IElneEdyaWRWYWxpZGF0aW9uU2VydmljZTtcbiAgICBkZWZhdWx0U3VtbWFyeUhlaWdodDogbnVtYmVyO1xuICAgIHN1bW1hcnlSb3dIZWlnaHQ6IG51bWJlcjtcbiAgICByb3dFZGl0aW5nT3ZlcmxheTogSWd4VG9nZ2xlRGlyZWN0aXZlO1xuICAgIHRvdGFsUm93c0NvdW50QWZ0ZXJGaWx0ZXI6IG51bWJlcjtcbiAgICBfdG90YWxSZWNvcmRzOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyB0aGUgcGFnaW5nIG9mIHRoZSBncmlkLiBJdCBjYW4gYmUgZWl0aGVyICdMb2NhbCcgb3IgJ1JlbW90ZSdcbiAgICAgKiAtIExvY2FsOiBEZWZhdWx0IHZhbHVlOyBUaGUgZ3JpZCB3aWxsIHBhZ2luYXRlIHRoZSBkYXRhIHNvdXJjZSBiYXNlZCBvbiB0aGUgcGFnZVxuICAgICAqL1xuICAgIHBhZ2luZ01vZGU6IEdyaWRQYWdpbmdNb2RlO1xuICAgIC8qKiBUaGUgcGFnaW5nIHN0YXRlIGZvciB0aGUgZ3JpZDsgVXNlZCB0byBjb25maWd1cmUgaG93IHBhZ2luZyBzaG91bGQgYmUgYXBwbGllZCAtIHdoaWNoIGlzIHRoZSBjdXJyZW50IHBhZ2UsIHJlY29yZHMgcGVyIHBhZ2UgKi9cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHBhZ2luZ1N0YXRlOiBhbnk7XG5cbiAgICByb3dFZGl0VGFiczogYW55O1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBsYXN0IHNlYXJjaCBpbiB0aGUgZ3JpZFxuICAgICAqIEl0IGNvbnRhaW5zIHRoZSBzZWFyY2ggdGV4dCAodGhlIHVzZXIgaGFzIGVudGVyZWQpLCB0aGUgbWF0Y2ggYW5kIHNvbWUgc2V0dGluZ3MgZm9yIHRoZSBzZWFyY2hcbiAgICAgKi9cbiAgICByZWFkb25seSBsYXN0U2VhcmNoSW5mbzogSVNlYXJjaEluZm87XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcGFnZTogbnVtYmVyO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHBlclBhZ2U6IG51bWJlcjtcbiAgICAvKiogVGhlIElEIG9mIHRoZSByb3cgY3VycmVudGx5IGJlaW5nIGRyYWdnZWQgaW4gdGhlIGdyaWQuICovXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZHJhZ1Jvd0lEOiBhbnk7XG4gICAgLyoqIEluZGljYXRlcyB3aGV0aGVyIGEgcm93IGlzIGN1cnJlbnRseSBiZWluZyBkcmFnZ2VkICovXG4gICAgcm93RHJhZ2dpbmc6IGJvb2xlYW47XG5cbiAgICBmaXJzdEVkaXRhYmxlQ29sdW1uSW5kZXg6IG51bWJlcjtcbiAgICBsYXN0RWRpdGFibGVDb2x1bW5JbmRleDogbnVtYmVyO1xuICAgIGlzUm93UGlubmluZ1RvVG9wOiBib29sZWFuO1xuICAgIGhhc0RldGFpbHM6IGJvb2xlYW47XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGFzU3VtbWFyaXplZENvbHVtbnM6IGJvb2xlYW47XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaGFzQ29sdW1uR3JvdXBzOiBib29sZWFuO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGhhc0VkaXRhYmxlQ29sdW1uczogYm9vbGVhbjtcbiAgICAvKiogUHJvcGVydHksIHRoYXQgcHJvdmlkZXMgYSBjYWxsYmFjayBmb3IgbG9hZGluZyB1bmlxdWUgY29sdW1uIHZhbHVlcyBvbiBkZW1hbmQuXG4gICAgICogSWYgdGhpcyBwcm9wZXJ0eSBpcyBwcm92aWRlZCwgdGhlIHVuaXF1ZSB2YWx1ZXMgaXQgZ2VuZXJhdGVzIHdpbGwgYmUgdXNlZCBieSB0aGUgRXhjZWwgU3R5bGUgRmlsdGVyaW5nICAqL1xuICAgIHVuaXF1ZUNvbHVtblZhbHVlc1N0cmF0ZWd5OiAoY29sdW1uOiBDb2x1bW5UeXBlLCB0cmVlOiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUsIGRvbmU6ICh2YWx1ZXM6IGFueVtdKSA9PiB2b2lkKSA9PiB2b2lkO1xuICAgIC8qKiBQcm9wZXJ0eSwgdGhhdCBnZXRzIHRoZSBoZWFkZXIgY2VsbCBpbm5lciB3aWR0aCBmb3IgYXV0by1zaXppbmcuICovXG4gICAgZ2V0SGVhZGVyQ2VsbFdpZHRoOiAoZWxlbWVudDogSFRNTEVsZW1lbnQpID0+IElTaXplSW5mbztcblxuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGNoYW5nZSBkZXRlY3Rpb24gZnVuY3Rpb25hbGl0eS5cbiAgICAgKiBBIGNoYW5nZS1kZXRlY3Rpb24gdHJlZSBjb2xsZWN0cyBhbGwgdmlld3MgdGhhdCBhcmUgdG8gYmUgY2hlY2tlZCBmb3IgY2hhbmdlcy5cbiAgICAgKiBUaGUgcHJvcGVydHkgY2Fubm90IGJlIGNoYW5nZWQgKHJlYWRvbmx5KSAqL1xuICAgIHJlYWRvbmx5IGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgZG9jdW1lbnQ6IERvY3VtZW50O1xuICAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIGV4cGFuZGVkIHJvdyBpbmRpY2F0b3JzLlxuICAgICAqIEl0IGlzIG9mIHR5cGUgVGVtcGxhdGVSZWYsIHdoaWNoIHJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUsIHVzZWQgdG8gaW5zdGFudGlhdGUgZW1iZWRkZWQgdmlld3NcbiAgICAgKi9cbiAgICByb3dFeHBhbmRlZEluZGljYXRvclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkUm93VGVtcGxhdGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBUaGUgdGVtcGxhdGUgZm9yIGNvbGxhcHNlZCByb3cgaW5kaWNhdG9ycy5cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgcm93Q29sbGFwc2VkSW5kaWNhdG9yVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElneEdyaWRSb3dUZW1wbGF0ZUNvbnRleHQ+O1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZW1wbGF0ZSBmb3IgaGVhZGVyIGljb25cbiAgICAgKiBJdCBpcyBvZiB0eXBlIFRlbXBsYXRlUmVmLCB3aGljaCByZXByZXNlbnRzIGFuIGVtYmVkZGVkIHRlbXBsYXRlLCB1c2VkIHRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzXG4gICAgICovXG4gICAgZXhjZWxTdHlsZUhlYWRlckljb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SWd4R3JpZEhlYWRlclRlbXBsYXRlQ29udGV4dD47XG5cbiAgICBzZWxlY3RSb3dPbkNsaWNrOiBib29sZWFuO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBzZWxlY3Rpb24gbW9kZSBmb3IgY2VsbHM6ICdub25lJywnc2luZ2xlJywgJ211bHRpcGxlJywgJ211bHRpcGxlQ2FzY2FkZScgKi9cbiAgICBjZWxsU2VsZWN0aW9uOiBHcmlkU2VsZWN0aW9uTW9kZTtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgc2VsZWN0aW9uIG1vZGUgZm9yIHJvd3M6ICdub25lJywnc2luZ2xlJywgJ211bHRpcGxlJywgJ211bHRpcGxlQ2FzY2FkZScgKi9cbiAgICByb3dTZWxlY3Rpb246IEdyaWRTZWxlY3Rpb25Nb2RlO1xuICAgIC8qKiBSZXByZXNlbnRzIHRoZSBzZWxlY3Rpb24gbW9kZSBmb3IgY29sdW1uczogJ25vbmUnLCdzaW5nbGUnLCAnbXVsdGlwbGUnLCAnbXVsdGlwbGVDYXNjYWRlJyAqL1xuICAgIGNvbHVtblNlbGVjdGlvbjogR3JpZFNlbGVjdGlvbk1vZGU7XG4gICAgLyoqIFJlcHJlc2VudHMgdGhlIGNhbGN1bGF0aW9uIG1vZGUgZm9yIHN1bW1hcmllczogJ3Jvb3RMZXZlbE9ubHknLCAnY2hpbGRMZXZlbHNPbmx5JywgJ3Jvb3RBbmRDaGlsZExldmVscycgKi9cbiAgICBzdW1tYXJ5Q2FsY3VsYXRpb25Nb2RlOiBHcmlkU3VtbWFyeUNhbGN1bGF0aW9uTW9kZTtcbiAgICAvKiogUmVwcmVzZW50cyB0aGUgcG9zaXRpb24gb2Ygc3VtbWFyaWVzOiAndG9wJywgJ2JvdHRvbScgKi9cbiAgICBzdW1tYXJ5UG9zaXRpb246IEdyaWRTdW1tYXJ5UG9zaXRpb247XG5cbiAgICAvLyBYWFg6IFdvcmsgYXJvdW5kIHRpbGwgd2UgZml4ZWQgdGhlIGluamVjdGlvbiB0b2tlbnNcbiAgICBsYXN0Q2hpbGRHcmlkPzogR3JpZFR5cGU7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgdG9vbGJhck91dGxldD86IFZpZXdDb250YWluZXJSZWY7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcGFnaW5hdG9yT3V0bGV0PzogVmlld0NvbnRhaW5lclJlZjtcbiAgICBmbGF0RGF0YT86IGFueVtdIHwgbnVsbDtcbiAgICBjaGlsZFJvdz86IGFueTtcbiAgICBleHBhbnNpb25EZXB0aD86IG51bWJlcjtcbiAgICBjaGlsZERhdGFLZXk/OiBhbnk7XG4gICAgZm9yZWlnbktleT86IGFueTtcbiAgICBjYXNjYWRlT25EZWxldGU/OiBib29sZWFuO1xuICAgIGxvYWRDaGlsZHJlbk9uRGVtYW5kPzogKHBhcmVudElEOiBhbnksIGRvbmU6IChjaGlsZHJlbjogYW55W10pID0+IHZvaWQpID0+IHZvaWQ7XG4gICAgaGFzQ2hpbGRyZW5LZXk/OiBhbnk7XG4gICAgbG9hZGluZ1Jvd3M/OiBTZXQ8YW55PjtcbiAgICBwYXJlbnQ/OiBHcmlkVHlwZTtcbiAgICBoaWdobGlnaHRlZFJvd0lEPzogYW55O1xuICAgIHVwZGF0ZU9uUmVuZGVyPzogYm9vbGVhbjtcbiAgICBjaGlsZExheW91dEtleXM/OiBhbnlbXTtcbiAgICBjaGlsZExheW91dExpc3Q/OiBRdWVyeUxpc3Q8YW55PjtcbiAgICByb290R3JpZD86IEdyaWRUeXBlO1xuICAgIHByb2Nlc3NlZFJvb3RSZWNvcmRzPzogSVRyZWVHcmlkUmVjb3JkW107XG4gICAgcm9vdFJlY29yZHM/OiBJVHJlZUdyaWRSZWNvcmRbXTtcbiAgICByZWNvcmRzPzogTWFwPGFueSwgSVRyZWVHcmlkUmVjb3JkPjtcbiAgICBwcm9jZXNzZWRFeHBhbmRlZEZsYXREYXRhPzogYW55W10gfCBudWxsO1xuICAgIHByb2Nlc3NlZFJlY29yZHM/OiBNYXA8YW55LCBJVHJlZUdyaWRSZWNvcmQ+O1xuICAgIHRyZWVHcm91cEFyZWE/OiBhbnk7XG5cbiAgICBhY3RpdmVOb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SUFjdGl2ZU5vZGVDaGFuZ2VFdmVudEFyZ3M+O1xuICAgIGdyaWRLZXlkb3duOiBFdmVudEVtaXR0ZXI8SUdyaWRLZXlkb3duRXZlbnRBcmdzPjtcbiAgICBjZWxsQ2xpY2s6IEV2ZW50RW1pdHRlcjxJR3JpZENlbGxFdmVudEFyZ3M+O1xuICAgIHJvd0NsaWNrOiBFdmVudEVtaXR0ZXI8SUdyaWRSb3dFdmVudEFyZ3M+O1xuICAgIGRvdWJsZUNsaWNrOiBFdmVudEVtaXR0ZXI8SUdyaWRDZWxsRXZlbnRBcmdzPjtcbiAgICBjb250ZXh0TWVudTogRXZlbnRFbWl0dGVyPElHcmlkQ29udGV4dE1lbnVFdmVudEFyZ3M+O1xuICAgIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SUdyaWRDZWxsRXZlbnRBcmdzPjtcbiAgICByYW5nZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8R3JpZFNlbGVjdGlvblJhbmdlPjtcbiAgICByb3dTZWxlY3Rpb25DaGFuZ2luZzogRXZlbnRFbWl0dGVyPElSb3dTZWxlY3Rpb25FdmVudEFyZ3M+O1xuICAgIGxvY2FsZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGZpbHRlcmluZzogRXZlbnRFbWl0dGVyPElGaWx0ZXJpbmdFdmVudEFyZ3M+O1xuICAgIGZpbHRlcmluZ0RvbmU6IEV2ZW50RW1pdHRlcjxJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlPjtcbiAgICBjb2x1bW5QaW5uZWQ6IEV2ZW50RW1pdHRlcjxJUGluQ29sdW1uRXZlbnRBcmdzPjtcbiAgICBjb2x1bW5SZXNpemVkOiBFdmVudEVtaXR0ZXI8SUNvbHVtblJlc2l6ZUV2ZW50QXJncz47XG4gICAgY29sdW1uTW92aW5nRW5kOiBFdmVudEVtaXR0ZXI8SUNvbHVtbk1vdmluZ0VuZEV2ZW50QXJncz47XG4gICAgY29sdW1uU2VsZWN0aW9uQ2hhbmdpbmc6IEV2ZW50RW1pdHRlcjxJQ29sdW1uU2VsZWN0aW9uRXZlbnRBcmdzPjtcbiAgICBjb2x1bW5Nb3Zpbmc6IEV2ZW50RW1pdHRlcjxJQ29sdW1uTW92aW5nRXZlbnRBcmdzPjtcbiAgICBjb2x1bW5Nb3ZpbmdTdGFydDogRXZlbnRFbWl0dGVyPElDb2x1bW5Nb3ZpbmdTdGFydEV2ZW50QXJncz47XG4gICAgY29sdW1uUGluOiBFdmVudEVtaXR0ZXI8SVBpbkNvbHVtbkNhbmNlbGxhYmxlRXZlbnRBcmdzPjtcbiAgICBjb2x1bW5WaXNpYmlsaXR5Q2hhbmdpbmc6IEV2ZW50RW1pdHRlcjxJQ29sdW1uVmlzaWJpbGl0eUNoYW5naW5nRXZlbnRBcmdzPjtcbiAgICBjb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZDogRXZlbnRFbWl0dGVyPElDb2x1bW5WaXNpYmlsaXR5Q2hhbmdlZEV2ZW50QXJncz47XG4gICAgYmF0Y2hFZGl0aW5nQ2hhbmdlPzogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHJvd0FkZDogRXZlbnRFbWl0dGVyPElSb3dEYXRhQ2FuY2VsYWJsZUV2ZW50QXJncz47XG4gICAgcm93QWRkZWQ6IEV2ZW50RW1pdHRlcjxJUm93RGF0YUV2ZW50QXJncz47XG4gICAgcm93QWRkZWROb3RpZmllcjogU3ViamVjdDxJUm93RGF0YUV2ZW50QXJncz47XG4gICAgcm93RGVsZXRlOiBFdmVudEVtaXR0ZXI8SVJvd0RhdGFDYW5jZWxhYmxlRXZlbnRBcmdzPjtcbiAgICByb3dEZWxldGVkOiBFdmVudEVtaXR0ZXI8SVJvd0RhdGFFdmVudEFyZ3M+O1xuICAgIHJvd0RlbGV0ZWROb3RpZmllcjogU3ViamVjdDxJUm93RGF0YUV2ZW50QXJncz47XG4gICAgY2VsbEVkaXRFbnRlcjogRXZlbnRFbWl0dGVyPElHcmlkRWRpdEV2ZW50QXJncz47XG4gICAgY2VsbEVkaXQ6IEV2ZW50RW1pdHRlcjxJR3JpZEVkaXRFdmVudEFyZ3M+O1xuICAgIGNlbGxFZGl0RG9uZTogRXZlbnRFbWl0dGVyPElHcmlkRWRpdERvbmVFdmVudEFyZ3M+O1xuICAgIGNlbGxFZGl0RXhpdDogRXZlbnRFbWl0dGVyPElHcmlkRWRpdERvbmVFdmVudEFyZ3M+O1xuICAgIHJvd0VkaXRFbnRlcjogRXZlbnRFbWl0dGVyPElHcmlkRWRpdEV2ZW50QXJncz47XG4gICAgcm93RWRpdDogRXZlbnRFbWl0dGVyPElHcmlkRWRpdEV2ZW50QXJncz47XG4gICAgcm93RWRpdERvbmU6IEV2ZW50RW1pdHRlcjxJR3JpZEVkaXREb25lRXZlbnRBcmdzPjtcbiAgICByb3dFZGl0RXhpdDogRXZlbnRFbWl0dGVyPElHcmlkRWRpdERvbmVFdmVudEFyZ3M+O1xuICAgIHJvd0RyYWdTdGFydDogRXZlbnRFbWl0dGVyPElSb3dEcmFnU3RhcnRFdmVudEFyZ3M+O1xuICAgIHJvd0RyYWdFbmQ6IEV2ZW50RW1pdHRlcjxJUm93RHJhZ0VuZEV2ZW50QXJncz47XG4gICAgcm93VG9nZ2xlOiBFdmVudEVtaXR0ZXI8SVJvd1RvZ2dsZUV2ZW50QXJncz47XG4gICAgZm9ybUdyb3VwQ3JlYXRlZDogRXZlbnRFbWl0dGVyPElHcmlkRm9ybUdyb3VwQ3JlYXRlZEV2ZW50QXJncz47XG4gICAgdmFsaWRhdGlvblN0YXR1c0NoYW5nZTogRXZlbnRFbWl0dGVyPElHcmlkVmFsaWRhdGlvblN0YXR1c0V2ZW50QXJncz47XG5cbiAgICB0b29sYmFyRXhwb3J0aW5nOiBFdmVudEVtaXR0ZXI8SUdyaWRUb29sYmFyRXhwb3J0RXZlbnRBcmdzPjtcbiAgICByZW5kZXJlZCQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgcmVzaXplTm90aWZ5OiBTdWJqZWN0PHZvaWQ+O1xuXG4gICAgc29ydFN0cmF0ZWd5OiBJR3JpZFNvcnRpbmdTdHJhdGVneTtcbiAgICBncm91cFN0cmF0ZWd5PzogSUdyaWRHcm91cGluZ1N0cmF0ZWd5O1xuICAgIGZpbHRlcmluZ0xvZ2ljOiBGaWx0ZXJpbmdMb2dpYztcbiAgICBmaWx0ZXJTdHJhdGVneTogSUZpbHRlcmluZ1N0cmF0ZWd5O1xuICAgIGFsbG93QWR2YW5jZWRGaWx0ZXJpbmc6IGJvb2xlYW47XG4gICAgc29ydGluZ0V4cHJlc3Npb25zOiBJU29ydGluZ0V4cHJlc3Npb25bXTtcbiAgICBzb3J0aW5nRXhwcmVzc2lvbnNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxJU29ydGluZ0V4cHJlc3Npb25bXT47XG4gICAgZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlOiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIGZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZUNoYW5nZTogRXZlbnRFbWl0dGVyPElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWU+O1xuICAgIGFkdmFuY2VkRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlOiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlO1xuICAgIGFkdmFuY2VkRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZT47XG4gICAgc29ydGluZ09wdGlvbnM6IElTb3J0aW5nT3B0aW9ucztcblxuICAgIGJhdGNoRWRpdGluZzogYm9vbGVhbjtcbiAgICBncm91cGluZ0V4cGFuc2lvblN0YXRlPzogSUdyb3VwQnlFeHBhbmRTdGF0ZVtdO1xuICAgIGdyb3VwaW5nRXhwcmVzc2lvbnM/OiBJR3JvdXBpbmdFeHByZXNzaW9uW107XG4gICAgZ3JvdXBpbmdFeHByZXNzaW9uc0NoYW5nZT86IEV2ZW50RW1pdHRlcjxJR3JvdXBpbmdFeHByZXNzaW9uW10+O1xuICAgIGdyb3Vwc0V4cGFuZGVkPzogYm9vbGVhbjtcbiAgICByZWFkb25seSBncm91cHNSZWNvcmRzPzogSUdyb3VwQnlSZWNvcmRbXTtcbiAgICBncm91cGluZ0ZsYXRSZXN1bHQ/OiBhbnlbXTtcbiAgICBncm91cGluZ1Jlc3VsdD86IGFueVtdO1xuICAgIGdyb3VwaW5nTWV0YWRhdGE/OiBhbnlbXTtcbiAgICBzZWxlY3RlZENlbGxzPzogQ2VsbFR5cGVbXTtcbiAgICBzZWxlY3RlZFJvd3M6IGFueVtdO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGFjdGl2ZURlc2NlbmRhbnQ/OiBzdHJpbmc7XG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgaXNQaXZvdD86IGJvb2xlYW47XG5cbiAgICB0b2dnbGVHcm91cD8oZ3JvdXBSb3c6IElHcm91cEJ5UmVjb3JkKTogdm9pZDtcbiAgICBjbGVhckdyb3VwaW5nPyhmaWVsZDogc3RyaW5nKTogdm9pZDtcbiAgICBncm91cEJ5PyhleHByZXNzaW9uOiBJR3JvdXBpbmdFeHByZXNzaW9uIHwgQXJyYXk8SUdyb3VwaW5nRXhwcmVzc2lvbj4pOiB2b2lkO1xuICAgIHJlc29sdmVPdXRsZXQ/KCk6IElneE92ZXJsYXlPdXRsZXREaXJlY3RpdmU7XG4gICAgdXBkYXRlQ29sdW1ucyhjb2x1bW5zOiBDb2x1bW5UeXBlW10pOiB2b2lkO1xuICAgIGdldFNlbGVjdGVkUmFuZ2VzKCk6IEdyaWRTZWxlY3Rpb25SYW5nZVtdO1xuICAgIGRlc2VsZWN0QWxsQ29sdW1ucygpOiB2b2lkO1xuICAgIGRlc2VsZWN0Q29sdW1ucyhjb2x1bW5zOiBzdHJpbmdbXSB8IENvbHVtblR5cGVbXSk6IHZvaWQ7XG4gICAgc2VsZWN0Q29sdW1ucyhjb2x1bW5zOiBzdHJpbmdbXSB8IENvbHVtblR5cGVbXSk6IHZvaWQ7XG4gICAgc2VsZWN0ZWRDb2x1bW5zKCk6IENvbHVtblR5cGVbXTtcbiAgICByZWZyZXNoU2VhcmNoKCk6IHZvaWQ7XG4gICAgZ2V0RGVmYXVsdEV4cGFuZFN0YXRlKHJlY29yZDogYW55KTogYm9vbGVhbjtcbiAgICB0cmFja0NvbHVtbkNoYW5nZXMoaW5kZXg6IG51bWJlciwgY29sdW1uOiBhbnkpOiBhbnk7XG4gICAgZ2V0UG9zc2libGVDb2x1bW5XaWR0aCgpOiBzdHJpbmc7XG4gICAgcmVzZXRIb3Jpem9udGFsVmlydHVhbGl6YXRpb24oKTogdm9pZDtcbiAgICBoYXNWZXJ0aWNhbFNjcm9sbCgpOiBib29sZWFuO1xuICAgIGdldFZpc2libGVDb250ZW50SGVpZ2h0KCk6IG51bWJlcjtcbiAgICBnZXREcmFnR2hvc3RDdXN0b21UZW1wbGF0ZSgpOiBUZW1wbGF0ZVJlZjxhbnk+IHwgbnVsbDtcbiAgICBvcGVuUm93T3ZlcmxheShpZDogYW55KTogdm9pZDtcbiAgICBvcGVuQWR2YW5jZWRGaWx0ZXJpbmdEaWFsb2cob3ZlcmxheVNldHRpbmdzPzogT3ZlcmxheVNldHRpbmdzKTogdm9pZDtcbiAgICBzaG93U25hY2tiYXJGb3IoaW5kZXg6IG51bWJlcik6IHZvaWQ7XG4gICAgZ2V0Q29sdW1uQnlOYW1lKG5hbWU6IHN0cmluZyk6IGFueTtcbiAgICBnZXRDb2x1bW5CeVZpc2libGVJbmRleChpbmRleDogbnVtYmVyKTogQ29sdW1uVHlwZTtcbiAgICBnZXRIZWFkZXJHcm91cFdpZHRoKGNvbHVtbjogQ29sdW1uVHlwZSk6IHN0cmluZztcbiAgICBnZXRSb3dCeUtleT8oa2V5OiBhbnkpOiBSb3dUeXBlO1xuICAgIGdldFJvd0J5SW5kZXg/KGluZGV4OiBudW1iZXIpOiBSb3dUeXBlO1xuICAgIHNldEZpbHRlcmVkRGF0YShkYXRhOiBhbnksIHBpbm5lZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgc2V0RmlsdGVyZWRTb3J0ZWREYXRhKGRhdGE6IGFueSwgcGlubmVkOiBib29sZWFuKTogdm9pZDtcbiAgICBzb3J0KGV4cHJlc3Npb246IElTb3J0aW5nRXhwcmVzc2lvbiB8IElTb3J0aW5nRXhwcmVzc2lvbltdKTogdm9pZDtcbiAgICBjbGVhclNvcnQobmFtZT86IHN0cmluZyk6IHZvaWQ7XG4gICAgcGluUm93KGlkOiBhbnksIGluZGV4PzogbnVtYmVyLCByb3c/OiBSb3dUeXBlKTogYm9vbGVhbjtcbiAgICB1bnBpblJvdyhpZDogYW55LCByb3c/OiBSb3dUeXBlKTogYm9vbGVhbjtcbiAgICBnZXRVbnBpbm5lZEluZGV4QnlJZChpZDogYW55KTogbnVtYmVyO1xuICAgIGdldEVtcHR5UmVjb3JkT2JqZWN0Rm9yKGluUm93OiBSb3dUeXBlKTogYW55O1xuICAgIGlzU3VtbWFyeVJvdyhyZWM6IGFueSk6IGJvb2xlYW47XG4gICAgaXNSZWNvcmRQaW5uZWQocmVjOiBhbnkpOiBib29sZWFuO1xuICAgIGdldEluaXRpYWxQaW5uZWRJbmRleChyZWM6IGFueSk6IG51bWJlcjtcbiAgICBpc1JlY29yZFBpbm5lZEJ5Vmlld0luZGV4KHJvd0luZGV4OiBudW1iZXIpOiBib29sZWFuO1xuICAgIGlzQ29sdW1uR3JvdXBlZChmaWVsZE5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgaXNEZXRhaWxSZWNvcmQocmVjOiBhbnkpOiBib29sZWFuO1xuICAgIGlzR3JvdXBCeVJlY29yZChyZWM6IGFueSk6IGJvb2xlYW47XG4gICAgaXNHaG9zdFJlY29yZChyZWM6IGFueSk6IGJvb2xlYW47XG4gICAgaXNUcmVlUm93PyhyZWM6IGFueSk6IGJvb2xlYW47XG4gICAgaXNDaGlsZEdyaWRSZWNvcmQ/KHJlYzogYW55KTogYm9vbGVhbjtcbiAgICBnZXRDaGlsZEdyaWRzPyhpbkRlcHRoPzogYm9vbGVhbik6IGFueVtdO1xuICAgIGlzSGllcmFyY2hpY2FsUmVjb3JkPyhyZWNvcmQ6IGFueSk6IGJvb2xlYW47XG4gICAgY29sdW1uVG9WaXNpYmxlSW5kZXgoa2V5OiBzdHJpbmcgfCBudW1iZXIpOiBudW1iZXI7XG4gICAgbW92ZUNvbHVtbihjb2x1bW46IENvbHVtblR5cGUsIHRhcmdldDogQ29sdW1uVHlwZSwgcG9zOiBEcm9wUG9zaXRpb24pOiB2b2lkO1xuICAgIG5hdmlnYXRlVG8ocm93SW5kZXg6IG51bWJlciwgdmlzaWJsZUNvbHVtbkluZGV4OiBudW1iZXIsIGNhbGxiYWNrPzogKGU6IGFueSkgPT4gYW55KTogdm9pZDtcbiAgICBnZXRQcmV2aW91c0NlbGwoY3VyclJvd0luZGV4OiBudW1iZXIsIGN1clZpc2libGVDb2xJbmRleDogbnVtYmVyLCBjYWxsYmFjazogKGM6IENvbHVtblR5cGUpID0+IGJvb2xlYW4pOiBJQ2VsbFBvc2l0aW9uO1xuICAgIGdldE5leHRDZWxsKGN1cnJSb3dJbmRleDogbnVtYmVyLCBjdXJWaXNpYmxlQ29sSW5kZXg6IG51bWJlciwgY2FsbGJhY2s6IChjOiBDb2x1bW5UeXBlKSA9PiBib29sZWFuKTogSUNlbGxQb3NpdGlvbjtcbiAgICBjbGVhckNlbGxTZWxlY3Rpb24oKTogdm9pZDtcbiAgICBzZWxlY3RSYW5nZShyYW5nZTogR3JpZFNlbGVjdGlvblJhbmdlIHwgR3JpZFNlbGVjdGlvblJhbmdlW10pOiB2b2lkO1xuICAgIHNlbGVjdFJvd3Mocm93SURzOiBhbnlbXSwgY2xlYXJDdXJyZW50U2VsZWN0aW9uPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgZGVzZWxlY3RSb3dzKHJvd0lEczogYW55W10pOiB2b2lkO1xuICAgIHNlbGVjdEFsbFJvd3Mob25seUZpbHRlckRhdGE/OiBib29sZWFuKTogdm9pZDtcbiAgICBkZXNlbGVjdEFsbFJvd3Mob25seUZpbHRlckRhdGE/OiBib29sZWFuKTogdm9pZDtcbiAgICBzZXRVcFBhZ2luYXRvcigpOiB2b2lkO1xuICAgIGNyZWF0ZUZpbHRlckRyb3Bkb3duKGNvbHVtbjogQ29sdW1uVHlwZSwgb3B0aW9uczogT3ZlcmxheVNldHRpbmdzKTogYW55O1xuICAgIHVwZGF0ZUNlbGwodmFsdWU6IGFueSwgcm93U2VsZWN0b3I6IGFueSwgY29sdW1uOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8vIFR5cGUgdG8gUm93VHlwZVxuICAgIGNyZWF0ZVJvdz8oaW5kZXg6IG51bWJlciwgZGF0YT86IGFueSk6IFJvd1R5cGU7XG4gICAgZGVsZXRlUm93KGlkOiBhbnkpOiBhbnk7XG4gICAgZGVsZXRlUm93QnlJZChpZDogYW55KTogYW55O1xuICAgIHVwZGF0ZVJvdyh2YWx1ZTogYW55LCByb3dTZWxlY3RvcjogYW55KTogdm9pZDtcbiAgICBjb2xsYXBzZVJvdyhpZDogYW55KTogdm9pZDtcbiAgICBub3RpZnlDaGFuZ2VzKHJlcGFpbnQ/OiBib29sZWFuKTogdm9pZDtcbiAgICByZXNldENvbHVtbkNvbGxlY3Rpb25zKCk6IHZvaWQ7XG4gICAgdHJpZ2dlclBpcGVzKCk6IHZvaWQ7XG4gICAgcmVwb3NpdGlvblJvd0VkaXRpbmdPdmVybGF5KHJvdzogUm93VHlwZSk6IHZvaWQ7XG4gICAgY2xvc2VSb3dFZGl0aW5nT3ZlcmxheSgpOiB2b2lkO1xuICAgIHJlZmxvdygpOiB2b2lkO1xuXG4gICAgLy8gVE9ETzogTWF5YmUgbW92ZSB0aGVtIHRvIEZsYXRHcmlkVHlwZSwgYnV0IHRoZW4gd2lsbCB3ZSBuZWVkIGFub3RoZXIgdG9rZW4/XG4gICAgaXNFeHBhbmRlZEdyb3VwKGdyb3VwOiBJR3JvdXBCeVJlY29yZCk6IGJvb2xlYW47XG4gICAgY3JlYXRlQ29sdW1uc0xpc3Q/KGNvbHM6IENvbHVtblR5cGVbXSk6IHZvaWQ7XG4gICAgdG9nZ2xlQWxsR3JvdXBSb3dzPygpOiB2b2lkO1xuICAgIHRvZ2dsZUFsbD8oKTogdm9pZDtcbiAgICBnZW5lcmF0ZVJvd1BhdGg/KHJvd0lkOiBhbnkpOiBhbnlbXTtcbiAgICBwcmV2ZW50SGVhZGVyU2Nyb2xsPyhhcmdzOiBhbnkpOiB2b2lkO1xufVxuXG4vKipcbiAqIEFuIGludGVyZmFjZSBkZXNjcmliaW5nIGEgRmxhdCBHcmlkIHR5cGUuIEl0IGlzIGVzc2VudGlhbGx5IHRoZSBibHVlcHJpbnQgdG8gYSBncmlkIGtpbmRcbiAqIENvbnRhaW5zIGRlZmluaXRpb25zIG9mIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMsIHJlbGV2YW50IHRvIGEgZ3JpZCBraW5kXG4gKiBFeHRlbmRzIGZyb20gYEdyaWRUeXBlYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZsYXRHcmlkVHlwZSBleHRlbmRzIEdyaWRUeXBlIHtcbiAgICBncm91cGluZ0V4cGFuc2lvblN0YXRlOiBJR3JvdXBCeUV4cGFuZFN0YXRlW107XG4gICAgZ3JvdXBpbmdFeHByZXNzaW9uczogSUdyb3VwaW5nRXhwcmVzc2lvbltdO1xuICAgIGdyb3VwaW5nRXhwcmVzc2lvbnNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxJR3JvdXBpbmdFeHByZXNzaW9uW10+O1xuXG4gICAgdG9nZ2xlR3JvdXAoZ3JvdXBSb3c6IElHcm91cEJ5UmVjb3JkKTogdm9pZDtcbiAgICBjbGVhckdyb3VwaW5nKGZpZWxkOiBzdHJpbmcpOiB2b2lkO1xuICAgIGdyb3VwQnkoZXhwcmVzc2lvbjogSUdyb3VwaW5nRXhwcmVzc2lvbiB8IEFycmF5PElHcm91cGluZ0V4cHJlc3Npb24+KTogdm9pZDtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgZGVzY3JpYmluZyBhIFRyZWUgR3JpZCB0eXBlLiBJdCBpcyBlc3NlbnRpYWxseSB0aGUgYmx1ZXByaW50IHRvIGEgZ3JpZCBraW5kXG4gKiBDb250YWlucyBkZWZpbml0aW9ucyBvZiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLCByZWxldmFudCB0byBhIGdyaWQga2luZFxuICogRXh0ZW5kcyBmcm9tIGBHcmlkVHlwZWBcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmVlR3JpZFR5cGUgZXh0ZW5kcyBHcmlkVHlwZSB7XG4gICAgcmVjb3JkczogTWFwPGFueSwgSVRyZWVHcmlkUmVjb3JkPjtcbiAgICBpc1RyZWVSb3cocmVjOiBhbnkpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFuIGludGVyZmFjZSBkZXNjcmliaW5nIGEgSGllcmFyY2hpY2FsIEdyaWQgdHlwZS4gSXQgaXMgZXNzZW50aWFsbHkgdGhlIGJsdWVwcmludCB0byBhIGdyaWQga2luZFxuICogQ29udGFpbnMgZGVmaW5pdGlvbnMgb2YgcHJvcGVydGllcyBhbmQgbWV0aG9kcywgcmVsZXZhbnQgdG8gYSBncmlkIGtpbmRcbiAqIEV4dGVuZHMgZnJvbSBgR3JpZFR5cGVgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSGllcmFyY2hpY2FsR3JpZFR5cGUgZXh0ZW5kcyBHcmlkVHlwZSB7XG4gICAgY2hpbGRMYXlvdXRLZXlzOiBhbnlbXTtcbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgZGVzY3JpYmluZyBhIFBpdm90IEdyaWQgdHlwZS4gSXQgaXMgZXNzZW50aWFsbHkgdGhlIGJsdWVwcmludCB0byBhIGdyaWQga2luZFxuICogQ29udGFpbnMgZGVmaW5pdGlvbnMgb2YgcHJvcGVydGllcyBhbmQgbWV0aG9kcywgcmVsZXZhbnQgdG8gYSBncmlkIGtpbmRcbiAqIEV4dGVuZHMgZnJvbSBgR3JpZFR5cGVgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGl2b3RHcmlkVHlwZSBleHRlbmRzIEdyaWRUeXBlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3IgdGhlIHBpdm90IGdyaWQuXG4gICAgICogaXQgaW5jbHVkZXMgZGltZW5zaW9uIHN0cmF0ZWd5IGZvciByb3dzIGFuZCBjb2x1bW5zLCBmaWx0ZXJzIGFuZCBkYXRhIGtleXNcbiAgICAgKi9cbiAgICBwaXZvdENvbmZpZ3VyYXRpb246IElQaXZvdENvbmZpZ3VyYXRpb247XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYWxsIGRpbWVuc2lvbnMgKHJvd3MgYW5kIGNvbHVtbnMpIGluIHRoZSBwaXZvdCBncmlkLlxuICAgICAqIGl0IGluY2x1ZGVzIGhpZXJhcmNoaWNhbCBsZXZlbCwgZmlsdGVycyBhbmQgc29ydGluZywgZGltZW5zaW9uYWwgbGV2ZWwsIGV0Yy5cbiAgICAgKi9cbiAgICBhbGxEaW1lbnNpb25zOiBJUGl2b3REaW1lbnNpb25bXSxcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdG8gc2hvdyB0aGUgcGl2b3QgY29uZmlndXJhdGlvbiBVSSBpbiB0aGUgZ3JpZC4gKi9cbiAgICBwaXZvdFVJOiBJUGl2b3RVSVNldHRpbmdzO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGNvbHVtbkRpbWVuc2lvbnM6IElQaXZvdERpbWVuc2lvbltdO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHJvd0RpbWVuc2lvbnM6IElQaXZvdERpbWVuc2lvbltdO1xuICAgIHJvd0RpbWVuc2lvblJlc2l6aW5nOiBib29sZWFuO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHZhbHVlczogSVBpdm90VmFsdWVbXTtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBmaWx0ZXJEaW1lbnNpb25zOiBJUGl2b3REaW1lbnNpb25bXTtcbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBkaW1lbnNpb25EYXRhQ29sdW1uczogQ29sdW1uVHlwZVtdO1xuICAgIHBpdm90Um93V2lkdGhzOiBudW1iZXI7XG4gICAgLyoqIFJlcHJlc2VudHMgYSBtZXRob2QgZGVjbGFyYXRpb24gZm9yIHNldHRpbmcgdXAgdGhlIGNvbHVtbnMgZm9yIHRoZSBwaXZvdCBncmlkIGJhc2VkIG9uIHRoZSBwaXZvdCBjb25maWd1cmF0aW9uICovXG4gICAgc2V0dXBDb2x1bW5zKCk6IHZvaWQ7XG4gICAgLyoqIFJlcHJlc2VudHMgYSBtZXRob2QgZGVjbGFyYXRpb24gdGhhdCBhbGxvd3MgdG9nZ2xlIG9mIGV4cGFuc2lvbiBzdGF0ZSBvZiBhIHJvdyAodGFrZW4gYXMgYSBwYXJhbWV0ZXIpIGluIHRoZSBwaXZvdCBncmlkICovXG4gICAgdG9nZ2xlUm93KHJvd0lEOiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFJlcHJlc2VudHMgYSBtZXRob2QgZGVjbGFyYXRpb24gZm9yIHJlc29sdmluZyB0aGUgZGF0YSB0eXBlIGZvciBhIHNwZWNpZmljIGZpZWxkIChjb2x1bW4pLlxuICAgICAqIEl0IHRha2VzIHRoZSBmaWVsZCBhcyBhIHBhcmFtZXRlciBhbmQgcmV0dXJucyBpdCdzIHR5cGVcbiAgICAgKi9cbiAgICByZXNvbHZlRGF0YVR5cGVzKGZpZWxkOiBhbnkpOiBHcmlkQ29sdW1uRGF0YVR5cGU7XG4gICAgLyoqXG4gICAgICogUmVwcmVzZW50cyBhIG1ldGhvZCBkZWNsYXJhdGlvbiBmb3IgbW92aW5nIGRpbWVuc2lvbiBmcm9tIGl0cyBjdXJyZW50bHkgY29sbGVjdGlvbiB0byB0aGUgc3BlY2lmaWVkIHRhcmdldCBjb2xsZWN0aW9uXG4gICAgICogYnkgdHlwZSAoUm93LCBDb2x1bW4gb3IgRmlsdGVyKSBhdCBzcGVjaWZpZWQgaW5kZXggb3IgYXQgdGhlIGNvbGxlY3Rpb24ncyBlbmRcbiAgICAgKi9cbiAgICBtb3ZlRGltZW5zaW9uKGRpbWVuc2lvbjogSVBpdm90RGltZW5zaW9uLCB0YXJnZXRDb2xsZWN0aW9uVHlwZTogUGl2b3REaW1lbnNpb25UeXBlLCBpbmRleD86IG51bWJlcik7XG4gICAgZ2V0RGltZW5zaW9uc0J5VHlwZShkaW1lbnNpb246IFBpdm90RGltZW5zaW9uVHlwZSk7XG4gICAgLyoqIFRvZ2dsZXMgdGhlIGRpbWVuc2lvbidzIGVuYWJsZWQgc3RhdGUgb24gb3Igb2ZmLiBUaGUgZGltZW5zaW9uIHJlbWFpbnMgaW4gaXRzIGN1cnJlbnQgY29sbGVjdGlvbiAqL1xuICAgIHRvZ2dsZURpbWVuc2lvbihkaW1lbnNpb246IElQaXZvdERpbWVuc2lvbik7XG4gICAgLyoqIFNvcnQgdGhlIGRpbWVuc2lvbiBhbmQgaXRzIGNoaWxkcmVuIGluIHRoZSBwcm92aWRlZCBkaXJlY3Rpb24gKGFzY2VuZGluZywgZGVzY2VuZGluZyBvciBub25lKS4gKi9cbiAgICBzb3J0RGltZW5zaW9uKGRpbWVuc2lvbjogSVBpdm90RGltZW5zaW9uLCBzb3J0RGlyZWN0aW9uOiBTb3J0aW5nRGlyZWN0aW9uKTtcbiAgICAvKiogVG9nZ2xlcyB0aGUgdmFsdWUncyBlbmFibGVkIHN0YXRlIG9uIG9yIG9mZi4gVGhlIHZhbHVlIHJlbWFpbnMgaW4gaXRzIGN1cnJlbnQgY29sbGVjdGlvbi4gKi9cbiAgICB0b2dnbGVWYWx1ZSh2YWx1ZTogSVBpdm90VmFsdWUpO1xuICAgIC8qKiBNb3ZlIHZhbHVlIGZyb20gaXRzIGN1cnJlbnRseSBhdCBzcGVjaWZpZWQgaW5kZXggb3IgYXQgdGhlIGVuZC5cbiAgICAgKiBJZiB0aGUgcGFyYW1ldGVyIGlzIG5vdCBzZXQsIGl0IHdpbGwgYWRkIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGNvbGxlY3Rpb24uICovXG4gICAgbW92ZVZhbHVlKHZhbHVlOiBJUGl2b3RWYWx1ZSwgaW5kZXg/OiBudW1iZXIpO1xuICAgIHJvd0RpbWVuc2lvbldpZHRoKGRpbTogSVBpdm90RGltZW5zaW9uKTogc3RyaW5nO1xuICAgIHJvd0RpbWVuc2lvbldpZHRoVG9QaXhlbHMoZGltOiBJUGl2b3REaW1lbnNpb24pOiBudW1iZXI7XG4gICAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIGRpbWVuc2lvbnMgaW4gdGhlIHBpdm90IGdyaWQgY2hhbmdlLiAqL1xuICAgIGRpbWVuc2lvbnNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxJRGltZW5zaW9uc0NoYW5nZT47XG4gICAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIHZhbHVlcyBpbiB0aGUgcGl2b3QgZ3JpZCBjaGFuZ2UuICovXG4gICAgdmFsdWVzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SVZhbHVlc0NoYW5nZT47XG4gICAgLyoqIEVtaXRzIGFuIGV2ZW50IHdoZW4gdGhlIGEgZGltZW5zaW9uIGlzIHNvcnRlZC4gKi9cbiAgICBkaW1lbnNpb25zU29ydGluZ0V4cHJlc3Npb25zQ2hhbmdlOiBFdmVudEVtaXR0ZXI8SVNvcnRpbmdFeHByZXNzaW9uW10+O1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIHBpdm90S2V5czogSVBpdm90S2V5cztcbiAgICBoYXNNdWx0aXBsZVZhbHVlczogYm9vbGVhbjtcbiAgICBleGNlbFN0eWxlRmlsdGVyTWF4SGVpZ2h0OiBzdHJpbmc7XG4gICAgZXhjZWxTdHlsZUZpbHRlck1pbkhlaWdodDogc3RyaW5nO1xuICAgIHZhbHVlQ2hpcFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIHJvd0RpbWVuc2lvbkhlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hDb2x1bW5UZW1wbGF0ZUNvbnRleHQ+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEdyaWRTVkdJY29uIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJU2l6ZUluZm8ge1xuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgcGFkZGluZzogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZE1hc3RlckRldGFpbENvbnRleHQge1xuICAgICRpbXBsaWNpdDogYW55O1xuICAgIGluZGV4OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JvdXBCeVJvd1RlbXBsYXRlQ29udGV4dCB7XG4gICAgJGltcGxpY2l0OiBJR3JvdXBCeVJlY29yZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcmlkVGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IEdyaWRUeXBlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFJvd1RlbXBsYXRlQ29udGV4dCB7XG4gICAgJGltcGxpY2l0OiBSb3dUeXBlXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFJvd0RyYWdHaG9zdENvbnRleHQge1xuICAgICRpbXBsaWNpdDogYW55LCAvLyB0aGlzIGlzIHRoZSByb3cgZGF0YVxuICAgIGRhdGE6IGFueSwgLy8gdGhpcyBpcyBhbHNvIHRoZSByb3cgZGF0YSBmb3Igc29tZSByZWFzb24uXG4gICAgZ3JpZDogR3JpZFR5cGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcmlkRW1wdHlUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFJvd0VkaXRUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogdW5kZWZpbmVkLFxuICAgIHJvd0NoYW5nZXNDb3VudDogbnVtYmVyLFxuICAgIGVuZEVkaXQ6IChjb21taXQ6IGJvb2xlYW4sIGV2ZW50PzogRXZlbnQpID0+IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcmlkUm93RWRpdFRleHRUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFJvd0VkaXRBY3Rpb25zVGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IChjb21taXQ6IGJvb2xlYW4sIGV2ZW50PzogRXZlbnQpID0+IHZvaWRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcmlkSGVhZGVyVGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IEhlYWRlclR5cGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hDb2x1bW5UZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogQ29sdW1uVHlwZSxcbiAgICBjb2x1bW46IENvbHVtblR5cGVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hDZWxsVGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IGFueSxcbiAgICBhZGRpdGlvbmFsVGVtcGxhdGVDb250ZXh0OiBhbnksXG4gICAgZm9ybUNvbnRyb2w/OiBGb3JtQ29udHJvbDxhbnk+LFxuICAgIGRlZmF1bHRFcnJvclRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PixcbiAgICBjZWxsOiBDZWxsVHlwZVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElneFJvd1NlbGVjdG9yVGVtcGxhdGVEZXRhaWxzIHtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGluIHZlcnNpb24gMTUuMS4wLiBVc2UgdGhlIGBrZXlgIHByb3BlcnR5IGluc3RlYWQuXG4gICAgICovXG4gICAgcm93SUQ6IGFueTtcbiAgICBrZXk6IGFueTtcbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcbiAgICBzZWxlY3Q/OiAoKSA9PiB2b2lkO1xuICAgIGRlc2VsZWN0PzogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hSb3dTZWxlY3RvclRlbXBsYXRlQ29udGV4dCB7XG4gICAgJGltcGxpY2l0OiBJZ3hSb3dTZWxlY3RvclRlbXBsYXRlRGV0YWlscztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcm91cEJ5Um93U2VsZWN0b3JUZW1wbGF0ZURldGFpbHMge1xuICAgIHNlbGVjdGVkQ291bnQ6IG51bWJlcjtcbiAgICB0b3RhbENvdW50OiBudW1iZXI7XG4gICAgZ3JvdXBSb3c6IElHcm91cEJ5UmVjb3JkO1xufVxuZXhwb3J0IGludGVyZmFjZSBJZ3hHcm91cEJ5Um93U2VsZWN0b3JUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogSWd4R3JvdXBCeVJvd1NlbGVjdG9yVGVtcGxhdGVEZXRhaWxzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElneEhlYWRTZWxlY3RvclRlbXBsYXRlRGV0YWlscyB7XG4gICAgc2VsZWN0ZWRDb3VudDogbnVtYmVyO1xuICAgIHRvdGFsQ291bnQ6IG51bWJlcjtcbiAgICBzZWxlY3RBbGw/OiAoKSA9PiB2b2lkO1xuICAgIGRlc2VsZWN0QWxsPzogKCkgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSWd4SGVhZFNlbGVjdG9yVGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IElneEhlYWRTZWxlY3RvclRlbXBsYXRlRGV0YWlscztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJZ3hTdW1tYXJ5VGVtcGxhdGVDb250ZXh0IHtcbiAgICAkaW1wbGljaXQ6IElneFN1bW1hcnlSZXN1bHRbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElneEdyaWRQYWdpbmF0b3JUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogR3JpZFR5cGU7XG59XG5cbi8qKlxuICogQW4gaW50ZXJmYWNlIGRlc2NyaWJpbmcgc2V0dGluZ3MgZm9yIHJvdy9jb2x1bW4gcGlubmluZyBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJUGlubmluZ0NvbmZpZyB7XG4gICAgY29sdW1ucz86IENvbHVtblBpbm5pbmdQb3NpdGlvbjtcbiAgICByb3dzPzogUm93UGlubmluZ1Bvc2l0aW9uO1xufVxuXG4vKipcbiAqIEFuIGludGVyZmFjZSBkZXNjcmliaW5nIHNldHRpbmdzIGZvciBjbGlwYm9hcmQgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElDbGlwYm9hcmRPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBFbmFibGVzL2Rpc2FibGVzIHRoZSBjb3B5IGJlaGF2aW9yXG4gICAgICovXG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBJbmNsdWRlIHRoZSBjb2x1bW5zIGhlYWRlcnMgaW4gdGhlIGNsaXBib2FyZCBvdXRwdXQuXG4gICAgICovXG4gICAgY29weUhlYWRlcnM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQXBwbHkgdGhlIGNvbHVtbnMgZm9ybWF0dGVycyAoaWYgYW55KSBvbiB0aGUgZGF0YSBpbiB0aGUgY2xpcGJvYXJkIG91dHB1dC5cbiAgICAgKi9cbiAgICBjb3B5Rm9ybWF0dGVyczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGUgc2VwYXJhdG9yIHVzZWQgZm9yIGZvcm1hdHRpbmcgdGhlIGNvcHkgb3V0cHV0LiBEZWZhdWx0cyB0byBgXFx0YC5cbiAgICAgKi9cbiAgICBzZXBhcmF0b3I6IHN0cmluZztcbn1cbiJdfQ==