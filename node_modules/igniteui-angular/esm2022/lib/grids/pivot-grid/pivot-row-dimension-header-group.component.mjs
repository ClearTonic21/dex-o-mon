import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Inject, Input, ViewChild } from '@angular/core';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridHeaderGroupComponent } from '../headers/grid-header-group.component';
import { IgxPivotRowDimensionHeaderComponent } from './pivot-row-dimension-header.component';
import { IgxHeaderGroupStylePipe } from '../headers/pipes';
import { IgxPivotResizeHandleDirective } from '../resizing/pivot-grid/pivot-resize-handle.directive';
import { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';
import { IgxColumnMovingDropDirective } from '../moving/moving.drop.directive';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
import { NgIf, NgClass, NgStyle } from '@angular/common';
import { IgxIconComponent } from '../../icon/icon.component';
import * as i0 from "@angular/core";
import * as i1 from "../resizing/pivot-grid/pivot-resizing.service";
import * as i2 from "../filtering/grid-filtering.service";
import * as i3 from "../../core/utils";
/**
 * @hidden
 */
export class IgxPivotRowDimensionHeaderGroupComponent extends IgxGridHeaderGroupComponent {
    constructor(cdRef, grid, elementRef, colResizingService, filteringService, platform, zone) {
        super(cdRef, grid, elementRef, colResizingService, filteringService, platform);
        this.cdRef = cdRef;
        this.grid = grid;
        this.elementRef = elementRef;
        this.colResizingService = colResizingService;
        this.zone = zone;
        /**
         * @hidden
         */
        this.userSelect = 'none';
    }
    get headerID() {
        return `${this.grid.id}_-2_${this.rowIndex}_${this.visibleIndex}`;
    }
    get title() {
        return this.column.header;
    }
    /**
     * @hidden @internal
     */
    onClick(event) {
        if (this.grid.rowSelection === 'none') {
            return;
        }
        event?.stopPropagation();
        const key = this.parent.getRowDimensionKey(this.column);
        if (this.grid.selectionService.isRowSelected(key)) {
            this.grid.selectionService.deselectRow(key, event);
        }
        else {
            this.grid.selectionService.selectRowById(key, true, event);
        }
        this.zone.run(() => { });
    }
    /**
     * @hidden
     * @internal
     */
    get visibleIndex() {
        const field = this.column.field;
        const rows = this.grid.rowDimensions;
        const rootDimension = this.findRootDimension(field);
        return rows.indexOf(rootDimension);
    }
    get active() {
        const nav = this.grid.navigation;
        const node = nav.activeNode;
        return node && !this.column.columnGroup ?
            nav.isRowHeaderActive &&
                node.row === this.rowIndex &&
                node.column === this.visibleIndex :
            false;
    }
    get activeNode() {
        this.grid.navigation.isRowHeaderActive = true;
        return {
            row: this.rowIndex, column: this.visibleIndex, level: null,
            mchCache: null,
            layout: null
        };
    }
    findRootDimension(field) {
        const rows = this.grid.rowDimensions;
        let tempRow;
        let result = null;
        rows.forEach(row => {
            tempRow = row;
            do {
                if (tempRow.memberName === field) {
                    result = row;
                }
                tempRow = tempRow.childLevel;
            } while (tempRow);
        });
        return result;
    }
    activate() {
        this.grid.navigation.isRowHeader = true;
        this.grid.navigation.setActiveNode(this.activeNode);
    }
    /**
     * @hidden @internal
     */
    pointerdown(_event) {
        this.activate();
    }
    /**
     * @hidden @internal
     */
    onMouseDown(_event) {
        this.activate();
    }
    get selectable() {
        return false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxPivotRowDimensionHeaderGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: IGX_GRID_BASE }, { token: i0.ElementRef }, { token: i1.IgxPivotColumnResizingService }, { token: i2.IgxFilteringService }, { token: i3.PlatformUtil }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.1", type: IgxPivotRowDimensionHeaderGroupComponent, isStandalone: true, selector: "igx-pivot-row-dimension-header-group", inputs: { rowIndex: "rowIndex", parent: "parent" }, host: { listeners: { "click": "onClick($event)" }, properties: { "style.user-select": "this.userSelect", "attr.id": "this.headerID", "attr.title": "this.title", "class.igx-grid-th--active": "this.active" } }, viewQueries: [{ propertyName: "header", first: true, predicate: IgxPivotRowDimensionHeaderComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultColumn>\n    <span class=\"igx-grid-th__group-title\" [title]=\"title\">{{column.header}}</span>\n</ng-template>\n\n<ng-template #defaultCollapseIndicator>\n    <igx-icon>{{column.expanded ? 'expand_more' : 'chevron_right'}}</igx-icon>\n</ng-template>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-left\"></span>\n    <igx-pivot-row-dimension-header\n        role=\"columnheader\"\n        class=\"igx-grid-th--fw\"\n        [id]=\"grid.id + '_' + column.field\"\n        [ngClass]=\"column.headerClasses\"\n        [ngStyle]=\"column.headerStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\n        [igxColumnMovingDrag]=\"column\"\n        [ghostHost]=\"grid.outlet.nativeElement\"\n        [attr.droppable]=\"true\"\n        (pointerdown)=\"pointerdown($event)\"\n        [igxColumnMovingDrop]=\"column\"\n        [column]=\"column\"\n    >\n    </igx-pivot-row-dimension-header>\n    <span *ngIf=\"!column.columnGroup && column.resizable\" class=\"igx-grid-th__resize-handle\"\n        [igxPivotResizeHandle]=\"column\"\n        [igxPivotResizeHandleHeader]=\"this\"\n        [attr.draggable]=\"false\"\n        [style.cursor]=\"colResizingService.resizeCursor\">\n    </span>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-right\"></span>\n</ng-container>\n", dependencies: [{ kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxPivotRowDimensionHeaderComponent, selector: "igx-pivot-row-dimension-header" }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: IgxColumnMovingDragDirective, selector: "[igxColumnMovingDrag]", inputs: ["igxColumnMovingDrag"] }, { kind: "directive", type: IgxColumnMovingDropDirective, selector: "[igxColumnMovingDrop]", inputs: ["igxColumnMovingDrop"] }, { kind: "directive", type: IgxPivotResizeHandleDirective, selector: "[igxPivotResizeHandle]", inputs: ["igxPivotResizeHandle", "igxPivotResizeHandleHeader"] }, { kind: "pipe", type: IgxHeaderGroupStylePipe, name: "igxHeaderGroupStyle" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxPivotRowDimensionHeaderGroupComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-pivot-row-dimension-header-group', standalone: true, imports: [IgxIconComponent, NgIf, IgxPivotRowDimensionHeaderComponent, NgClass, NgStyle, IgxColumnMovingDragDirective, IgxColumnMovingDropDirective, IgxGridFilteringCellComponent, IgxPivotResizeHandleDirective, IgxHeaderGroupStylePipe], template: "<ng-template #defaultColumn>\n    <span class=\"igx-grid-th__group-title\" [title]=\"title\">{{column.header}}</span>\n</ng-template>\n\n<ng-template #defaultCollapseIndicator>\n    <igx-icon>{{column.expanded ? 'expand_more' : 'chevron_right'}}</igx-icon>\n</ng-template>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-left\"></span>\n    <igx-pivot-row-dimension-header\n        role=\"columnheader\"\n        class=\"igx-grid-th--fw\"\n        [id]=\"grid.id + '_' + column.field\"\n        [ngClass]=\"column.headerClasses\"\n        [ngStyle]=\"column.headerStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\n        [igxColumnMovingDrag]=\"column\"\n        [ghostHost]=\"grid.outlet.nativeElement\"\n        [attr.droppable]=\"true\"\n        (pointerdown)=\"pointerdown($event)\"\n        [igxColumnMovingDrop]=\"column\"\n        [column]=\"column\"\n    >\n    </igx-pivot-row-dimension-header>\n    <span *ngIf=\"!column.columnGroup && column.resizable\" class=\"igx-grid-th__resize-handle\"\n        [igxPivotResizeHandle]=\"column\"\n        [igxPivotResizeHandleHeader]=\"this\"\n        [attr.draggable]=\"false\"\n        [style.cursor]=\"colResizingService.resizeCursor\">\n    </span>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-right\"></span>\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }, { type: i1.IgxPivotColumnResizingService }, { type: i2.IgxFilteringService }, { type: i3.PlatformUtil }, { type: i0.NgZone }], propDecorators: { userSelect: [{
                type: HostBinding,
                args: ['style.user-select']
            }], rowIndex: [{
                type: Input
            }], parent: [{
                type: Input
            }], header: [{
                type: ViewChild,
                args: [IgxPivotRowDimensionHeaderComponent]
            }], headerID: [{
                type: HostBinding,
                args: ['attr.id']
            }], title: [{
                type: HostBinding,
                args: ['attr.title']
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }], active: [{
                type: HostBinding,
                args: ['class.igx-grid-th--active']
            }] } });
//# sourceMappingURL=data:application/json;base64,