import { Component, HostBinding, Input, TemplateRef, ViewChild, booleanAttribute } from '@angular/core';
import { first, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { NgTemplateOutlet } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./icon.service";
/**
 * Icon provides a way to include material icons to markup
 *
 * @igxModule IgxIconModule
 *
 * @igxTheme igx-icon-theme
 *
 * @igxKeywords icon, picture
 *
 * @igxGroup Display
 *
 * @remarks
 *
 * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons
 * support different icon families and can be marked as active or disabled using the `active` property. This will change the appearance
 * of the icon.
 *
 * @example
 * ```html
 * <igx-icon family="filter-icons" active="true">home</igx-icon>
 * ```
 */
export class IgxIconComponent {
    constructor(el, iconService, ref) {
        this.el = el;
        this.iconService = iconService;
        this.ref = ref;
        /**
         *  This allows you to change the value of `class.igx-icon`. By default it's `igx-icon`.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-icon';
        /**
         *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
         *
         * @example
         * ```typescript
         * @ViewChild("MyIcon") public icon: IgxIconComponent;
         * constructor(private cdRef:ChangeDetectorRef) {}
         * ngAfterViewInit() {
         *     this.icon.ariaHidden = false;
         *     this.cdRef.detectChanges();
         * }
         * ```
         */
        this.ariaHidden = true;
        /**
         * Gets/Sets whether the active state is applied. By default it's true.
         *
         * @example
         * ```html
         * <igx-icon [active]="false">settings</igx-icon>
         * ```
         */
        this.active = true;
        this.destroy$ = new Subject();
        this.family = this.iconService.defaultFamily;
        this.iconService.registerFamilyAlias('material', 'material-icons');
        this.iconService.iconLoaded
            .pipe(first((e) => e.name === this.name && e.family === this.family), takeUntil(this.destroy$))
            .subscribe(() => this.ref.detectChanges());
    }
    /**
     * @hidden
     * @internal
     */
    ngOnInit() {
        this.updateIconClass();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     *  An accessor that returns the value of the family property.
     *
     * @example
     * ```typescript
     *  @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconFamily = this.icon.getFamily;
     * }
     * ```
     */
    get getFamily() {
        return this.family;
    }
    /**
     *  An accessor that returns the value of the active property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     */
    get getActive() {
        return this.active;
    }
    /**
     *  An accessor that returns inactive property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     */
    get getInactive() {
        return !this.active;
    }
    /**
     * An accessor that returns the value of the iconName property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let name = this.icon.getName;
     * }
     * ```
     */
    get getName() {
        return this.name;
    }
    /**
     *  An accessor that returns the underlying SVG image as SafeHtml.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let svg: SafeHtml = this.icon.getSvg;
     * }
     * ```
     */
    get getSvg() {
        if (this.iconService.isSvgIconCached(this.name, this.family)) {
            return this.iconService.getSvgIcon(this.name, this.family);
        }
        return null;
    }
    /**
     *   An accessor that returns a TemplateRef to explicit, svg or no ligature.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconTemplate = this.icon.template;
     * }
     * ```
     */
    get template() {
        if (this.name) {
            if (this.iconService.isSvgIconCached(this.name, this.family)) {
                return this.svgImage;
            }
            return this.noLigature;
        }
        return this.explicitLigature;
    }
    /**
     * @hidden
     * @internal
     */
    updateIconClass() {
        const className = this.iconService.familyClassName(this.family);
        this.el.nativeElement.classList.add(className);
        if (this.name && !this.iconService.isSvgIconCached(this.name, this.family)) {
            this.el.nativeElement.classList.add(this.name);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxIconComponent, deps: [{ token: i0.ElementRef }, { token: i1.IgxIconService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.0.1", type: IgxIconComponent, isStandalone: true, selector: "igx-icon", inputs: { family: "family", active: ["active", "active", booleanAttribute], name: "name" }, host: { properties: { "class.igx-icon": "this.cssClass", "attr.aria-hidden": "this.ariaHidden", "class.igx-icon--inactive": "this.getInactive" } }, viewQueries: [{ propertyName: "noLigature", first: true, predicate: ["noLigature"], descendants: true, read: TemplateRef, static: true }, { propertyName: "explicitLigature", first: true, predicate: ["explicitLigature"], descendants: true, read: TemplateRef, static: true }, { propertyName: "svgImage", first: true, predicate: ["svgImage"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #svgImage>\n    <div [innerHTML]=\"getSvg\"></div>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n", dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-icon', standalone: true, imports: [NgTemplateOutlet], template: "<ng-template #noLigature></ng-template>\n\n<ng-template #explicitLigature>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #svgImage>\n    <div [innerHTML]=\"getSvg\"></div>\n</ng-template>\n\n<ng-container *ngTemplateOutlet=\"template\"></ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.IgxIconService }, { type: i0.ChangeDetectorRef }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-icon']
            }], ariaHidden: [{
                type: HostBinding,
                args: ['attr.aria-hidden']
            }], family: [{
                type: Input,
                args: ['family']
            }], active: [{
                type: Input,
                args: [{ alias: 'active', transform: booleanAttribute }]
            }], name: [{
                type: Input,
                args: ['name']
            }], noLigature: [{
                type: ViewChild,
                args: ['noLigature', { read: TemplateRef, static: true }]
            }], explicitLigature: [{
                type: ViewChild,
                args: ['explicitLigature', { read: TemplateRef, static: true }]
            }], svgImage: [{
                type: ViewChild,
                args: ['svgImage', { read: TemplateRef, static: true }]
            }], getInactive: [{
                type: HostBinding,
                args: ['class.igx-icon--inactive']
            }] } });
//# sourceMappingURL=data:application/json;base64,