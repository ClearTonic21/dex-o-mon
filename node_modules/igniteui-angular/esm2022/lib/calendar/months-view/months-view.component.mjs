import { Component, Input, HostBinding, booleanAttribute, Inject, } from "@angular/core";
import { IgxCalendarMonthDirective } from "../calendar.directives";
import { NgFor, TitleCasePipe, DatePipe } from "@angular/common";
import { IgxCalendarViewDirective, DAY_INTERVAL_TOKEN, } from "../common/calendar-view.directive";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { CalendarDay } from "../common/model";
import { calendarRange } from "../common/helpers";
import * as i0 from "@angular/core";
let NEXT_ID = 0;
export class IgxMonthsViewComponent extends IgxCalendarViewDirective {
    #standalone;
    /**
     * @hidden @internal
     */
    get standalone() {
        return this.#standalone;
    }
    set standalone(value) {
        this.#standalone = value;
    }
    /**
     * Gets the month format option of the months view.
     * ```typescript
     * let monthFormat = this.monthsView.monthFormat.
     * ```
     */
    get monthFormat() {
        return this._monthFormat;
    }
    /**
     * Sets the month format option of the months view.
     * ```html
     * <igx-months-view> [monthFormat]="short'"</igx-months-view>
     * ```
     *
     * @memberof IgxMonthsViewComponent
     */
    set monthFormat(value) {
        this._monthFormat = value;
        this.initFormatter();
    }
    /**
     * Returns an array of date objects which are then used to
     * properly render the month names.
     *
     * Used in the template of the component
     *
     * @hidden @internal
     */
    get range() {
        const start = CalendarDay.from(this.date).set({ date: 1, month: 0 });
        const end = start.add(this.dayInterval, 12);
        return Array.from(calendarRange({ start, end, unit: this.dayInterval })).map((m) => m.native);
    }
    constructor(el, dayInterval) {
        super(dayInterval);
        this.el = el;
        this.#standalone = true;
        /**
         * Sets/gets the `id` of the months view.
         * If not set, the `id` will have value `"igx-months-view-0"`.
         * ```html
         * <igx-months-view id="my-months-view"></igx-months-view>
         * ```
         * ```typescript
         * let monthsViewId =  this.monthsView.id;
         * ```
         *
         * @memberof IgxMonthsViewComponent
         */
        this.id = `igx-months-view-${NEXT_ID++}`;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.viewClass = true;
        /**
         * Gets/sets whether the view should be rendered
         * according to the locale and format, if any.
         */
        this.formatView = true;
        /**
         * @hidden
         */
        this._monthFormat = "short";
    }
    /**
     * Returns the locale representation of the month in the months view.
     *
     * @hidden
     */
    formattedMonth(value) {
        const rawFormatter = new Intl.DateTimeFormat(this.locale, {
            month: "long",
            year: "numeric",
        });
        if (this.formatView) {
            return {
                long: rawFormatter.format(value),
                formatted: this._formatter.format(value),
            };
        }
        return {
            long: rawFormatter.format(value),
            formatted: `${value.getMonth()}`,
        };
    }
    /**
     * @hidden
     */
    monthTracker(_, item) {
        return `${item.getMonth()}}`;
    }
    /**
     * @hidden
     */
    initFormatter() {
        this._formatter = new Intl.DateTimeFormat(this._locale, {
            month: this.monthFormat,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxMonthsViewComponent, deps: [{ token: i0.ElementRef }, { token: DAY_INTERVAL_TOKEN }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.0.1", type: IgxMonthsViewComponent, isStandalone: true, selector: "igx-months-view", inputs: { id: "id", standalone: "standalone", monthFormat: "monthFormat", formatView: ["formatView", "formatView", booleanAttribute] }, host: { properties: { "attr.id": "this.id", "class.igx-months-view": "this.viewClass", "class.igx-months-view--standalone": "this.standalone" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxMonthsViewComponent,
                multi: true,
            },
            {
                provide: DAY_INTERVAL_TOKEN,
                useValue: "month",
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"igx-months-view__grid\" role=\"row\">\n    <span\n        igxCalendarMonth\n        #item=\"igxCalendarMonth\"\n        *ngFor=\"let month of range; trackBy: monthTracker\"\n        class=\"igx-months-view__month\"\n        role=\"gridcell\"\n        [attr.id]=\"month.getTime()\"\n        [attr.aria-label]=\"formattedMonth(month).long\"\n        [attr.aria-selected]=\"item.isSelected\"\n        [value]=\"month\"\n        [date]=\"date\"\n        [showActive]=\"showActive\"\n        (itemSelection)=\"selectDate($event)\"\n    >\n        <span class=\"igx-months-view__month-inner\" aria-hidden=\"true\">\n            {{ formattedMonth(month).formatted | titlecase }}\n        </span>\n    </span>\n</div>\n", dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: IgxCalendarMonthDirective, selector: "[igxCalendarMonth]", exportAs: ["igxCalendarMonth"] }, { kind: "pipe", type: TitleCasePipe, name: "titlecase" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: IgxMonthsViewComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxMonthsViewComponent,
                            multi: true,
                        },
                        {
                            provide: DAY_INTERVAL_TOKEN,
                            useValue: "month",
                        },
                    ], selector: "igx-months-view", standalone: true, imports: [NgFor, IgxCalendarMonthDirective, TitleCasePipe, DatePipe], template: "<div class=\"igx-months-view__grid\" role=\"row\">\n    <span\n        igxCalendarMonth\n        #item=\"igxCalendarMonth\"\n        *ngFor=\"let month of range; trackBy: monthTracker\"\n        class=\"igx-months-view__month\"\n        role=\"gridcell\"\n        [attr.id]=\"month.getTime()\"\n        [attr.aria-label]=\"formattedMonth(month).long\"\n        [attr.aria-selected]=\"item.isSelected\"\n        [value]=\"month\"\n        [date]=\"date\"\n        [showActive]=\"showActive\"\n        (itemSelection)=\"selectDate($event)\"\n    >\n        <span class=\"igx-months-view__month-inner\" aria-hidden=\"true\">\n            {{ formattedMonth(month).formatted | titlecase }}\n        </span>\n    </span>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DAY_INTERVAL_TOKEN]
                }] }], propDecorators: { id: [{
                type: HostBinding,
                args: ["attr.id"]
            }, {
                type: Input
            }], viewClass: [{
                type: HostBinding,
                args: ["class.igx-months-view"]
            }], standalone: [{
                type: Input
            }, {
                type: HostBinding,
                args: ["class.igx-months-view--standalone"]
            }], monthFormat: [{
                type: Input
            }], formatView: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,